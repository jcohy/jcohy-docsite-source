{
  "filename": "beans-dependencies.md",
  "__html": "<h1>Spring  Framework 中文文档</h1>\n<h3><a href=\"#beans-dependencies\"></a>1.4. 依赖</h3>\n<p>一般情况下企业应用不会只有一个对象（Spring Bean），甚至最简单的应用都需要多个对象协同工作。下一节将解释如何从定义单个Bean到让多个Bean协同工作。</p>\n<p><a id=\"beans-factory-collaborators\"></a></p>\n<h4><a href=\"#beans-factory-collaborators\"></a>1.4.1. 依赖注入</h4>\n<p>依赖注入是让对象只通过构造参数、工厂方法的参数或者配置的属性来定义他们的依赖的过程。这些依赖也是其他对象所需要协同工作的对象， 容器会在创建Bean的时候注入这些依赖。整个过程完全反转了由Bean自己控制实例化或者依赖引用，所以这个过程也称之为“控制反转”</p>\n<p>当使用了依赖注入的特性以后，会让开发者更容易管理和解耦对象之间的依赖，使代码变得更加简单。对象之间不再关注依赖，也不需要知道依赖类的位置。如此一来，开发的类更易于测试 尤其是当开发者的依赖是接口或者抽象类的情况时，开发者可以轻易地在单元测试中mock对象。</p>\n<p>依赖注入主要使用两种方式，一种是<a href=\"#beans-constructor-injection\">基于构造函数的注入</a>，另一种的<a href=\"#beans-setter-injection\">基于Setter方法的依赖注入</a>。</p>\n<p><a id=\"beans-constructor-injection\"></a></p>\n<h5><a href=\"#beans-constructor-injection\"></a>基于构造函数的依赖注入</h5>\n<p>基于构造函数的依赖注入是由IoC容器来调用类的构造函数，构造函数的参数代表这个Bean所依赖的对象。构造函数的依赖注入与调用带参数的静态工厂方法基本一样。 调用具有特定参数的静态工厂方法来构造bean几乎是等效的，本讨论同样处理构造函数和静态工厂方法的参数。下面的例子展示了一个通过构造函数来实现依赖注入的类。:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SimpleMovieLister</span> </span>{\n\n    <span class=\"hljs-comment\">// the SimpleMovieLister has a dependency on a MovieFinder</span>\n    <span class=\"hljs-keyword\">private</span> MovieFinder movieFinder;\n\n    <span class=\"hljs-comment\">// a constructor so that the Spring container can inject a MovieFinder</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">SimpleMovieLister</span><span class=\"hljs-params\">(MovieFinder movieFinder)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.movieFinder = movieFinder;\n    }\n\n    <span class=\"hljs-comment\">// business logic that actually uses the injected MovieFinder is omitted...</span>\n}\n</code></pre>\n<p>kotlin:</p>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-comment\">// a constructor so that the Spring container can inject a MovieFinder</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SimpleMovieLister</span></span>(<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> movieFinder: MovieFinder) {\n    <span class=\"hljs-comment\">// business logic that actually uses the injected MovieFinder is omitted...</span>\n}\n</code></pre>\n<p>请注意，这个类没有什么特别之处。 它是一个POJO，它不依赖于容器特定的接口，基类或注解。</p>\n<p><a id=\"beans-factory-ctor-arguments-resolution\"></a></p>\n<h6><a href=\"#beans-factory-ctor-arguments-resolution\"></a>解析构造器参数</h6>\n<p>构造函数的参数解析是通过参数的类型来匹配的。如果在Bean的构造函数参数不存在歧义，那么构造器参数的顺序也就是就是这些参数实例化以及装载的顺序。参考如下代码：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> x.y;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ThingOne</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ThingOne</span><span class=\"hljs-params\">(ThingTwo thingTwo, ThingThree thingThree)</span> </span>{\n        <span class=\"hljs-comment\">// ...</span>\n    }\n}\n</code></pre>\n<p>kotlin:</p>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-keyword\">package</span> x.y\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ThingOne</span></span>(thingTwo: ThingTwo, thingThree: ThingThree)\n</code></pre>\n<p>假设<code>ThingTwo</code>和<code>ThingThree</code>类与继承无关，也没有什么歧义。下面的配置完全可以工作正常。开发者无需再到<code>&lt;constructor-arg/&gt;</code>元素中指定构造函数参数的index或type</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"beanOne\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"x.y.ThingOne\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"thingTwo\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"thingThree\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"beanTwo\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"x.y.ThingTwo\"</span>/&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"beanThree\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"x.y.ThingThree\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<p>当引用另一个bean时，如果类型是已知的，匹配就会工作正常（与前面的示例一样）。当使用简单类型的时候（例如<code>&lt;value&gt;true&lt;/value&gt;</code>）， Spring IoC容器无法判断值的类型，所以也是无法匹配的，考虑代码：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> examples;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ExampleBean</span> </span>{\n\n    <span class=\"hljs-comment\">// Number of years to calculate the Ultimate Answer</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> years;\n\n    <span class=\"hljs-comment\">// The Answer to Life, the Universe, and Everything</span>\n    <span class=\"hljs-keyword\">private</span> String ultimateAnswer;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ExampleBean</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> years, String ultimateAnswer)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.years = years;\n        <span class=\"hljs-keyword\">this</span>.ultimateAnswer = ultimateAnswer;\n    }\n}\n</code></pre>\n<p>kotlin:</p>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-keyword\">package</span> examples\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ExampleBean</span></span>(\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> years: <span class=\"hljs-built_in\">Int</span>, <span class=\"hljs-comment\">// Number of years to calculate the Ultimate Answer</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> ultimateAnswer: String<span class=\"hljs-comment\">// The Answer to Life, the Universe, and Everything</span>\n)\n</code></pre>\n<p>构造函数参数类型匹配</p>\n<p>在前面的场景中，如果使用 type 属性显式指定构造函数参数的类型，则容器可以使用与简单类型的类型匹配。如下例所示：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"exampleBean\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"examples.ExampleBean\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"int\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"7500000\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"java.lang.String\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"42\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>构造函数参数索引</p>\n<p>您可以使用<code>index</code>属性显式指定构造函数参数的索引，如以下示例所示：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"exampleBean\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"examples.ExampleBean\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">index</span>=<span class=\"hljs-string\">\"0\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"7500000\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">index</span>=<span class=\"hljs-string\">\"1\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"42\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>除了解决多个简单值的歧义之外，指定索引还可以解决构造函数具有相同类型的两个参数的歧义。</p>\n<p>index 从0开始。</p>\n<p>构造函数参数名称</p>\n<p>您还可以使用构造函数参数名称消除歧义，如以下示例所示：:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"exampleBean\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"examples.ExampleBean\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"years\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"7500000\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"ultimateAnswer\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"42\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>需要注意的是，解析这个配置的代码必须启用了调试标记来编译，这样Spring才可以从构造函数查找参数名称。开发者也可以使用<a href=\"https://download.oracle.com/javase/6/docs/api/java/beans/ConstructorProperties.html\">@ConstructorProperties</a>注解来显式声明构造函数的名称。 例如下面代码:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> examples;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ExampleBean</span> </span>{\n\n    <span class=\"hljs-comment\">// Fields omitted</span>\n\n    <span class=\"hljs-meta\">@ConstructorProperties</span>({<span class=\"hljs-string\">\"years\"</span>, <span class=\"hljs-string\">\"ultimateAnswer\"</span>})\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ExampleBean</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> years, String ultimateAnswer)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.years = years;\n        <span class=\"hljs-keyword\">this</span>.ultimateAnswer = ultimateAnswer;\n    }\n}\n</code></pre>\n<p>kotlin:</p>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-keyword\">package</span> examples\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ExampleBean</span></span>\n<span class=\"hljs-meta\">@ConstructorProperties(<span class=\"hljs-meta-string\">\"years\"</span>, <span class=\"hljs-meta-string\">\"ultimateAnswer\"</span>)</span>\n<span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-keyword\">val</span> years: <span class=\"hljs-built_in\">Int</span>, <span class=\"hljs-keyword\">val</span> ultimateAnswer: String)\n</code></pre>\n<p><a id=\"beans-setter-injection\"></a></p>\n<h5><a href=\"#beans-setter-injection\"></a>基于setter方法的依赖注入</h5>\n<p>基于setter函数的依赖注入是让容器调用拥有Bean的无参构造函数，或者<code>无参静态工厂方法</code>，然后再来调用setter方法来实现依赖注入。</p>\n<p>下面的例子展示了使用setter方法进行的依赖注入的过程。其中类对象只是简单的POJO，它不依赖于容器特定的接口，基类或注解。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SimpleMovieLister</span> </span>{\n\n    <span class=\"hljs-comment\">// the SimpleMovieLister has a dependency on the MovieFinder</span>\n    <span class=\"hljs-keyword\">private</span> MovieFinder movieFinder;\n\n    <span class=\"hljs-comment\">// a setter method so that the Spring container can inject a MovieFinder</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setMovieFinder</span><span class=\"hljs-params\">(MovieFinder movieFinder)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.movieFinder = movieFinder;\n    }\n\n    <span class=\"hljs-comment\">// business logic that actually uses the injected MovieFinder is omitted...</span>\n}\n</code></pre>\n<p>kotlin:</p>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SimpleMovieLister</span> </span>{\n\n    <span class=\"hljs-comment\">// a late-initialized property so that the Spring container can inject a MovieFinder</span>\n    <span class=\"hljs-keyword\">lateinit</span> <span class=\"hljs-keyword\">var</span> movieFinder: MovieFinder\n\n    <span class=\"hljs-comment\">// business logic that actually uses the injected MovieFinder is omitted...</span>\n}\n</code></pre>\n<p><code>ApplicationContext</code>所管理Bean同时支持基于构造函数和基于setter方法的依赖注入，同时也支持使用setter方法在通过构造函数注入依赖之后再次注入依赖。 开发者在<code>BeanDefinition</code>中可以使用<code>PropertyEditor</code>实例来自由选择注入方式。然而，大多数的开发者并不直接使用这些类，而是更喜欢使用XML配置来进行bean定义， 或者基于注解的组件（例如使用 <code>@Component</code>,<code>@Controller</code>等），或者在配置了<code>@Configuration</code>的类上面使用<code>@Bean</code>的方法。 然后，这些源在内部转换为 <code>BeanDefinition</code>的实例，并用于加载整个Spring IoC容器实例。</p>\n<p>如何选择基于构造器和基于setter方法?</p>\n<p>因为开发者可以混用两种依赖注入方式，两种方式用于处理不同的情况：必要的依赖通常通过构造函数注入，而可选的依赖则通过setter方法注入。其中，在setter方法上添加<a href=\"#beans-required-annotation\">@Required</a> 注解可用于构造必要的依赖。但是，最好使用带有参数验证的构造函数注入。</p>\n<p>Spring团队推荐使用基于构造函数的注入，因为这种方式会促使开发者将组件开发成不可变对象并且确保注入的依赖不为<code>null</code>。另外，基于构造函数的注入的组件被客户端调用的时候也已经是完全构造好的 。当然，从另一方面来说，过多的构造函数参数也是非常糟糕的代码方式，这种方式说明类附带了太多的功能，最好重构将不同职能分离。</p>\n<p>基于setter的注入只用于可选的依赖，但是也最好配置一些合理的默认值。否则，只能对代码的依赖进行非null值检查了。基于setter方法的注入有一个便利之处是：对象可以重新配置和重新注入。 因此，使用setter注入管理 <a href=\"https://github.com/DocsHome/spring-docs/blob/master/pages/integration/integration.md#jmx\">JMX MBeans</a> 是很方便的</p>\n<p>依赖注入的两种风格适合大多数的情况，但是在使用第三方库的时候，开发者可能并没有源码，那么就只能使用基于构造函数的依赖注入了。</p>\n<p><a id=\"beans-dependency-resolution\"></a></p>\n<h5><a href=\"#beans-dependency-resolution\"></a>决定依赖的过程</h5>\n<p>容器解析Bean的过程如下:</p>\n<ul>\n<li>\n<p>创建并根据描述的元数据来实例化<code>ApplicationContext</code>，元数据配置可以是XML文件、Java代码或者注解。</p>\n</li>\n<li>\n<p>每一个Bean的依赖都通过构造函数参数或属性，或者静态工厂方法的参数等等来表示。这些依赖会在Bean创建的时候装载和注入</p>\n</li>\n<li>\n<p>每一个属性或者构造函数的参数都是真实定义的值或者引用容器其他的Bean.</p>\n</li>\n<li>\n<p>每一个属性或者构造参数可以根据指定的类型转换为所需的类型。Spring也可以将String转成默认的Java内置类型。例如<code>int</code>, <code>long</code>, <code>String</code>, <code>boolean</code>等 。</p>\n</li>\n</ul>\n<p>Spring容器会在容器创建的时候针对每一个Bean进行校验。但是Bean的属性在Bean没有真正创建之前是不会进行配置的，单例类型的Bean是容器创建的时候配置成预实例状态的。 <a href=\"#beans-factory-scopes\">Bean的作用域</a>后面再说，其他的Bean都只有在请求的时候，才会创建，显然创建Bean对象会有一个依赖顺序图，这个图表示Bean之间的依赖关系。 容器根据此来决定创建和配置Bean的顺序。</p>\n<p>循环依赖</p>\n<p>如果开发者主要使用基于构造函数的依赖注入，那么很有可能出现循环依赖的情况。</p>\n<p>例如：类A在构造函数中依赖于类B的实例，而类B的构造函数又依赖类A的实例。如果这样配置类A和类B相互注入的话，Spring IoC容器会发现这个运行时的循环依赖， 并且抛出<code>BeanCurrentlyInCreationException</code>。</p>\n<p>开发者可以选择setter方法来配置依赖注入，这样就不会出现循环依赖的情况。或者根本就不使用基于构造函数的依赖注入，而仅仅使用基于setter方法的依赖注入。 换言之，但是开发者可以将循环依赖配置为基于Setter方法的依赖注入（尽管不推荐这样做）</p>\n<p>不像典型的例子（没有循环依赖的情况），bean A和bean B之间的循环依赖关系在完全初始化之前就已经将其中一个bean注入到另一个中了（典型的鸡和鸡蛋的故事）</p>\n<p>你可以信任Spring做正确的事。它在容器加载时检测配置问题，例如对不存在的bean和循环依赖的引用。 当实际创建bean时，Spring会尽可能晚地设置属性并解析依赖项。这也意味着Spring容器加载正确后会在bean注入依赖出错的时候抛出异常。例如，bean抛出缺少属性或者属性不合法的异常 ，这种延迟的解析也是<code>ApplicationContext</code> 的实现会令单例Bean处于预实例化状态的原因。这样，通过<code>ApplicationContext</code>创建bean，可以在真正使用bean之前消耗一些内存代价而发现配置的问题 。开发者也可以覆盖默认的行为让单例bean延迟加载，而不总是处于预实例化状态。</p>\n<p>如果不存在循环依赖的话，bean所引用的依赖会预先全部构造。举例来说，如果bean A依赖于bean B，那么Spring IoC容器会先配置bean B，然后调用bean A的setter方法来构造bean A。 换言之，bean先会实例化，然后再注入依赖，最后才是相关生命周期方法的调用（就像配置文件的<a href=\"#beans-factory-lifecycle-initializingbean\">初始化方法</a> 或者<a href=\"#beans-factory-lifecycle-initializingbean\">InitializingBean的回调函数</a>那样）。</p>\n<p><a id=\"beans-some-examples\"></a></p>\n<h5><a href=\"#beans-some-examples\"></a>依赖注入的例子</h5>\n<p>下面的例子使用基于XML的元数据配置，然后使用setter方式进行依赖注入。下面是Spring中使用XML文件声明bean定义的片段：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"exampleBean\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"examples.ExampleBean\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- setter injection using the nested ref element --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"beanOne\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">\"anotherExampleBean\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- setter injection using the neater ref attribute --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"beanTwo\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"yetAnotherBean\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"integerProperty\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"1\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"anotherExampleBean\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"examples.AnotherBean\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"yetAnotherBean\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"examples.YetAnotherBean\"</span>/&gt;</span>\n</code></pre>\n<p>以下示例显示了相应的 <code>ExampleBean</code>类：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ExampleBean</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> AnotherBean beanOne;\n\n    <span class=\"hljs-keyword\">private</span> YetAnotherBean beanTwo;\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> i;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setBeanOne</span><span class=\"hljs-params\">(AnotherBean beanOne)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.beanOne = beanOne;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setBeanTwo</span><span class=\"hljs-params\">(YetAnotherBean beanTwo)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.beanTwo = beanTwo;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setIntegerProperty</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.i = i;\n    }\n}\n</code></pre>\n<p>kotlin:</p>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ExampleBean</span> </span>{\n    <span class=\"hljs-keyword\">lateinit</span> <span class=\"hljs-keyword\">var</span> beanOne: AnotherBean\n    <span class=\"hljs-keyword\">lateinit</span> <span class=\"hljs-keyword\">var</span> beanTwo: YetAnotherBean\n    <span class=\"hljs-keyword\">var</span> i: <span class=\"hljs-built_in\">Int</span> = <span class=\"hljs-number\">0</span>\n}\n</code></pre>\n<p>在前面的示例中，setter被声明为与XML文件中指定的属性匹配。以下示例使用基于构造函数的DI：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"exampleBean\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"examples.ExampleBean\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- constructor injection using the nested ref element --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">\"anotherExampleBean\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">constructor-arg</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- constructor injection using the neater ref attribute --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"yetAnotherBean\"</span>/&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"int\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"1\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"anotherExampleBean\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"examples.AnotherBean\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"yetAnotherBean\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"examples.YetAnotherBean\"</span>/&gt;</span>\n</code></pre>\n<p>以下示例显示了相应的<code>ExampleBean</code>类：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ExampleBean</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> AnotherBean beanOne;\n\n    <span class=\"hljs-keyword\">private</span> YetAnotherBean beanTwo;\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> i;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ExampleBean</span><span class=\"hljs-params\">(\n        AnotherBean anotherBean, YetAnotherBean yetAnotherBean, <span class=\"hljs-keyword\">int</span> i)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.beanOne = anotherBean;\n        <span class=\"hljs-keyword\">this</span>.beanTwo = yetAnotherBean;\n        <span class=\"hljs-keyword\">this</span>.i = i;\n    }\n}\n</code></pre>\n<p>kotlin:</p>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ExampleBean</span></span>(\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> beanOne: AnotherBean,\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> beanTwo: YetAnotherBean,\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> i: <span class=\"hljs-built_in\">Int</span>)\n</code></pre>\n<p>bean定义中指定的构造函数参数用作 <code>ExampleBean</code>的构造函数的参数。</p>\n<p>现在考虑这个示例的变体，其中，不使用构造函数，而是告诉Spring调用静态工厂方法来返回对象的实例：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"exampleBean\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"examples.ExampleBean\"</span> <span class=\"hljs-attr\">factory-method</span>=<span class=\"hljs-string\">\"createInstance\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"anotherExampleBean\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"yetAnotherBean\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"1\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"anotherExampleBean\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"examples.AnotherBean\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"yetAnotherBean\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"examples.YetAnotherBean\"</span>/&gt;</span>\n</code></pre>\n<p>以下示例显示了相应的<code>ExampleBean</code>类：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ExampleBean</span> </span>{\n\n    <span class=\"hljs-comment\">// a private constructor</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-title\">ExampleBean</span><span class=\"hljs-params\">(...)</span> </span>{\n        ...\n    }\n\n    <span class=\"hljs-comment\">// a static factory method; the arguments to this method can be</span>\n    <span class=\"hljs-comment\">// considered the dependencies of the bean that is returned,</span>\n    <span class=\"hljs-comment\">// regardless of how those arguments are actually used.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> ExampleBean <span class=\"hljs-title\">createInstance</span> <span class=\"hljs-params\">(\n        AnotherBean anotherBean, YetAnotherBean yetAnotherBean, <span class=\"hljs-keyword\">int</span> i)</span> </span>{\n\n        ExampleBean eb = <span class=\"hljs-keyword\">new</span> ExampleBean (...);\n        <span class=\"hljs-comment\">// some other operations...</span>\n        <span class=\"hljs-keyword\">return</span> eb;\n    }\n}\n</code></pre>\n<p>kotlin:</p>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ExampleBean</span> <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">constructor</span></span>() {\n    <span class=\"hljs-keyword\">companion</span> <span class=\"hljs-keyword\">object</span> {\n        <span class=\"hljs-comment\">// a static factory method; the arguments to this method can be</span>\n        <span class=\"hljs-comment\">// considered the dependencies of the bean that is returned,</span>\n        <span class=\"hljs-comment\">// regardless of how those arguments are actually used.</span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">createInstance</span><span class=\"hljs-params\">(anotherBean: <span class=\"hljs-type\">AnotherBean</span>, yetAnotherBean: <span class=\"hljs-type\">YetAnotherBean</span>, i: <span class=\"hljs-type\">Int</span>)</span></span>: ExampleBean {\n            <span class=\"hljs-keyword\">val</span> eb = ExampleBean (...)\n            <span class=\"hljs-comment\">// some other operations...</span>\n            <span class=\"hljs-keyword\">return</span> eb\n        }\n    }\n}\n</code></pre>\n<p><code>静态工厂方法</code>的参数由<code>&lt;constructor-arg/&gt;</code>元素提供，与实际使用的构造函数完全相同。工厂方法返回类的类型不必与包含<code>静态工厂方法</code> 的类完全相同， 尽管在本例中是这样。实例（非静态）工厂方法的使用方式也是相似的（除了使用<code>factory-bean</code>属性而不是<code>class</code>属性。因此此处不在展开讨论。</p>\n<p><a id=\"beans-factory-properties-detailed\"></a></p>\n<h4><a href=\"#beans-factory-properties-detailed\"></a>1.4.2. 依赖和配置的细节</h4>\n<p><a href=\"#beans-factory-collaborators\">如上一节所述</a>，您可以将bean的属性和构造函数参数定义为对其他bean的引用，或者作为其内联定义的值。Spring可以允许您在基于XML的配置元数据（定义Bean）中使用子元素<code>&lt;property/&gt;</code> and <code>&lt;constructor-arg/&gt;</code> 来达到这种目的。</p>\n<p><a id=\"beans-value-element\"></a></p>\n<h5><a href=\"#beans-value-element\"></a>直接值（基本类型，String等等）</h5>\n<p><code>&lt;property/&gt;</code> 元素的<code>value</code> 属性将属性或构造函数参数指定为人类可读的字符串表示形式， Spring的<a href=\"#core-convert-ConversionService-API\">conversion service</a>用于将这些值从<code>String</code> 转换为属性或参数的实际类型。 以下示例显示了要设置的各种值：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"myDataSource\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.apache.commons.dbcp.BasicDataSource\"</span> <span class=\"hljs-attr\">destroy-method</span>=<span class=\"hljs-string\">\"close\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- results in a setDriverClassName(String) call --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"driverClassName\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"com.mysql.jdbc.Driver\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"url\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"jdbc:mysql://localhost:3306/mydb\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"username\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"root\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"masterkaoli\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>以下示例使用<a href=\"#beans-p-namespace\">p命名空间</a>进行更简洁的XML配置：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n    <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"hljs-attr\">xmlns:p</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/p\"</span>\n    <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\n    https://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"myDataSource\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.apache.commons.dbcp.BasicDataSource\"</span>\n        <span class=\"hljs-attr\">destroy-method</span>=<span class=\"hljs-string\">\"close\"</span>\n        <span class=\"hljs-attr\">p:driverClassName</span>=<span class=\"hljs-string\">\"com.mysql.jdbc.Driver\"</span>\n        <span class=\"hljs-attr\">p:url</span>=<span class=\"hljs-string\">\"jdbc:mysql://localhost:3306/mydb\"</span>\n        <span class=\"hljs-attr\">p:username</span>=<span class=\"hljs-string\">\"root\"</span>\n        <span class=\"hljs-attr\">p:password</span>=<span class=\"hljs-string\">\"masterkaoli\"</span>/&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<p>前面的XML更简洁。 但是因为属性的类型是在运行时确定的，而非设计时确定的。所有有可能在运行时发现拼写错误。，除非您在创建bean定义时使用支持自动属性完成的IDE（例如<a href=\"http://www.jetbrains.com/idea/\">IntelliJ IDEA</a> or the <a href=\"https://spring.io/tools/sts\">Spring Tool Suite</a>）。 所以，强烈建议使用此类IDE帮助。</p>\n<p>你也可以配置一个<code>java.util.Properties</code> 的实例，如下：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"mappings\"</span>\n    <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.context.support.PropertySourcesPlaceholderConfigurer\"</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- typed as a java.util.Properties --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"properties\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>\n            jdbc.driver.className=com.mysql.jdbc.Driver\n            jdbc.url=jdbc:mysql://localhost:3306/mydb\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>Spring的容器会将<code>&lt;value/&gt;</code>里面的文本通过JavaBean的<code>PropertyEditor</code> 机制转换成<code>java.util.Properties</code> 实例， 这种嵌套<code>&lt;value/&gt;</code>元素的快捷方式也是Spring团队推荐使用的。</p>\n<p><a id=\"beans-idref-element\"></a></p>\n<h6><a href=\"#beans-idref-element\"></a><code>idref</code> 元素</h6>\n<p><code>idref</code> 元素只是一种防错方法，可以将容器中另一个bean的<code>id</code>（字符串值 - 而不是引用）传递给<code>&lt;constructor-arg/&gt;</code>或<code>&lt;property/&gt;</code>元素：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"theTargetBean\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"...\"</span>/&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"theClientBean\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"...\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"targetName\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">idref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">\"theTargetBean\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>前面的bean定义代码段运行时与以下代码段完全等效：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"theTargetBean\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"...\"</span> /&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"client\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"...\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"targetName\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"theTargetBean\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>Spring团队更推荐第一种方式，因为使用了<code>idref</code> 标签，它会让容器在部署阶段就对bean进行校验，以确保bean一定存在。而使用第二种方式的话，是没有任何校验的。 只有实际上引用了<code>client</code> bean的<code>targetName</code>属性，不对其值进行校验。在实例化client的时候才会被发现。如果client是<a href=\"#beans-factory-scopes\">prototype</a>类型的Bean的话，那么类似拼写之类的错误会在容器部署以后很久才能发现。</p>\n<p><code>idref</code>元素的<code>local</code>属性在Spring 4.0以后的xsd中已经不再支持了，而是使用了bean引用。如果更新了版本的话，只要将<code>idref local</code>引用都转换成<code>idref bean</code> 即可。</p>\n<p>在<code>ProxyFactoryBean</code>定义中，元素所携带的值在<a href=\"#aop-pfb-1\">AOP拦截器a&gt;的配置中很常见（至少在Spring 2.0之前的版本是这样）。在指定拦截器名称时使用<code>&lt;idref/&gt;</code> 元素可防止拦截器漏掉id或拼写错误。</a></p>\n<p><a id=\"beans-ref-element\"></a></p>\n<h5><a href=\"#aop-pfb-1\"></a><a href=\"#beans-ref-element\"></a>引用其他的Bean（装配）</h5>\n<p><code>ref</code> 元素是<code>&lt;constructor-arg/&gt;</code> 或 or <code>&lt;property/&gt;</code>定义元素中的最后一个元素。 你可以通过这个标签配置一个bean来引用另一个bean。当需要引用一个bean的时候，被引用的bean会先实例化，然后配置属性，也就是引用的依赖。如果该bean是单例bean的话 ，那么该bean会早由容器初始化。最终会引用另一个对象的所有引用，bean的范围以及校验取决于你是否有通过<code>bean</code>, <code>local,</code> or <code>parent</code> 这些属性来指定对象的id或者name属性。</p>\n<p>通过指定 <code>bean</code>属性中的<code>&lt;ref/&gt;</code>元素来指定依赖是最常见的一种方式，可以引用容器或者父容器中的bean，不在同一个XML文件定义也可以引用。 其中<code>bean</code> 属性中的值可以和其他引用<code>bean</code> 中的<code>id</code>属性一致，或者和其中的某个<code>name</code> 属性一致，以下示例显示如何使用ref元素：：</p>\n<pre><code>&lt;ref bean=&quot;someBean&quot;/&gt;\n</code></pre>\n<p>通过指定bean的<code>parent</code>属性可以创建一个引用到当前容器的父容器之中。<code>parent</code>属性的值可以与目标bean的<code>id</code>属性一致，或者和目标bean的<code>name</code>属性中的某个一致，目标bean必须是当前引用目标bean容器的父容器 。开发者一般只有在存在层次化容器，并且希望通过代理来包裹父容器中一个存在的bean的时候才会用到这个属性。 以下一对列表显示了如何使用父属性:</p>\n<pre><code class=\"language-xml\">&lt;!-- in the parent context --&gt;\n&lt;bean id=\"accountService\" class=\"com.something.SimpleAccountService\"&gt;\n    &lt;!-- insert dependencies as required as here --&gt;\n&lt;/bean&gt;\n\n&lt;!-- in the child (descendant) context --&gt;\n&lt;bean id=\"accountService\" &lt;!-- bean name is the same as the parent bean --&gt;\n    class=\"org.springframework.aop.framework.ProxyFactoryBean\"&gt;\n    &lt;property name=\"target\"&gt;\n        &lt;ref parent=\"accountService\"/&gt; &lt;!-- notice how we refer to the parent bean --&gt;\n    &lt;/property&gt;\n    &lt;!-- insert other configuration and dependencies as required here --&gt;\n&lt;/bean&gt;\n</code></pre>\n<p>与idref标签一样，<code>ref</code>元素中的<code>local</code> 标签在xsd 4.0，以后已经不再支持了，开发者可以通过将已存在的<code>ref local</code>改为<code>ref bean</code> 来完成Spring版本升级。</p>\n<p><a id=\"beans-inner-beans\"></a></p>\n<h5><a href=\"#beans-inner-beans\"></a>内部bean</h5>\n<p>定义在<code>&lt;bean/&gt;</code>元素的<code>&lt;property/&gt;</code>或者<code>&lt;constructor-arg/&gt;</code> 元素之内的bean叫做内部bean，如下例所示：:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"outer\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"...\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- instead of using a reference to a target bean, simply define the target bean inline --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"target\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.example.Person\"</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- this is the inner bean --&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"name\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"Fiona Apple\"</span>/&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"age\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"25\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>内部bean定义不需要定义的ID或名称。如果指定，则容器不使用此类值作为标识符。容器还会在创建时忽略<code>scope</code> 标签，因为内部bean始终是匿名的，并且始终使用外部bean创建。 开发者是无法将内部bean注入到外部bean以外的其他bean中的。</p>\n<p>作为一个极端情况，可以从自定义范围接收销毁回调 ， 例如：请求范围的内部bean包含了单例bean，那么内部bean实例会绑定到包含的bean，而包含的bean允许访问request的scope生命周期。 这种场景并不常见，内部bean通常只是供给它的外部bean使用。</p>\n<p><a id=\"beans-collection-elements\"></a></p>\n<h5><a href=\"#beans-collection-elements\"></a>集合</h5>\n<p>在<code>&lt;list/&gt;</code>, <code>&lt;set/&gt;</code>, <code>&lt;map/&gt;</code>, 和 <code>&lt;props/&gt;</code>元素中，您可以分别配置Java集合类型 <code>List</code>, <code>Set</code>, <code>Map</code>, and <code>Properties</code>的属性和参数。 以下示例显示了如何使用它们:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"moreComplexObject\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"example.ComplexObject\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- results in a setAdminEmails(java.util.Properties) call --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"adminEmails\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">props</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">prop</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"administrator\"</span>&gt;</span>administrator@example.org<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">prop</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">prop</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"support\"</span>&gt;</span>support@example.org<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">prop</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">prop</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"development\"</span>&gt;</span>development@example.org<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">prop</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">props</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- results in a setSomeList(java.util.List) call --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"someList\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">list</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>a list element followed by a reference<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">\"myDataSource\"</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">list</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- results in a setSomeMap(java.util.Map) call --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"someMap\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">map</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"an entry\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"just some string\"</span>/&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span> =<span class=\"hljs-string\">\"a ref\"</span> <span class=\"hljs-attr\">value-ref</span>=<span class=\"hljs-string\">\"myDataSource\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">map</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- results in a setSomeSet(java.util.Set) call --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"someSet\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">set</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>just some string<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">\"myDataSource\"</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">set</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>当然，map的key或者value，或者集合的value都可以配置为下列元素之一:</p>\n<pre><code>bean | ref | idref | list | set | map | props | value | null\n</code></pre>\n<p><a id=\"beans-collection-elements-merging\"></a></p>\n<h6><a href=\"#beans-collection-elements-merging\"></a>集合的合并</h6>\n<p>Spring的容器也支持集合合并，开发者可以定义父样式的<code>&lt;list/&gt;</code>, <code>&lt;map/&gt;</code>, <code>&lt;set/&gt;</code> 或 <code>&lt;props/&gt;</code>元素， 同时有子样式的<code>&lt;list/&gt;</code>, <code>&lt;map/&gt;</code>, <code>&lt;set/&gt;</code> 或 <code>&lt;props/&gt;</code>元素。也就是说，子集合的值是父元素和子元素集合的合并值。</p>\n<p>有关合并的这一节讨论父子bean机制，不熟悉父和子bean定义的读者可能希望在继续之前阅读<a href=\"#beans-child-bean-definitions\">相关部分</a>。</p>\n<p>以下示例演示了集合合并：:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"parent\"</span> <span class=\"hljs-attr\">abstract</span>=<span class=\"hljs-string\">\"true\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"example.ComplexObject\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"adminEmails\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">props</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">prop</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"administrator\"</span>&gt;</span>administrator@example.com<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">prop</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">prop</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"support\"</span>&gt;</span>support@example.com<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">prop</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">props</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"child\"</span> <span class=\"hljs-attr\">parent</span>=<span class=\"hljs-string\">\"parent\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"adminEmails\"</span>&gt;</span>\n            <span class=\"hljs-comment\">&lt;!-- the merge is specified on the child collection definition --&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">props</span> <span class=\"hljs-attr\">merge</span>=<span class=\"hljs-string\">\"true\"</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">prop</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"sales\"</span>&gt;</span>sales@example.com<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">prop</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">prop</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"support\"</span>&gt;</span>support@example.co.uk<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">prop</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">props</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<p>请注意，在<code>child</code> bean 定义的<code>adminEmails</code>中的<code>&lt;props/&gt;</code>使用<code>merge=true</code> 属性。 当容器解析并实例化<code>child</code> bean时，生成的实例有一个<code>adminEmails</code>属性集合， 其实例中包含的<code>adminEmails</code>集合就是child的<code>adminEmails</code>以及parent的<code>adminEmails</code>集合。以下清单显示了结果： :</p>\n<pre><code>administrator=administrator@example.com\nsales=sales@example.com\nsupport=support@example.co.uk\n</code></pre>\n<p>子<code>属性</code>集合的值集继承父<code>&lt;props/&gt;</code>的所有属性元素，子值的<code>支持</code>值覆盖父集合中的值。</p>\n<p>这个合并的行为和<code>&lt;list/&gt;</code>, <code>&lt;map/&gt;</code>, 和 <code>&lt;set/&gt;</code>之类的集合类型的行为是类似的。<code>List</code> 在特定例子中，与List集合类型类似， 有着隐含的 <code>ordered</code>概念。所有的父元素里面的值，是在所有子元素的值之前配置的。但是像<code>Map</code>, <code>Set</code>, 和 <code>Properties</code>的集合类型，是不存在顺序的。</p>\n<p><a id=\"beans-collection-merge-limitations\"></a></p>\n<h6><a href=\"#beans-collection-merge-limitations\"></a>集合合并的限制</h6>\n<p>您不能合并不同类型的集合（例如要将<code>Map</code> 和<code>List</code>合并是不可能的）。如果开发者硬要这样做就会抛出异常， <code>merge</code>的属性是必须特指到更低级或者继承的子节点定义上， 特指merge属性到父集合的定义上是冗余的，而且在合并上也没有任何效果。</p>\n<p><a id=\"beans-collection-elements-strongly-typed\"></a></p>\n<h6><a href=\"#beans-collection-elements-strongly-typed\"></a>强类型的集合</h6>\n<p>在Java 5以后，开发者可以使用强类型的集合了。也就是，开发者可以声明<code>Collection</code>类型，然后这个集合只包含<code>String</code>元素（举例来说）。 如果开发者通过Spring来注入强类型的Collection到bean中，开发者就可以利用Spring的类型转换支持来做到 以下Java类和bean定义显示了如何执行此操作:</p>\n<pre><code class=\"language-xml\">public class SomeClass {\n\n    private Map<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String,</span> <span class=\"hljs-attr\">Float</span>&gt;</span> accounts;\n\n    public void setAccounts(Map<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String,</span> <span class=\"hljs-attr\">Float</span>&gt;</span> accounts) {\n        this.accounts = accounts;\n    }\n}\n</code></pre>\n<p>kotlin:</p>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SomeClass</span> </span>{\n    <span class=\"hljs-keyword\">lateinit</span> <span class=\"hljs-keyword\">var</span> accounts: Map&lt;String, <span class=\"hljs-built_in\">Float</span>&gt;\n}\n</code></pre>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"something\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"x.y.SomeClass\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"accounts\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">map</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"one\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"9.99\"</span>/&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"two\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"2.75\"</span>/&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"six\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"3.99\"</span>/&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">map</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<p>当<code>something</code>的属性<code>accounts</code>准备注入的时候，accounts的泛型信息Map<code>Map&lt;String, Float&gt;</code> 就会通过反射拿到。 这样，Spring的类型转换系统能够识别不同的类型，如上面的例子<code>Float</code>然后会将字符串的值<code>9.99, 2.75</code>, 和<code>3.99</code>转换成对应的<code>Float</code>类型。</p>\n<p><a id=\"beans-null-element\"></a></p>\n<h5><a href=\"#beans-null-element\"></a>Null and 空字符串</h5>\n<p><code>Strings</code>将属性的空参数视为空字符串。下面基于XML的元数据配置就会将<code>email</code> 属性配置为String的值。</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ExampleBean\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"email\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>上面的示例等效于以下Java代码:</p>\n<pre><code class=\"language-java\">exampleBean.setEmail(<span class=\"hljs-string\">\"\"</span>);\n</code></pre>\n<p>kotlin:</p>\n<pre><code class=\"language-kotlin\">exampleBean.email = <span class=\"hljs-string\">\"\"</span>\n</code></pre>\n<p><code>&lt;null/&gt;</code>将被处理为null值。以下清单显示了一个示例:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ExampleBean\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"email\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">null</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>上述配置等同于以下Java代码：</p>\n<pre><code class=\"language-java\">exampleBean.setEmail(<span class=\"hljs-keyword\">null</span>);\n</code></pre>\n<p>kotlin:</p>\n<pre><code class=\"language-kotlin\">exampleBean.email = <span class=\"hljs-literal\">null</span>\n</code></pre>\n<p><a id=\"beans-p-namespace\"></a></p>\n<h5><a href=\"#beans-p-namespace\"></a>使用p命名空间简化XML配置</h5>\n<p>p命名空间让开发者可以使用<code>bean</code>的属性，而不必使用嵌套的<code>&lt;property/&gt;</code>元素。</p>\n<p>Spring是支持基于XML的格式化<a href=\"#xsd-schemas\">命名空间</a>扩展的。本节讨论的<code>beans</code> 配置都是基于XML的，p命名空间是定义在Spring Core中的（不是在XSD文件）。</p>\n<p>以下示例显示了两个XML片段（第一个使用标准XML格式，第二个使用p命名空间），它们解析为相同的结果：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n    <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"hljs-attr\">xmlns:p</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/p\"</span>\n    <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"classic\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.example.ExampleBean\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"email\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"someone@somewhere.com\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"p-namespace\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.example.ExampleBean\"</span>\n        <span class=\"hljs-attr\">p:email</span>=<span class=\"hljs-string\">\"someone@somewhere.com\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<p>上面的例子在bean中定义了<code>email</code>的属性。这种定义告知Spring这是一个属性声明。如前面所描述的，p命名空间并没有标准的定义模式，所以开发者可以将属性的名称配置为依赖名称。</p>\n<p>下一个示例包括另外两个bean定义，它们都引用了另一个bean:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n    <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"hljs-attr\">xmlns:p</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/p\"</span>\n    <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"john-classic\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.example.Person\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"name\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"John Doe\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"spouse\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"jane\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"john-modern\"</span>\n        <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.example.Person\"</span>\n        <span class=\"hljs-attr\">p:name</span>=<span class=\"hljs-string\">\"John Doe\"</span>\n        <span class=\"hljs-attr\">p:spouse-ref</span>=<span class=\"hljs-string\">\"jane\"</span>/&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"jane\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.example.Person\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"name\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"Jane Doe\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<p>此示例不仅包含使用p命名空间的属性值，还使用特殊格式来声明属性引用。第一个bean定义使用<code>&lt;property name=&quot;spouse&quot; ref=&quot;jane&quot;/&gt;</code>来创建从bean <code>john</code>到bean <code>jane</code>的引用， 而第二个bean定义使用<code>p:spouse-ref=&quot;jane&quot;</code>来作为指向bean的引用。在这个例子中 <code>spouse</code>是属性的名字，而<code>-ref</code>部分表名这个依赖不是直接的类型，而是引用另一个bean。</p>\n<p>p命名空间并不如标准XML格式灵活。例如，声明属性的引用可能和一些以<code>Ref</code>结尾的属性相冲突，而标准的XML格式就不会。Spring团队推荐开发者能够和团队商量一下，协商使用哪一种方式，而不要同时使用三种方法。</p>\n<p><a id=\"beans-c-namespace\"></a></p>\n<h5><a href=\"#beans-c-namespace\"></a>使用c命名空间简化XML</h5>\n<p>与 <a href=\"#beans-p-namespace\">p命名空间</a>类似，c命名空间是在Spring 3.1首次引入的，c命名空间允许使用内联的属性来配置构造参数而不必使用<code>constructor-arg</code> 。</p>\n<p>以下示例使用<code>c:</code>命名空间的例子来执行与<a href=\"#beans-constructor-injection\">基于Constructor的依赖注入</a>相同的操作：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n    <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"hljs-attr\">xmlns:c</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/c\"</span>\n    <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"beanTwo\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"x.y.ThingTwo\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"beanThree\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"x.y.ThingThree\"</span>/&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- traditional declaration with optional argument names --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"beanOne\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"x.y.ThingOne\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"thingTwo\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"beanTwo\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"thingThree\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"beanThree\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"email\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"something@somewhere.com\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- c-namespace declaration with argument names --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"beanOne\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"x.y.ThingOne\"</span> <span class=\"hljs-attr\">c:thingTwo-ref</span>=<span class=\"hljs-string\">\"beanTwo\"</span>\n        <span class=\"hljs-attr\">c:thingThree-ref</span>=<span class=\"hljs-string\">\"beanThree\"</span> <span class=\"hljs-attr\">c:email</span>=<span class=\"hljs-string\">\"something@somewhere.com\"</span>/&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<p><code>c:</code>:命名空间使用了和<code>p:</code> :命名空间相类似的方式（使用了<code>-ref</code> 来配置引用).而且,同样的,c命名空间也是定义在Spring Core中的（不是XSD模式)。</p>\n<p>在少数的例子之中,构造函数的参数名字并不可用（通常,如果字节码没有debug信息的编译),你可以使用回调参数的索引，如下面的例子:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"beanOne\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"x.y.ThingOne\"</span> <span class=\"hljs-attr\">c:_0-ref</span>=<span class=\"hljs-string\">\"beanTwo\"</span> <span class=\"hljs-attr\">c:_1-ref</span>=<span class=\"hljs-string\">\"beanThree\"</span>\n    <span class=\"hljs-attr\">c:_2</span>=<span class=\"hljs-string\">\"something@somewhere.com\"</span>/&gt;</span>\n</code></pre>\n<p>由于XML语法，索引表示法需要使用<code>_</code>作为属性名字的前缀，因为XML属性名称不能以数字开头（即使某些IDE允许它）。相应的索引符号也可用于<constructor-arg>元素，但并不常用，因为声明的普通顺序在那里就足够了。</p>\n<p>实际上，<a href=\"#beans-factory-ctor-arguments-resolution\">构造函数解析机制</a>在匹配参数方面非常有效，因此除非您确实需要，否则我们建议在整个配置中使用名称表示法。</p>\n<p><a id=\"beans-compound-property-names\"></a></p>\n<h5><a href=\"#beans-compound-property-names\"></a>组合属性名</h5>\n<p>开发者可以配置混合的属性，只需所有的组件路径（除了最后一个属性名字）不能为<code>null</code>即可。参考如下定义：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"something\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"things.ThingOne\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"fred.bob.sammy\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"123\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p><code>something</code>有 <code>fred</code>的属性，而其中<code>fred</code>属性有<code>bob</code>属性，而<code>bob</code>属性之中有<code>sammy</code>属性，那么最后这个<code>sammy</code>属性会配置为123。 想要上述的配置能够生效，<code>fred</code>属性需要有<code>bob</code>属性而且在<code>fred</code>构造之后不为null即可。</p>\n<p><a id=\"beans-factory-dependson\"></a></p>\n<h4><a href=\"#beans-factory-dependson\"></a>1.4.3. 使用 <code>depends-on</code>属性</h4>\n<p>如果一个bean是另一个bean的依赖，通常这个bean也就是另一个bean的属性之一。多数情况下，开发者可以在配置XML元数据的时候使用<a href=\"#beans-ref-element\"><code>&lt;ref/&gt;</code></a>标签。 然而，有时bean之间的依赖不是直接关联的。例如：需要调用类的静态实例化器来触发依赖，类似数据库驱动注册。<code>depends-on</code>属性可以显式强制初始化一个或多个bean。 以下示例使用depends-on属性表示对单个bean的依赖关系:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"beanOne\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ExampleBean\"</span> <span class=\"hljs-attr\">depends-on</span>=<span class=\"hljs-string\">\"manager\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"manager\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ManagerBean\"</span> /&gt;</span>\n</code></pre>\n<p>如果想要依赖多个bean，可以提供多个名字作为<code>depends-on</code>的值。以逗号、空格或者分号分割:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"beanOne\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ExampleBean\"</span> <span class=\"hljs-attr\">depends-on</span>=<span class=\"hljs-string\">\"manager,accountDao\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"manager\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"manager\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"manager\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ManagerBean\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"accountDao\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"x.y.jdbc.JdbcAccountDao\"</span> /&gt;</span>\n</code></pre>\n<p><code>depends-on</code>属性既可以指定初始化时间依赖性，也可以指定单独的bean，相应的销毁时间的依赖。独立定义了<code>depends-on</code>属性的bean会优先销毁 （相对于<code>depends-on</code>的bean销毁，这样<code>depends-on</code>可以控制销毁的顺序。</p>\n<p><a id=\"beans-factory-lazy-init\"></a></p>\n<h4><a href=\"#beans-factory-lazy-init\"></a>1.4.4. 懒加载Bean</h4>\n<p>默认情况下， <code>ApplicationContext</code> 会在实例化的过程中创建和配置所有的单例<a href=\"#beans-factory-scopes-singleton\">singleton</a> bean。总的来说， 这个预初始化是很不错的。因为这样能及时发现环境上的一些配置错误，而不是系统运行了很久之后才发现。如果这个行为不是迫切需要的，开发者可以通过将Bean标记为延迟加载就能阻止这个预初始化 懒加载bean会通知IoC不要让bean预初始化而是在被引用的时候才会实例化。</p>\n<p>在XML中，此行为由<code>&lt;bean/&gt;</code>元素上的<code>lazy-init</code> 属性控制，如以下示例所示：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"lazy\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.something.ExpensiveToCreateBean\"</span> <span class=\"hljs-attr\">lazy-init</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"not.lazy\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.something.AnotherBean\"</span>/&gt;</span>\n</code></pre>\n<p>当将bean配置为上述XML的时候， <code>ApplicationContext</code>之中的<code>lazy</code> bean是不会随着 <code>ApplicationContext</code>的启动而进入到预初始化状态的。 只有那些非延迟加载的bean是处于预初始化的状态的。</p>\n<p>然而，如果延迟加载的类是作为单例非延迟加载的bean的依赖而存在的话，<code>ApplicationContext</code>仍然会在<code>ApplicationContext</code>启动的时候加载。 因为作为单例bean的依赖，会随着单例bean的实例化而实例化。</p>\n<p>您还可以使用<code>&lt;beans/&gt;</code>元素上的<code>default-lazy-init</code>属性在容器级别控制延迟初始化，以下示例显示：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">default-lazy-init</span>=<span class=\"hljs-string\">\"true\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- no beans will be pre-instantiated... --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<p><a id=\"beans-factory-autowire\"></a></p>\n<h4><a href=\"#beans-factory-autowire\"></a>1.4.5. 自动装配</h4>\n<p>Spring容器可以根据bean之间的依赖关系自动装配，开发者可以让Spring通过<code>ApplicationContext</code>来自动解析这些关联，自动装载有很多优点:</p>\n<ul>\n<li>\n<p>自动装载能够明显的减少指定的属性或者是构造参数。（在本章<a href=\"#beans-child-bean-definitions\">其他地方讨论</a>的其他机制，如bean模板，在这方面也很有价值。）</p>\n</li>\n<li>\n<p>自动装载可以扩展开发者的对象，比如说，如果开发者需要加一个依赖，只需关心如何更改配置即可自动满足依赖关联。这样，自动装载在开发过程中是极其高效的，无需明确选择装载的依赖会使系统更加稳定</p>\n</li>\n</ul>\n<p>使用基于XML的配置元数据（请参阅<a href=\"#beans-factory-collaborators\">依赖注入</a>）时，可以使用<code>&lt;bean/&gt;</code> 元素的<code>autowire</code>属性为bean定义指定autowire模式。 自动装配功能有四种方式。开发者可以指定每个bean的装配方式，这样bean就知道如何加载自己的依赖。下表描述了四种自动装配模式：</p>\n<p>Table 2. 装配模式</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>no</code></td>\n<td>(默认) 不自动装配。Bean引用必须由 <code>ref</code> 元素定义，对于比较大的项目的部署，不建议修改默认的配置 ，因为明确指定协作者可以提供更好的控制和清晰度。在某种程度上，它记录了系统的结构。</td>\n</tr>\n<tr>\n<td><code>byName</code></td>\n<td>按属性名称自动装配。 Spring查找与需要自动装配的属性同名的bean。 例如，如果bean配置为根据名字装配，他包含 的属性名字为<code>master</code>（即，它具有<code>setMaster(..)</code>方法），则Spring会查找名为 <code>master</code> 的bean定义并使用它来设置属性。</td>\n</tr>\n<tr>\n<td><code>byType</code></td>\n<td>如果需要自动装配的属性的类型在容器中只存在一个的话，他允许自动装配。如果存在多个，则抛出致命异常，这表示您不能对该bean使用<code>byType</code>自动装配。 如果没有匹配的bean，则不会发生任何事情（未设置该属性）。</td>\n</tr>\n<tr>\n<td><code>constructor</code></td>\n<td>类似于<code>byType</code>，但应用于构造函数参数。 如果容器中没有一个Bean的类型和构造函数参数类型一致的话，则会引发致命错误。</td>\n</tr>\n</tbody>\n</table>\n<p>通过<code>byType</code>或者<code>constructor</code>的自动装配方式，开发者可以装载数组和强类型集合。在这样的例子中，所有容器中的匹配了指定类型的bean都会自动装配到bean上来完成依赖注入。 开发者可以自动装配key为<code>String</code>.的强类型的 <code>Map</code> 。自动装配的Map值会包含所有的bean实例值来匹配指定的类型，<code>Map</code>的key会包含关联的bean的名字。</p>\n<p><a id=\"beans-autowired-exceptions\"></a></p>\n<h5><a href=\"#beans-autowired-exceptions\"></a>自动装配的局限和缺点</h5>\n<p>自动装配在项目中一致使用时效果最佳。如果一般不使用自动装配，那么开发人员使用它来装配一个或两个bean定义可能会让人感到困惑。</p>\n<p>考虑自动装配的局限和缺点:</p>\n<ul>\n<li>\n<p><code>property</code>和<code>constructor-arg</code>设置中的显式依赖项始终覆盖自动装配。开发者不能自动装配一些简单属性，您不能自动装配简单属性，例如基本类型 ，字符串和类（以及此类简单属性的数组）。这种限制是按设计的。</p>\n</li>\n<li>\n<p>自动装配比显式的配置更容易歧义，尽管上表表明了不同自动配置的特点，Spring也会尽可能避免不必要的装配错误。但是Spring管理的对象关系仍然不如显式配置那样明确。</p>\n</li>\n<li>\n<p>从Spring容器生成文档的工具可能无法有效的提供装配信息。</p>\n</li>\n<li>\n<p>容器中的多个bean定义可能与setter方法或构造函数参数所指定的类型相匹配， 这有利于自动装配。对于arrays, collections, or <code>Map</code>实例来说这不是问题。但是如果是对只有一个依赖项的值是有歧义的话，那么这个项是无法解析的。如果没有唯一的bean，则会抛出异常。</p>\n</li>\n</ul>\n<p>在后面的场景，你可有如下的选择：</p>\n<ul>\n<li>放弃自动装配，改用显式的配置。</li>\n<li>通过将<code>autowire-candidate</code> 属性设置为<code>false</code>，避免对bean定义进行自动装配，<a href=\"#beans-factory-autowire-candidate\">如下一节所述</a>。</li>\n<li>通过将其<code>&lt;bean/&gt;</code> 元素的<code>primary</code>属性设置为 <code>true</code>，将单个bean定义指定为主要候选项。</li>\n<li>使用基于注解的配置实现更细粒度的控制，如<a href=\"#beans-annotation-config\">基于注解的容器配置</a>中所述。</li>\n</ul>\n<p><a id=\"beans-factory-autowire-candidate\"></a></p>\n<h5><a href=\"#beans-factory-autowire-candidate\"></a>将bean从自动装配中排除</h5>\n<p>在每个bean的基础上，您可以从自动装配中排除bean。 在Spring的XML格式中，将<code>&lt;bean/&gt;</code> 元素的<code>autowire-candidate</code> 属性设置为<code>false</code>。 容器使特定的bean定义对自动装配基础结构不可用（包括注解样式配置，如<a href=\"#beans-autowired-annotation\"><code>@Autowired</code></a>）。</p>\n<p><code>autowire-candidate</code> 属性旨在仅影响基于类型的自动装配。 它不会影响名称的显式引用，即使指定的bean未标记为autowire候选，也会解析它。 因此，如果名称匹配，则按名称自动装配会注入bean。</p>\n<p>开发者可以通过模式匹配而不是Bean的名字来限制自动装配的候选者。最上层的<code>&lt;beans/&gt;</code> 元素会在<code>default-autowire-candidates</code> 属性中来配置多种模式。 例如，限制自动装配候选者的名字以<code>Repository</code>结尾，可以配置成<code>*Repository</code>。如果需要配置多种模式，只需要用逗号分隔开即可。 bean定义的<code>autowire-candidate</code>属性的显式值<code>true</code> 或<code>false</code>始终优先。 对于此类bean，模式匹配规则不适用。</p>\n<p>上面的这些技术在配置那些无需自动装配的bean是相当有效的，当然这并不是说这类bean本身无法自动装配其他的bean。而是说这些bean不再作为自动装配的依赖候选者。</p>\n<p><a id=\"beans-factory-method-injection\"></a></p>\n<h4><a href=\"#beans-factory-method-injection\"></a>1.4.6.方法注入</h4>\n<p>在大多数的应用场景下，多数的bean都是<a href=\"#beans-factory-scopes-singleton\">单例</a>的。当这个单例的bean需要和另一个单例的或者非单例的bean协作使用的时候，开发者只需要配置依赖bean为这个bean的属性即可。 但是有时会因为bean具有不同的生命周期而产生问题。假设单例的bean A在每个方法调用中使用了非单例的bean B。容器只会创建bean A一次，而只有一个机会来配置属性。 那么容器就无法为每一次创建bean A时都提供新的bean B实例。</p>\n<p>一种解决方案就是放弃IoC，开发者可以通过实现<code>ApplicationContextAware</code>接口让<a href=\"#beans-factory-aware\">bean A对ApplicationContext</a>可见。 从而通过调用<a href=\"#beans-factory-client\"><code>getBean(&quot;B&quot;)</code></a>来在bean A 需要新的实例的时候来获取到新的B实例。参考下面例子。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// a class that uses a stateful Command-style class to perform some processing</span>\n<span class=\"hljs-keyword\">package</span> fiona.apple;\n\n<span class=\"hljs-comment\">// Spring-API imports</span>\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.BeansException;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContextAware;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CommandManager</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ApplicationContextAware</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> ApplicationContext applicationContext;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">process</span><span class=\"hljs-params\">(Map commandState)</span> </span>{\n        <span class=\"hljs-comment\">// grab a new instance of the appropriate Command</span>\n        Command command = createCommand();\n        <span class=\"hljs-comment\">// set the state on the (hopefully brand new) Command instance</span>\n        command.setState(commandState);\n        <span class=\"hljs-keyword\">return</span> command.execute();\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> Command <span class=\"hljs-title\">createCommand</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-comment\">// notice the Spring API dependency!</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.applicationContext.getBean(<span class=\"hljs-string\">\"command\"</span>, Command<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setApplicationContext</span><span class=\"hljs-params\">(\n            ApplicationContext applicationContext)</span> <span class=\"hljs-keyword\">throws</span> BeansException </span>{\n        <span class=\"hljs-keyword\">this</span>.applicationContext = applicationContext;\n    }\n}\n</code></pre>\n<p>kotlin:</p>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-comment\">// a class that uses a stateful Command-style class to perform some processing</span>\n<span class=\"hljs-keyword\">package</span> fiona.apple\n\n<span class=\"hljs-comment\">// Spring-API imports</span>\n<span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext\n<span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContextAware\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CommandManager</span> : <span class=\"hljs-type\">ApplicationContextAware {</span></span>\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">lateinit</span> <span class=\"hljs-keyword\">var</span> applicationContext: ApplicationContext\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">process</span><span class=\"hljs-params\">(commandState: <span class=\"hljs-type\">Map</span>&lt;*, *&gt;)</span></span>: Any {\n        <span class=\"hljs-comment\">// grab a new instance of the appropriate Command</span>\n        <span class=\"hljs-keyword\">val</span> command = createCommand()\n        <span class=\"hljs-comment\">// set the state on the (hopefully brand new) Command instance</span>\n        command.state = commandState\n        <span class=\"hljs-keyword\">return</span> command.execute()\n    }\n\n    <span class=\"hljs-comment\">// notice the Spring API dependency!</span>\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">createCommand</span><span class=\"hljs-params\">()</span></span> =\n            applicationContext.getBean(<span class=\"hljs-string\">\"command\"</span>, Command::<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>.<span class=\"hljs-title\">java</span>)</span>\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">setApplicationContext</span><span class=\"hljs-params\">(applicationContext: <span class=\"hljs-type\">ApplicationContext</span>)</span></span> {\n        <span class=\"hljs-keyword\">this</span>.applicationContext = applicationContext\n    }\n}\n</code></pre>\n<p>上面的代码并不让人十分满意，因为业务的代码已经与Spring框架耦合在一起。方法注入是Spring IoC容器的一个高级功能，可以让您处理这种问题。 Spring提供了一个稍微高级的注入方式来处理这种问题</p>\n<p>您可以在此<a href=\"https://spring.io/blog/2004/08/06/method-injection/\">博客条目</a>中阅读有关方法注入的更多信息。</p>\n<p><a id=\"beans-factory-lookup-method-injection\"></a></p>\n<h5><a href=\"#beans-factory-lookup-method-injection\"></a>查找方法注入</h5>\n<p>查找方法注入是容器覆盖管理bean上的方法的能力，以便返回容器中另一个命名bean的查找结果。查找方法通常涉及原型bean，<a href=\"#beans-factory-method-injection\">如前面描述的场景</a>。 Spring框架通过使用CGLIB库生成的字节码来生成动态子类重写的方法实现此注入。</p>\n<ul>\n<li>\n<p>如果想让这个动态子类正常工作，那么Spring容器所继承的Bean不能是<code>final</code>的，而覆盖的方法也不能是<code>final</code>的。</p>\n</li>\n<li>\n<p>对具有<code>抽象</code>方法的类进行单元测试时，需要开发者对类进行子类化，并提供<code>抽象</code>方法的具体实现。</p>\n</li>\n<li>\n<p>组件扫描也需要具体的方法，因为它需要获取具体的类。</p>\n</li>\n<li>\n<p>另一个关键限制是查找方法不适用于工厂方法，特别是在配置类中不使用<code>@Bean</code>的方法。因为在这种情况下，容器不负责创建实例，因此不能在运行时创建运行时生成的子类。</p>\n</li>\n</ul>\n<p>对于前面代码片段中的<code>CommandManager</code>类，Spring容器动态地覆盖<code>createCommand()</code>方法的实现。 <code>CommandManager</code>类不再拥有任何的Spring依赖，如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> fiona.apple;\n\n<span class=\"hljs-comment\">// no more Spring imports!</span>\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CommandManager</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">process</span><span class=\"hljs-params\">(Object commandState)</span> </span>{\n        <span class=\"hljs-comment\">// grab a new instance of the appropriate Command interface</span>\n        Command command = createCommand();\n        <span class=\"hljs-comment\">// set the state on the (hopefully brand new) Command instance</span>\n        command.setState(commandState);\n        <span class=\"hljs-keyword\">return</span> command.execute();\n    }\n\n    <span class=\"hljs-comment\">// okay... but where is the implementation of this method?</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">abstract</span> Command <span class=\"hljs-title\">createCommand</span><span class=\"hljs-params\">()</span></span>;\n}\n</code></pre>\n<p>kotlin:</p>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-keyword\">package</span> fiona.apple\n\n<span class=\"hljs-comment\">// no more Spring imports!</span>\n\n<span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CommandManager</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">process</span><span class=\"hljs-params\">(commandState: <span class=\"hljs-type\">Any</span>)</span></span>: Any {\n        <span class=\"hljs-comment\">// grab a new instance of the appropriate Command interface</span>\n        <span class=\"hljs-keyword\">val</span> command = createCommand()\n        <span class=\"hljs-comment\">// set the state on the (hopefully brand new) Command instance</span>\n        command.state = commandState\n        <span class=\"hljs-keyword\">return</span> command.execute()\n    }\n\n    <span class=\"hljs-comment\">// okay... but where is the implementation of this method?</span>\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">createCommand</span><span class=\"hljs-params\">()</span></span>: Command\n}\n</code></pre>\n<p>在包含需要注入方法的客户端类中 (在本例中为<code>CommandManager</code>）注入方法的签名需要如下形式：</p>\n<pre><code class=\"language-javajava\">&lt;public|protected&gt; [abstract] &lt;return-type&gt; theMethodName(no-arguments);\n</code></pre>\n<p>如果方法是<code>abstract</code>的， 那么动态生成的子类会实现该方法。否则，动态生成的子类将覆盖原始类定义的具体方法。例如：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-comment\">&lt;!-- a stateful bean deployed as a prototype (non-singleton) --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"myCommand\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"fiona.apple.AsyncCommand\"</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">\"prototype\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- inject dependencies here as required --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- commandProcessor uses statefulCommandHelper --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"commandManager\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"fiona.apple.CommandManager\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">lookup-method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"createCommand\"</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">\"myCommand\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>当需要新的myCommand bean实例时，标识为<code>commandManager</code>的bean会调用自身的<code>createCommand()</code>方法.开发者必须小心部署<code>myCommand</code> bean为原型bean. 如果所需的bean是<a href=\"#beans-factory-scopes-singleton\">单例</a>的,那么每次都会返回相同的<code>myCommand</code> bean实例.</p>\n<p>另外,如果是基于注解的配置模式,你可以在查找方法上定义<code>@Lookup</code>注解,如下:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CommandManager</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">process</span><span class=\"hljs-params\">(Object commandState)</span> </span>{\n        Command command = createCommand();\n        command.setState(commandState);\n        <span class=\"hljs-keyword\">return</span> command.execute();\n    }\n\n    <span class=\"hljs-meta\">@Lookup</span>(<span class=\"hljs-string\">\"myCommand\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">abstract</span> Command <span class=\"hljs-title\">createCommand</span><span class=\"hljs-params\">()</span></span>;\n}\n</code></pre>\n<p>kotlin:</p>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CommandManager</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">process</span><span class=\"hljs-params\">(commandState: <span class=\"hljs-type\">Any</span>)</span></span>: Any {\n        <span class=\"hljs-keyword\">val</span> command = createCommand()\n        command.state = commandState\n        <span class=\"hljs-keyword\">return</span> command.execute()\n    }\n\n    <span class=\"hljs-meta\">@Lookup(<span class=\"hljs-meta-string\">\"myCommand\"</span>)</span>\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">createCommand</span><span class=\"hljs-params\">()</span></span>: Command\n}\n</code></pre>\n<p>或者，更常见的是，开发者也可以根据查找方法的返回类型来查找匹配的bean，如下</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CommandManager</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">process</span><span class=\"hljs-params\">(Object commandState)</span> </span>{\n        MyCommand command = createCommand();\n        command.setState(commandState);\n        <span class=\"hljs-keyword\">return</span> command.execute();\n    }\n\n    <span class=\"hljs-meta\">@Lookup</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">abstract</span> MyCommand <span class=\"hljs-title\">createCommand</span><span class=\"hljs-params\">()</span></span>;\n}\n</code></pre>\n<p>kotlin:</p>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CommandManager</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">process</span><span class=\"hljs-params\">(commandState: <span class=\"hljs-type\">Any</span>)</span></span>: Any {\n        <span class=\"hljs-keyword\">val</span> command = createCommand()\n        command.state = commandState\n        <span class=\"hljs-keyword\">return</span> command.execute()\n    }\n\n    <span class=\"hljs-meta\">@Lookup</span>\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">createCommand</span><span class=\"hljs-params\">()</span></span>: Command\n}\n</code></pre>\n<p>注意开发者可以通过创建子类实现lookup方法，以便使它们与Spring的组件扫描规则兼容，同时抽象类会在默认情况下被忽略。这种限制不适用于显式注册bean或明确导入bean的情况。</p>\n<p>另一种可以访问不同生命周期的方法是<code>ObjectFactory</code>/<code>Provider</code>注入，具体参看 <a href=\"#beans-factory-scopes-other-injection\">作用域的bean依赖</a></p>\n<p>您可能还会发现<code>ServiceLocatorFactoryBean</code>（在<code>org.springframework.beans.factory.config</code>包中）很有用。</p>\n<p><a id=\"beans-factory-arbitrary-method-replacement\"></a></p>\n<h5><a href=\"#beans-factory-arbitrary-method-replacement\"></a>替换任意方法</h5>\n<p>从前面的描述中，我们知道查找方法是有能力来覆盖任何由容器管理的bean方法的。开发者最好跳过这一部分，除非一定需要用到这个功能。</p>\n<p>通过基于XML的元数据配置，开发者可以使用<code>replaced-method</code>元素来替换已存在方法的实现。考虑以下类，它有一个我们想要覆盖的名为<code>computeValue</code> 的方法：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyValueCalculator</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">computeValue</span><span class=\"hljs-params\">(String input)</span> </span>{\n        <span class=\"hljs-comment\">// some real code...</span>\n    }\n\n    <span class=\"hljs-comment\">// some other methods...</span>\n}\n</code></pre>\n<p>kotlin:</p>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyValueCalculator</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">computeValue</span><span class=\"hljs-params\">(input: <span class=\"hljs-type\">String</span>)</span></span>: String {\n        <span class=\"hljs-comment\">// some real code...</span>\n    }\n\n    <span class=\"hljs-comment\">// some other methods...</span>\n}\n</code></pre>\n<p>实现<code>org.springframework.beans.factory.support.MethodReplacer</code>接口的类提供了新的方法定义，如以下示例所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n * meant to be used to override the existing computeValue(String)\n * implementation in MyValueCalculator\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ReplacementComputeValue</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">MethodReplacer</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">reimplement</span><span class=\"hljs-params\">(Object o, Method m, Object[] args)</span> <span class=\"hljs-keyword\">throws</span> Throwable </span>{\n        <span class=\"hljs-comment\">// get the input value, work with it, and return a computed result</span>\n        String input = (String) args[<span class=\"hljs-number\">0</span>];\n        ...\n        <span class=\"hljs-keyword\">return</span> ...;\n    }\n}\n</code></pre>\n<p>kotlin:</p>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-comment\">/**\n* meant to be used to override the existing computeValue(String)\n* implementation in MyValueCalculator\n*/</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ReplacementComputeValue</span> : <span class=\"hljs-type\">MethodReplacer {</span></span>\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">reimplement</span><span class=\"hljs-params\">(obj: <span class=\"hljs-type\">Any</span>, method: <span class=\"hljs-type\">Method</span>, args: <span class=\"hljs-type\">Array</span>&lt;<span class=\"hljs-type\">out</span> <span class=\"hljs-type\">Any</span>&gt;)</span></span>: Any {\n        <span class=\"hljs-comment\">// get the input value, work with it, and return a computed result</span>\n        <span class=\"hljs-keyword\">val</span> input = args[<span class=\"hljs-number\">0</span>] <span class=\"hljs-keyword\">as</span> String;\n        ...\n        <span class=\"hljs-keyword\">return</span> ...;\n    }\n}\n</code></pre>\n<p>如果需要覆盖bean方法的XML配置如下类似于以下示例：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"myValueCalculator\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"x.y.z.MyValueCalculator\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- arbitrary method replacement --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">replaced-method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"computeValue\"</span> <span class=\"hljs-attr\">replacer</span>=<span class=\"hljs-string\">\"replacementComputeValue\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">arg-type</span>&gt;</span>String<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">arg-type</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">replaced-method</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"replacementComputeValue\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"a.b.c.ReplacementComputeValue\"</span>/&gt;</span>\n</code></pre>\n<p>您可以在<code>&lt;replaced-method/&gt;</code>元素中使用一个或多个 <code>&lt;arg-type/&gt;</code>元素来指示被覆盖的方法的方法。当需要覆盖的方法存在重载方法时，必须指定所需参数。 为了方便起见，字符串的类型会匹配以下类型，它完全等同于<code>java.lang.String</code></p>\n<pre><code>java.lang.String\nString\nStr\n</code></pre>\n<p>因为，通常来说参数的个数已经足够区别不同的方法，这种快捷的写法可以省去很多的代码。</p>\n",
  "link": "\\zh-cn\\docs\\springframework\\core\\container\\beans-dependencies.html",
  "meta": {
    "title": "依赖",
    "keywords": "keywords: docs，jcohy-docs，spring,依赖",
    "description": "Spring  Framework 中文文档 》 依赖"
  }
}