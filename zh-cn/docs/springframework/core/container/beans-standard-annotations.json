{
  "filename": "beans-standard-annotations.md",
  "__html": "<h1>Spring  Framework 中文文档</h1>\n<h3><a href=\"#beans-standard-annotations\"></a>1.11. 使用JSR 330标准注解</h3>\n<p>从Spring 3.0开始，Spring提供对JSR-330标准注解（依赖注入）的支持。 这些注解的扫描方式与Spring注解相同。 要使用它们，您需要在类路径中包含相关的jar。</p>\n<p>如果使用Maven工具，那么<code>@javax.inject.Inject</code>可以在Maven中央仓库中找到( <a href=\"https://repo1.maven.org/maven2/javax/inject/javax.inject/1/\">https://repo1.maven.org/maven2/javax/inject/javax.inject/1/</a>). 您可以将以下依赖项添加到文件pom.xml：:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>javax.inject<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>javax.inject<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<p><a id=\"beans-inject-named\"></a></p>\n<h4><a href=\"#beans-inject-named\"></a>1.11.1. 使用<code>@Inject</code> 和 <code>@Named</code>注解实现依赖注入</h4>\n<p><code>@javax.inject.Inject</code>可以使用以下的方式来替代<code>@Autowired</code>注解:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">import</span> javax.inject.Inject;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SimpleMovieLister</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> MovieFinder movieFinder;\n\n    <span class=\"hljs-meta\">@Inject</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setMovieFinder</span><span class=\"hljs-params\">(MovieFinder movieFinder)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.movieFinder = movieFinder;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">listMovies</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.movieFinder.findMovies(...);\n        ...\n    }\n}\n</code></pre>\n<p>kotlin:</p>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-keyword\">import</span> javax.inject.Inject\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SimpleMovieLister</span> </span>{\n\n    <span class=\"hljs-meta\">@Inject</span>\n    <span class=\"hljs-keyword\">lateinit</span> <span class=\"hljs-keyword\">var</span> movieFinder: MovieFinder\n\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">listMovies</span><span class=\"hljs-params\">()</span></span> {\n        movieFinder.findMovies(...)\n        <span class=\"hljs-comment\">// ...</span>\n    }\n}\n</code></pre>\n<p>与 <code>@Autowired</code>一样，您可以在字段，方法和构造函数参数级别使用<code>@Inject</code>注解。此外，还可以将注入点声明为<code>Provider</code>。 它允许按需访问作用域较小的bean或通过<code>Provider.get()</code>调用对其他bean进行延迟访问。以下示例提供了前面示例的变体：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">import</span> javax.inject.Inject;\n<span class=\"hljs-keyword\">import</span> javax.inject.Provider;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SimpleMovieLister</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> Provider&lt;MovieFinder&gt; movieFinder;\n\n    <span class=\"hljs-meta\">@Inject</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setMovieFinder</span><span class=\"hljs-params\">(Provider&lt;MovieFinder&gt; movieFinder)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.movieFinder = movieFinder;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">listMovies</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.movieFinder.get().findMovies(...);\n        ...\n    }\n}\n</code></pre>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-keyword\">import</span> javax.inject.Inject\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SimpleMovieLister</span> </span>{\n\n    <span class=\"hljs-meta\">@Inject</span>\n    <span class=\"hljs-keyword\">lateinit</span> <span class=\"hljs-keyword\">var</span> movieFinder: MovieFinder\n\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">listMovies</span><span class=\"hljs-params\">()</span></span> {\n        movieFinder.findMovies(...)\n        <span class=\"hljs-comment\">// ...</span>\n    }\n}\n</code></pre>\n<p>如果想要为注入的依赖项使用限定名称，则应该使用<code>@Named</code>注解。如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">import</span> javax.inject.Inject;\n<span class=\"hljs-keyword\">import</span> javax.inject.Named;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SimpleMovieLister</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> MovieFinder movieFinder;\n\n    <span class=\"hljs-meta\">@Inject</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setMovieFinder</span><span class=\"hljs-params\">(@Named(<span class=\"hljs-string\">\"main\"</span>)</span> MovieFinder movieFinder) </span>{\n        <span class=\"hljs-keyword\">this</span>.movieFinder = movieFinder;\n    }\n\n    <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<p>kotlin:</p>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-keyword\">import</span> javax.inject.Inject\n<span class=\"hljs-keyword\">import</span> javax.inject.Named\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SimpleMovieLister</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">lateinit</span> <span class=\"hljs-keyword\">var</span> movieFinder: MovieFinder\n\n    <span class=\"hljs-meta\">@Inject</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">setMovieFinder</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@Named(<span class=\"hljs-meta-string\">\"main\"</span>)</span> movieFinder: <span class=\"hljs-type\">MovieFinder</span>)</span></span> {\n        <span class=\"hljs-keyword\">this</span>.movieFinder = movieFinder\n    }\n\n    <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<p>与<code>@Autowired</code>一样，<code>@Inject</code> 也可以与<code>java.util.Optional</code>或<code>@Nullable</code>一起使用。 这在这里用更适用，因为<code>@Inject</code>没有<code>required</code>的属性。 以下一对示例显示了如何使用<code>@Inject</code>和<code>@Nullable</code>:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SimpleMovieLister</span> </span>{\n\n    <span class=\"hljs-meta\">@Inject</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setMovieFinder</span><span class=\"hljs-params\">(Optional&lt;MovieFinder&gt; movieFinder)</span> </span>{\n        ...\n    }\n}\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SimpleMovieLister</span> </span>{\n\n    <span class=\"hljs-meta\">@Inject</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setMovieFinder</span><span class=\"hljs-params\">(@Nullable MovieFinder movieFinder)</span> </span>{\n        ...\n    }\n}\n</code></pre>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SimpleMovieLister</span> </span>{\n\n    <span class=\"hljs-meta\">@Inject</span>\n    <span class=\"hljs-keyword\">public</span> void setMovieFinder(Optional&lt;MovieFinder&gt; movieFinder) {\n        <span class=\"hljs-comment\">// ...</span>\n    }\n}\n</code></pre>\n<p><a id=\"beans-named\"></a></p>\n<h4><a href=\"#beans-named\"></a>1.11.2. <code>@Named</code> 和 <code>@ManagedBean</code>注解: 标准与 <code>@Component</code> 注解相同</h4>\n<p><code>@javax.inject.Named</code> 或 <code>javax.annotation.ManagedBean</code>可以使用下面的方式来替代<code>@Component</code>注解：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">import</span> javax.inject.Inject;\n<span class=\"hljs-keyword\">import</span> javax.inject.Named;\n\n<span class=\"hljs-meta\">@Named</span>(<span class=\"hljs-string\">\"movieListener\"</span>)  <span class=\"hljs-comment\">// @ManagedBean(\"movieListener\") could be used as well</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SimpleMovieLister</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> MovieFinder movieFinder;\n\n    <span class=\"hljs-meta\">@Inject</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setMovieFinder</span><span class=\"hljs-params\">(MovieFinder movieFinder)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.movieFinder = movieFinder;\n    }\n\n    <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-keyword\">import</span> javax.inject.Inject\n<span class=\"hljs-keyword\">import</span> javax.inject.Named\n\n<span class=\"hljs-meta\">@Named(<span class=\"hljs-meta-string\">\"movieListener\"</span>)</span>  <span class=\"hljs-comment\">// @ManagedBean(\"movieListener\") could be used as well</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SimpleMovieLister</span> </span>{\n\n    <span class=\"hljs-meta\">@Inject</span>\n    <span class=\"hljs-keyword\">lateinit</span> <span class=\"hljs-keyword\">var</span> movieFinder: MovieFinder\n\n    <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<p>在不指定组件名称的情况下使用<code>@Component</code>是很常见的。 <code>@Named</code>可以以类似的方式使用，如下例所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">import</span> javax.inject.Inject;\n<span class=\"hljs-keyword\">import</span> javax.inject.Named;\n\n<span class=\"hljs-meta\">@Named</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SimpleMovieLister</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> MovieFinder movieFinder;\n\n    <span class=\"hljs-meta\">@Inject</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setMovieFinder</span><span class=\"hljs-params\">(MovieFinder movieFinder)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.movieFinder = movieFinder;\n    }\n\n    <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-keyword\">import</span> javax.inject.Inject\n<span class=\"hljs-keyword\">import</span> javax.inject.Named\n\n<span class=\"hljs-meta\">@Named</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SimpleMovieLister</span> </span>{\n\n    <span class=\"hljs-meta\">@Inject</span>\n    <span class=\"hljs-keyword\">lateinit</span> <span class=\"hljs-keyword\">var</span> movieFinder: MovieFinder\n\n    <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<p>当使用<code>@Named</code> 或 <code>@ManagedBean</code>时，可以与Spring注解完全相同的方式使用component-scanning组件扫描。 如以下示例所示:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-meta\">@ComponentScan</span>(basePackages = <span class=\"hljs-string\">\"org.example\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppConfig</span>  </span>{\n    ...\n}\n</code></pre>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-meta\">@ComponentScan(basePackages = [<span class=\"hljs-meta-string\">\"org.example\"</span>])</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppConfig</span>  </span>{\n    <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<p>与<code>@Component</code>相反，JSR-330 <code>@Named</code> 和 JSR-250 <code>ManagedBean</code>注解不可组合。 请使用Spring的原型模型（stereotype mode)来构建自定义组件注解。</p>\n<p><a id=\"beans-standard-annotations-limitations\"></a></p>\n<h4><a href=\"#beans-standard-annotations-limitations\"></a>1.11.3. 使用 JSR-330标准注解的限制</h4>\n<p>使用标准注解时，需要知道哪些重要功能是不可用的。如下表所示：</p>\n<p>Table 6. Spring的组件模型元素 vs JSR-330 变量</p>\n<table>\n<thead>\n<tr>\n<th>Spring</th>\n<th>javax.inject.*</th>\n<th>javax.inject restrictions / comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@Autowired</td>\n<td>@Inject</td>\n<td><code>@Inject</code> 没有'required'属性。 可以与Java 8的 <code>Optional</code>一起使用。</td>\n</tr>\n<tr>\n<td>@Component</td>\n<td>@Named / @ManagedBean</td>\n<td>JSR-330不提供可组合模型，只是一种识别命名组件的方法。</td>\n</tr>\n<tr>\n<td>@Scope(&quot;singleton&quot;)</td>\n<td>@Singleton</td>\n<td>JSR-330的默认作用域就像Spring的<code>prototype</code>。 但是，为了使其与Spring的一般默认值保持一致，默认情况下，Spring容器中声明的JSR-330 bean是一个 <code>singleton</code>。 为了使用除 <code>singleton</code>之外的范围，您应该使用Spring的<code>@Scope</code>注解。 <code>javax.inject</code>还提供了<a href=\"https://download.oracle.com/javaee/6/api/javax/inject/Scope.html\">@Scope</a>注解。 然而，这个仅用于创建自己的注解。</td>\n</tr>\n<tr>\n<td>@Qualifier</td>\n<td>@Qualifier / @Named</td>\n<td><code>javax.inject.Qualifier</code> 只是用于构建自定义限定符的元注解。 可以通过<code>javax.inject.Named</code>创建与Spring中<code>@Qualifier</code>一样的限定符。</td>\n</tr>\n<tr>\n<td>@Value</td>\n<td>-</td>\n<td>无</td>\n</tr>\n<tr>\n<td>@Required</td>\n<td>-</td>\n<td>无</td>\n</tr>\n<tr>\n<td>@Lazy</td>\n<td>-</td>\n<td>无</td>\n</tr>\n<tr>\n<td>ObjectFactory</td>\n<td>Provider</td>\n<td><code>javax.inject.Provider</code> avax.inject.Provider是Spring的<code>ObjectFactory</code>的直接替代品， 仅仅使用简短的<code>get()</code>方法即可。 它也可以与Spring的<code>@Autowired</code>结合使用，也可以与非注解的构造函数和setter方法结合使用。</td>\n</tr>\n</tbody>\n</table>\n",
  "link": "\\zh-cn\\docs\\springframework\\core\\container\\beans-standard-annotations.html",
  "meta": {
    "title": "使用JSR 330标准注解",
    "keywords": "keywords: docs，jcohy-docs，spring,使用JSR 330标准注解",
    "description": "Spring  Framework 中文文档 》 使用JSR 330标准注解"
  }
}