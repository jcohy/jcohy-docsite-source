{
  "filename": "beans-beanfactory.md",
  "__html": "<h1>Spring  Framework 中文文档</h1>\n<h3><a href=\"#beans-beanfactory\"></a>1.16.<code>BeanFactory</code></h3>\n<p><code>BeanFactory</code> API为Spring的IoC功能提供了基础。 它的特定契约主要用于与Spring的其他部分和相关的第三方框架集成其<code>DefaultListableBeanFactory</code>实现是更高级别<code>GenericApplicationContext</code>容器中的密钥委托。</p>\n<p><code>BeanFactory</code>和相关接口（例如<code>BeanFactoryAware</code>, <code>InitializingBean</code>，<code>DisposableBean</code>）是其他框架组件的重要集成点。 通过不需要任何注解或甚至反射，它们允许容器与其组件之间的非常有效的交互。 应用程序级bean可以使用相同的回调接口，但通常更喜欢通过注解或通过编程配置进行声明性依赖注入。</p>\n<p>请注意，核心<code>BeanFactory</code> API级别及其 <code>DefaultListableBeanFactory</code>实现不会对配置格式或要使用的任何组件注解做出假设。 所有这些风格都通过扩展（例如<code>XmlBeanDefinitionReader</code>和<code>AutowiredAnnotationBeanPostProcessor</code>）进行，并作为核心元数据表示在共享<code>BeanDefinition</code>对象上运行。 这是使Spring的容器如此灵活和可扩展的本质。</p>\n<p><a id=\"context-introduction-ctx-vs-beanfactory\"></a></p>\n<h4><a href=\"#context-introduction-ctx-vs-beanfactory\"></a>1.16.1. 选择<code>BeanFactory</code>还是<code>ApplicationContext</code>?</h4>\n<p>本节介绍<code>BeanFactory</code>和<code>ApplicationContext</code>容器级别之间的差异以及影响。</p>\n<p>您应该使用<code>ApplicationContext</code>，除非您有充分的理由不这样做，使用<code>GenericApplicationContext</code>及其子类<code>AnnotationConfigApplicationContext</code>作为自定义引导的常见实现。 这些是Spring用于所有常见目的的核心容器的主要入口点：加载配置文件，触发类路径扫描，以编程方式注册bean定义和带注解的类，以及（从5.0开始）注册功能bean定义。</p>\n<p>因为<code>ApplicationContext</code>包括<code>BeanFactory</code>的所有功能，和<code>BeanFactory</code>相比更值得推荐，除了一些特定的场景，例如在资源受限的设备上运行的内嵌的应用。 在<code>ApplicationContext</code>（例如<code>GenericApplicationContext</code>实现）中，按照约定（即通过bean名称或bean类型 - 特别是后处理器）检测到几种bean， 而普通的<code>DefaultListableBeanFactory</code>对任何特殊bean都是不可知的。</p>\n<p>对于许多扩展容器功能，例如注解处理和AOP代理， <a href=\"#beans-factory-extension-bpp\"><code>BeanPostProcessor</code>扩展点是必不可少的。如果仅使用普通的<code>DefaultListableBeanFactory</code>，则默认情况下不会检测到并激活此类后置处理器。 这种情况可能令人困惑，因为您的bean配置实际上没有任何问题。 相反，在这种情况下，容器需要至少得多一些额外的处理。</a></p>\n<p>下表列出了<code>BeanFactory</code>和<code>ApplicationContext</code>接口和实现提供的功能。</p>\n<p>Table 9.特性矩阵</p>\n<table>\n<thead>\n<tr>\n<th>Feature</th>\n<th><code>BeanFactory</code></th>\n<th><code>ApplicationContext</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Bean Bean实例化/装配</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>集成的生命周期管理</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>自动注册 <code>BeanPostProcessor</code></td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>自动注册 <code>BeanFactoryPostProcessor</code></td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>便利的 <code>MessageSource</code> 访问 (国际化)</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>内置<code>ApplicationEvent</code> 发布机制</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n<p>要使用 <code>DefaultListableBeanFactory</code>显式注册bean的后置处理器，您需要以编程方式调用 <code>addBeanPostProcessor</code>，如以下示例所示：</p>\n<pre><code class=\"language-java\">DefaultListableBeanFactory factory = <span class=\"hljs-keyword\">new</span> DefaultListableBeanFactory();\n<span class=\"hljs-comment\">// populate the factory with bean definitions</span>\n\n<span class=\"hljs-comment\">// now register any needed BeanPostProcessor instances</span>\nfactory.addBeanPostProcessor(<span class=\"hljs-keyword\">new</span> AutowiredAnnotationBeanPostProcessor());\nfactory.addBeanPostProcessor(<span class=\"hljs-keyword\">new</span> MyBeanPostProcessor());\n\n<span class=\"hljs-comment\">// now start using the factory</span>\n</code></pre>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-keyword\">val</span> factory = DefaultListableBeanFactory()\n<span class=\"hljs-comment\">// populate the factory with bean definitions</span>\n\n<span class=\"hljs-comment\">// now register any needed BeanPostProcessor instances</span>\nfactory.addBeanPostProcessor(AutowiredAnnotationBeanPostProcessor())\nfactory.addBeanPostProcessor(MyBeanPostProcessor())\n\n<span class=\"hljs-comment\">// now start using the factory</span>\n</code></pre>\n<p>要将<code>BeanFactoryPostProcessor</code> 应用于普通的<code>DefaultListableBeanFactory</code>，需要调用其<code>postProcessBeanFactory</code>方法，如以下示例所示：</p>\n<pre><code class=\"language-java\">DefaultListableBeanFactory factory = <span class=\"hljs-keyword\">new</span> DefaultListableBeanFactory();\nXmlBeanDefinitionReader reader = <span class=\"hljs-keyword\">new</span> XmlBeanDefinitionReader(factory);\nreader.loadBeanDefinitions(<span class=\"hljs-keyword\">new</span> FileSystemResource(<span class=\"hljs-string\">\"beans.xml\"</span>));\n\n<span class=\"hljs-comment\">// bring in some property values from a Properties file</span>\nPropertyPlaceholderConfigurer cfg = <span class=\"hljs-keyword\">new</span> PropertyPlaceholderConfigurer();\ncfg.setLocation(<span class=\"hljs-keyword\">new</span> FileSystemResource(<span class=\"hljs-string\">\"jdbc.properties\"</span>));\n\n<span class=\"hljs-comment\">// now actually do the replacement</span>\ncfg.postProcessBeanFactory(factory);\n</code></pre>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-keyword\">val</span> factory = DefaultListableBeanFactory()\n<span class=\"hljs-keyword\">val</span> reader = XmlBeanDefinitionReader(factory)\nreader.loadBeanDefinitions(FileSystemResource(<span class=\"hljs-string\">\"beans.xml\"</span>))\n\n<span class=\"hljs-comment\">// bring in some property values from a Properties file</span>\n<span class=\"hljs-keyword\">val</span> cfg = PropertySourcesPlaceholderConfigurer()\ncfg.setLocation(FileSystemResource(<span class=\"hljs-string\">\"jdbc.properties\"</span>))\n\n<span class=\"hljs-comment\">// now actually do the replacement</span>\ncfg.postProcessBeanFactory(factory)\n</code></pre>\n<p>在这两种情况下，显示注册步骤都不方便，这就是为什么各种<code>ApplicationContext</code>变体优先于Spring支持的应用程序中的普通<code>DefaultListableBeanFactory</code>， 尤其是在典型企业设置中依赖<code>BeanFactoryPostProcessor</code> 和 <code>BeanPostProcessor</code>实例来扩展容器功能时。</p>\n<p><code>AnnotationConfigApplicationContext</code>具有注册的所有常见注解后置处理器，并且可以通过配置注解（例如<code>@EnableTransactionManagement</code>）在封面下引入其他处理器。 在Spring的基于注解的配置模型的抽象级别，bean的后置处理器的概念变成仅仅是内部容器细节。</p>\n",
  "link": "\\zh-cn\\docs\\springframework\\core\\container\\beans-beanfactory.html",
  "meta": {
    "title": "BeanFactory",
    "keywords": "keywords: docs，jcohy-docs，spring,BeanFactory",
    "description": "Spring  Framework 中文文档 》 BeanFactory"
  }
}