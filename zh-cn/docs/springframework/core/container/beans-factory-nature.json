{
  "filename": "beans-factory-nature.md",
  "__html": "<h1>Spring  Framework 中文文档</h1>\n<h3><a href=\"#beans-factory-nature\"></a>1.6. 自定义Bean的特性</h3>\n<p>Spring Framework提供了许多可用于自定义bean特性的接口。 本节将它们分组如下：</p>\n<ul>\n<li>\n<p><a href=\"#beans-factory-lifecycle\">Lifecycle Callbacks(生命周期回调)</a></p>\n</li>\n<li>\n<p><a href=\"#beans-factory-aware\"><code>ApplicationContextAware</code> and <code>BeanNameAware</code></a></p>\n</li>\n<li>\n<p><a href=\"#aware-list\">其他 <code>Aware</code> 接口</a></p>\n</li>\n</ul>\n<p><a id=\"beans-factory-lifecycle\"></a></p>\n<h4><a href=\"#beans-factory-lifecycle\"></a>1.6.1. 生命周期回调</h4>\n<p>你可以实现<code>InitializingBean</code> 和 <code>DisposableBean</code>接口，让容器里管理Bean的生命周期。容器会在调用<code>afterPropertiesSet()</code> 之后和<code>destroy()</code>之前会允许bean在初始化和销毁bean时执行某些操作。</p>\n<p>JSR-250 <code>@PostConstruct</code> 和 <code>@PreDestroy</code>注解通常被认为是在现代Spring应用程序中接收生命周期回调的最佳实践。 使用这些注解意味着您的bean不会耦合到特定于Spring的接口。 有关详细信息，请参阅<a href=\"#beans-postconstruct-and-predestroy-annotations\">使用 <code>@PostConstruct</code> 和 <code>@PreDestroy</code></a>.</p>\n<p>如果您不想使用JSR-250注解但仍想删除耦合，请考虑使用<code>init-method</code> 和 <code>destroy-method</code>定义对象元数据。</p>\n<p>在内部，Spring 框架使用<code>BeanPostProcessor</code> 实现来处理任何回调接口并调用适当的方法。 如果您需要Spring默认提供的自定义功能或其他生命周期行为，您可以自己实现<code>BeanPostProcessor</code>。 有关更多信息，请参阅<a href=\"#beans-factory-extension\">容器扩展点</a>。</p>\n<p>除了初始化和销毁方法的回调，Spring管理的对象也实现了Lifecycle接口来让管理的对象在容器的<code>生命周期</code>内启动和关闭。</p>\n<p>本节描述了生命周期回调接口。.</p>\n<p><a id=\"beans-factory-lifecycle-initializingbean\"></a></p>\n<h5><a href=\"#beans-factory-lifecycle-initializingbean\"></a>初始化方法回调</h5>\n<p><code>org.springframework.beans.factory.InitializingBean</code>接口允许bean在所有的必要的依赖配置完成后执行bean的初始化， <code>InitializingBean</code> 接口中指定使用如下方法:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">afterPropertiesSet</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception</span>;\n</code></pre>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">afterPropertiesSet</span><span class=\"hljs-params\">()</span></span>\n</code></pre>\n<p>Spring团队是不建议开发者使用<code>InitializingBean</code>接口，因为这样会将代码耦合到Spring的特殊接口上。他们建议使用<a href=\"#beans-postconstruct-and-predestroy-annotations\"><code>@PostConstruct</code></a> 注解或者指定一个POJO的实现方法， 这会比实现接口更好。在基于XML的元数据配置上，开发者可以使用<code>init-method</code> 属性来指定一个没有参数的方法，使用Java配置的开发者可以在<code>@Bean</code>上添加 <code>initMethod</code> 属性。 请参阅 <a href=\"#beans-java-lifecycle-callbacks\">接收生命周期回调</a>接收生命周期回调：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"exampleInitBean\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"examples.ExampleBean\"</span> <span class=\"hljs-attr\">init-method</span>=<span class=\"hljs-string\">\"init\"</span>/&gt;</span>\n//java\npublic class ExampleBean {\n\n    public void init() {\n        // do some initialization work\n    }\n}\n//kotlin\nclass ExampleBean {\n\n    fun init() {\n        // do some initialization work\n    }\n}\n</code></pre>\n<p>前面的示例与以下示例（由两个列表组成）具有几乎完全相同的效果：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"exampleInitBean\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"examples.AnotherExampleBean\"</span>/&gt;</span>\n//java\npublic class AnotherExampleBean implements InitializingBean {\n\n    public void afterPropertiesSet() {\n        // do some initialization work\n    }\n}\n\n//kotlin\nclass AnotherExampleBean : InitializingBean {\n\n    override fun afterPropertiesSet() {\n        // do some initialization work\n    }\n}\n</code></pre>\n<p>但是，前面两个示例中的第一个没有将代码耦合到Spring。</p>\n<p><a id=\"beans-factory-lifecycle-disposablebean\"></a></p>\n<h5><a href=\"#beans-factory-lifecycle-disposablebean\"></a>销毁方法的回调</h5>\n<p>实现<code>org.springframework.beans.factory.DisposableBean</code> 接口的Bean就能让容器通过回调来销毁bean所引用的资源。 <code>DisposableBean</code> 接口指定一个方法：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">destroy</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception</span>;\n</code></pre>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">destroy</span><span class=\"hljs-params\">()</span></span>\n</code></pre>\n<p>我们建议您不要使用 <code>DisposableBean</code> 回调接口，因为它会不必要地将代码耦合到Spring。或者，我们建议使用<a href=\"#beans-postconstruct-and-predestroy-annotations\"><code>@PreDestroy</code></a>注解 或指定bean定义支持的泛型方法。 在基于XML的元数据配置中，您可以在<code>&lt;bean/&gt;</code>上使用<code>destroy-method</code>属性。 使用Java配置，您可以使用<code>@Bean</code>的 <code>destroyMethod</code> 属性。 请参阅<a href=\"#beans-java-lifecycle-callbacks\">接收生命周期回调</a>。 考虑以下定义：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"exampleInitBean\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"examples.ExampleBean\"</span> <span class=\"hljs-attr\">destroy-method</span>=<span class=\"hljs-string\">\"cleanup\"</span>/&gt;</span>\n\n//java\npublic class ExampleBean {\n\n    public void cleanup() {\n        // do some destruction work (like releasing pooled connections)\n    }\n}\n\n//kotlin\nclass ExampleBean {\n\n    fun cleanup() {\n        // do some destruction work (like releasing pooled connections)\n    }\n}\n</code></pre>\n<p>前面的定义与以下定义几乎完全相同：:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"exampleInitBean\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"examples.AnotherExampleBean\"</span>/&gt;</span>\n\n//java\npublic class AnotherExampleBean implements DisposableBean {\n\n    public void destroy() {\n        // do some destruction work (like releasing pooled connections)\n    }\n}\n\n//kotlin\nclass AnotherExampleBean : DisposableBean {\n\n    override fun destroy() {\n        // do some destruction work (like releasing pooled connections)\n    }\n}\n</code></pre>\n<p>但是，前面两个定义中的第一个没有将代码耦合到Spring。.</p>\n<p>您可以为<code>&lt;bean&gt;</code> 元素的<code>destroy-method</code>属性分配一个特殊的（推断的）值，该值指示Spring自动检测特定bean类的<code>close</code>或者<code>shutdown</code>方法。 （因此，任何实现<code>java.lang.AutoCloseable</code>或<code>java.io.Closeable</code>的类都将匹配。） 您还可以在<code>&lt;bean&gt;</code> 元素的<code>default-destroy-method</code>属性上设置此特殊（推断）值，用于让所有的bean都实现这个行为（<a href=\"#beans-factory-lifecycle-default-init-destroy-methods\">参见默认初始化和销毁方法</a>）。 请注意，这是Java配置的默认行为。</p>\n<p><a id=\"beans-factory-lifecycle-default-init-destroy-methods\"></a></p>\n<h5><a href=\"#beans-factory-lifecycle-default-init-destroy-methods\"></a>默认初始化和销毁方法</h5>\n<p>当您不使用Spring特有的<code>InitializingBean</code>和 <code>DisposableBean</code>回调接口来实现初始化和销毁方法时，您定义方法的名称最好类似于<code>init()</code>, <code>initialize()</code>, <code>dispose()</code>。 这样可以在项目中标准化类方法，并让所有开发者都使用一样的名字来确保一致性。</p>\n<p>您可以配置Spring容器来针对每一个Bean都查找这种名字的初始化和销毁回调方法。也就是说， 任意的开发者都会在应用的类中使用一个叫 <code>init()</code>的初始化回调。而不需要在每个bean中都定义<code>init-method=&quot;init&quot;</code> 这种属性， Spring IoC容器会在bean创建的时候调用那个回调方法（<a href=\"#beans-factory-lifecycle\">如前面描述</a>的标准生命周期一样）。这个特性也将强制开发者为其他的初始化以及销毁回调方法使用同样的名字。</p>\n<p>假设您的初始化回调方法名为<code>init()</code>，而您的destroy回调方法名为<code>destroy()</code>。 然后，您的类类似于以下示例中的类：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DefaultBlogService</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">BlogService</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> BlogDao blogDao;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setBlogDao</span><span class=\"hljs-params\">(BlogDao blogDao)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.blogDao = blogDao;\n    }\n\n    <span class=\"hljs-comment\">// this is (unsurprisingly) the initialization callback method</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.blogDao == <span class=\"hljs-keyword\">null</span>) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalStateException(<span class=\"hljs-string\">\"The [blogDao] property must be set.\"</span>);\n        }\n    }\n}\n</code></pre>\n<p>kotlin:</p>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DefaultBlogService</span> : <span class=\"hljs-type\">BlogService {</span></span>\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> blogDao: BlogDao? = <span class=\"hljs-literal\">null</span>\n\n    <span class=\"hljs-comment\">// this is (unsurprisingly) the initialization callback method</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span> {\n        <span class=\"hljs-keyword\">if</span> (blogDao == <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">throw</span> IllegalStateException(<span class=\"hljs-string\">\"The [blogDao] property must be set.\"</span>)\n        }\n    }\n}\n</code></pre>\n<p>然后，您可以在类似于以下内容的bean中使用该类:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">default-init-method</span>=<span class=\"hljs-string\">\"init\"</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"blogService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.something.DefaultBlogService\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"blogDao\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"blogDao\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<p>顶级<code>&lt;beans/&gt;</code>元素属性上存在<code>default-init-method</code>属性会导致Spring IoC容器将bean类上的<code>init</code>方法识别为初始化方法回调。 当bean被创建和组装时，如果bean拥有同名方法的话，则在适当的时候调用它。</p>\n<p>您可以使用 <code>&lt;beans/&gt;</code>元素上的<code>default-destroy-method</code>属性，以类似方式（在XML中）配置destroy方法回调。</p>\n<p>当某些bean已有的回调方法与配置的默认回调方法不相同时，开发者可以通过特指的方式来覆盖掉默认的回调方法。以XML为例，可以通过使用元素的<code>init-method</code> 和<code>destroy-method</code>属性来覆盖掉<code>&lt;bean/&gt;</code>中的配置。</p>\n<p>Spring容器会做出如下保证，bean会在装载了所有的依赖以后，立刻就开始执行初始化回调。这样的话，初始化回调只会在直接的bean引用装载好后调用， 而此时AOP拦截器还没有应用到bean上。首先目标的bean会先完全初始化，然后AOP代理和拦截链才能应用。如果目标bean和代理是分开定义的，那么开发者的代码甚至可以跳过AOP而直接和引用的bean交互。 因此，在初始化方法中应用拦截器会前后矛盾，因为这样做耦合了目标bean的生命周期和代理/拦截器，还会因为与bean产生了直接交互进而引发不可思议的现象。</p>\n<p><a id=\"beans-factory-lifecycle-combined-effects\"></a></p>\n<h5><a href=\"#beans-factory-lifecycle-combined-effects\"></a>组合生命周期策略</h5>\n<p>从Spring 2.5开始，您有三种选择用于控制bean生命周期行为:</p>\n<ul>\n<li>\n<p><a href=\"#beans-factory-lifecycle-initializingbean\"><code>InitializingBean</code></a> 和 <a href=\"#beans-factory-lifecycle-disposablebean\"><code>DisposableBean</code></a> 回调接口</p>\n</li>\n<li>\n<p>自定义 <code>init()</code> 和 <code>destroy()</code> 方法</p>\n</li>\n<li>\n<p><a href=\"#beans-postconstruct-and-predestroy-annotations\"><code>@PostConstruct</code> 和 <code>@PreDestroy</code> 注解</a>. 你也可以在bean上同时使用这些机制.</p>\n</li>\n</ul>\n<p>如果bean配置了多个生命周期机制，而且每个机制都配置了不同的方法名字时，每个配置的方法会按照以下描述的顺序来执行。但是，如果配置了相同的名字， 例如初始化回调为<code>init()</code>，在不止一个生命周期机制配置为这个方法的情况下，这个方法只会执行一次。如<a href=\"#beans-factory-lifecycle-default-init-destroy-methods\">上一节中所述</a>。</p>\n<p>为同一个bean配置的多个生命周期机制具有不同的初始化方法，如下所示:</p>\n<ol>\n<li>\n<p>包含<code>@PostConstruct</code>注解的方法</p>\n</li>\n<li>\n<p>在<code>InitializingBean</code> 接口中的<code>afterPropertiesSet()</code> 方法</p>\n</li>\n<li>\n<p>自定义的<code>init()</code> 方法</p>\n</li>\n</ol>\n<p>Destroy方法以相同的顺序调用:</p>\n<ol>\n<li>\n<p>包含<code>@PreDestroy</code>注解的方法</p>\n</li>\n<li>\n<p>在<code>DisposableBean</code>接口中的<code>destroy()</code> 方法</p>\n</li>\n<li>\n<p>自定义的<code>destroy()</code> 方法</p>\n</li>\n</ol>\n<p><a id=\"beans-factory-lifecycle-processor\"></a></p>\n<h5><a href=\"#beans-factory-lifecycle-processor\"></a>开始和关闭回调</h5>\n<p><code>Lifecycle</code>接口中为所有具有自定义生命周期需求的对象定义了一些基本方法（例如启动或停止一些后台进程）:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Lifecycle</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span></span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">stop</span><span class=\"hljs-params\">()</span></span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isRunning</span><span class=\"hljs-params\">()</span></span>;\n}\n</code></pre>\n<p>kotlin:</p>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Lifecycle</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span></span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">stop</span><span class=\"hljs-params\">()</span></span>\n\n    <span class=\"hljs-keyword\">val</span> isRunning: <span class=\"hljs-built_in\">Boolean</span>\n}\n</code></pre>\n<p>任何Spring管理的对象都可以实现<code>Lifecycle</code> 接口。然后，当<code>ApplicationContext</code>接收到启动和停止信号时（例如，对于运行时的停止/重启场景），ApplicationContext会通知到所有上下文中包含的生命周期对象。 它通过委托 <code>LifecycleProcessor</code>完成此操作，如下面的清单所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">LifecycleProcessor</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Lifecycle</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onRefresh</span><span class=\"hljs-params\">()</span></span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onClose</span><span class=\"hljs-params\">()</span></span>;\n}\n</code></pre>\n<p>kotlin:</p>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">LifecycleProcessor</span> : <span class=\"hljs-type\">Lifecycle {</span></span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onRefresh</span><span class=\"hljs-params\">()</span></span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onClose</span><span class=\"hljs-params\">()</span></span>\n}\n</code></pre>\n<p>请注意，<code>LifecycleProcessor</code>是 <code>Lifecycle</code>接口的扩展。 它还添加了另外两种方法来响应刷新和关闭的上下文。</p>\n<p>注意，常规的<code>org.springframework.context.Lifecycle</code>接口只是为明确的开始/停止通知提供一个约束，而并不表示在上下文刷新就会自动开始。 要对特定bean的自动启动（包括启动阶段）进行细粒度控制，请考虑实现<code>org.springframework.context.SmartLifecycle</code>接口。</p>\n<p>同时，停止通知并不能保证在销毁之前出现。在正常的关闭情况下，所有的<code>Lifecycle</code>都会在销毁回调准备好之前收到停止通知，然而， 在上下文生命周期中的热刷新或者停止尝试刷新时，则只会调用销毁方法。</p>\n<p>启动和关闭调用的顺序非常重要。如果任何两个对象之间存在“依赖”关系，则依赖方在其依赖之后开始，并且在其依赖之前停止。但是，有时，直接依赖性是未知的。 您可能只知道某种类型的对象应该在另一种类型的对象之前开始。 在这些情况下， <code>SmartLifecycle</code>接口定义了另一个选项，即在其超级接口<code>Phased</code> 上定义的 <code>getPhase()</code> 方法。 以下清单显示了<code>Phased</code>接口的定义</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Phased</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getPhase</span><span class=\"hljs-params\">()</span></span>;\n}\n</code></pre>\n<p>kotlin:</p>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Phased</span> </span>{\n\n    <span class=\"hljs-keyword\">val</span> phase: <span class=\"hljs-built_in\">Int</span>\n}\n</code></pre>\n<p>以下清单显示了<code>SmartLifecycle</code>接口的定义:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">SmartLifecycle</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Lifecycle</span>, <span class=\"hljs-title\">Phased</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isAutoStartup</span><span class=\"hljs-params\">()</span></span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">stop</span><span class=\"hljs-params\">(Runnable callback)</span></span>;\n}\n</code></pre>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">SmartLifecycle</span> : <span class=\"hljs-type\">Lifecycle</span>, <span class=\"hljs-type\">Phased {</span></span>\n\n    <span class=\"hljs-keyword\">val</span> isAutoStartup: <span class=\"hljs-built_in\">Boolean</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">stop</span><span class=\"hljs-params\">(callback: <span class=\"hljs-type\">Runnable</span>)</span></span>\n}\n</code></pre>\n<p>当启动时，拥有最低phased的对象会优先启动，而当关闭时，会相反的顺序执行。因此，如果一个对象实现了<code>SmartLifecycle</code>，然后令其<code>getPhase()</code>方法返回<code>Integer.MIN_VALUE</code>值的话， 就会让该对象最早启动，而最晚销毁。显然，如果<code>getPhase()</code>方法返回了<code>Integer.MAX_VALUE</code>值则表明该对象会最晚启动，而最早销毁。 当考虑到使用phased值时，也同时需要了解正常没有实现<code>SmartLifecycle</code>的<code>Lifecycle</code>对象的默认值，这个值是0。因此，配置任意的负值都将表明将对象会在标准组件启动之前启动 ，而在标准组件销毁以后再进行销毁。</p>\n<p><code>SmartLifecycle</code>接口也定义了一个名为stop的回调方法，任何实现了<code>SmartLifecycle</code>接口的方法都必须在关闭流程完成之后调用回调中的<code>run()</code>方法。 这样做可以进行异步关闭，而<code>lifecycleProcessor</code>的默认实现<code>DefaultLifecycleProcessor</code>会等到配置的超时时间之后再调用回调。默认的每一阶段的超时时间为30秒。 您可以通过在上下文中定义名为 <code>lifecycleProcessor</code> 的bean来覆盖默认生命周期处理器实例。 如果您只想修改超时，则定义以下内容就足够了：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"lifecycleProcessor\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.context.support.DefaultLifecycleProcessor\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- timeout value in milliseconds --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"timeoutPerShutdownPhase\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"10000\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>如前所述，<code>LifecycleProcessor</code> 接口还定义了用于刷新和关闭上下文的回调方法。在关闭过程中，如果<code>stop()</code>方法已经被调用，则就会执行关闭流程。 但是如果上下文正在关闭中则不会在进行此流程，而刷新的回调会使用到<code>SmartLifecycle</code>的另一个特性。当上下文刷新完毕（所有的对象已经实例化并初始化）后， 就会调用刷新回调，默认的生命周期处理器会检查每一个<code>SmartLifecycle</code> 对象的<code>isAutoStartup()</code>方法返回的Boolean值.如果为真，对象将会自动启动而不是等待明确的上下文调用， 或者调用自己的<code>start()</code>方法(不同于上下文刷新，标准的上下文实现是不会自动启动的）。<code>phase</code>的值以及“depends-on”关系会决定对象启动和销毁的顺序。</p>\n<p><a id=\"beans-factory-shutdown\"></a></p>\n<h5><a href=\"#beans-factory-shutdown\"></a>在非Web应用中优雅地关闭Spring IoC容器</h5>\n<p>本节仅适用于非Web应用程序。 Spring的基于Web的<code>ApplicationContext</code> 实现已经具有代码，可以在关闭相关Web应用程序时正常关闭Spring IoC容器。</p>\n<p>如果开发者在非Web应用环境使用Spring IoC容器的话（例如，在桌面客户端的环境下）开发者需要在JVM上注册一个关闭的钩子，来确保在关闭Spring IoC容器的时候能够调用相关的销毁方法来释放掉引用的资源。 当然，开发者也必须正确配置和实现那些销毁回调。</p>\n<p>要注册关闭钩子，请调用<code>ConfigurableApplicationContext</code>接口上声明的<code>registerShutdownHook()</code> 方法，如以下示例所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">import</span> org.springframework.context.ConfigurableApplicationContext;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Boot</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        ConfigurableApplicationContext ctx = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">\"beans.xml\"</span>);\n\n        <span class=\"hljs-comment\">// add a shutdown hook for the above context...</span>\n        ctx.registerShutdownHook();\n\n        <span class=\"hljs-comment\">// app runs here...</span>\n\n        <span class=\"hljs-comment\">// main method exits, hook is called prior to the app shutting down...</span>\n    }\n}\n</code></pre>\n<p>kotlin:</p>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    <span class=\"hljs-keyword\">val</span> ctx = ClassPathXmlApplicationContext(<span class=\"hljs-string\">\"beans.xml\"</span>)\n\n    <span class=\"hljs-comment\">// add a shutdown hook for the above context...</span>\n    ctx.registerShutdownHook()\n\n    <span class=\"hljs-comment\">// app runs here...</span>\n\n    <span class=\"hljs-comment\">// main method exits, hook is called prior to the app shutting down...</span>\n}\n</code></pre>\n<p><a id=\"beans-factory-aware\"></a></p>\n<h4><a href=\"#beans-factory-aware\"></a>1.6.2. <code>ApplicationContextAware</code> 和 <code>BeanNameAware</code></h4>\n<p>当<code>ApplicationContext</code> 创建实现<code>org.springframework.context.ApplicationContextAware</code>接口的对象实例时，将为该实例提供对该 <code>ApplicationContext</code>.的引用。 以下清单显示了<code>ApplicationContextAware</code>接口的定义：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ApplicationContextAware</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setApplicationContext</span><span class=\"hljs-params\">(ApplicationContext applicationContext)</span> <span class=\"hljs-keyword\">throws</span> BeansException</span>;\n}\n</code></pre>\n<p>kotlin:</p>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ApplicationContextAware</span> </span>{\n\n    <span class=\"hljs-meta\">@Throws(BeansException::class)</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">setApplicationContext</span><span class=\"hljs-params\">(applicationContext: <span class=\"hljs-type\">ApplicationContext</span>)</span></span>\n}\n</code></pre>\n<p>这样bean就能够通过编程的方式创建和操作<code>ApplicationContext</code> 了。通过<code>ApplicationContext</code> 接口，或者通过将引用转换成已知的接口的子类， 例如<code>ConfigurableApplicationContext</code>就能够提供一些额外的功能。其中的一个用法就是可以通过编程的方式来获取其他的bean。 有时候这个能力非常有用。当然，Spring团队并不推荐这样做，因为这样会使代码与Spring框架耦合，同时也没有遵循IoC的风格。 <code>ApplicationContext</code> 中其它的方法可以提供一些诸如资源的访问、发布应用事件或者添加<code>MessageSource</code>之类的功能。<a href=\"#context-introduction\"><code>ApplicationContext</code>的附加功能</a>中描述了这些附加功能。</p>\n<p>从Spring 2.5开始， 自动装配是另一种获取<code>ApplicationContext</code>引用的替代方法。传统的的<code>构造函数</code> 和 <code>byType</code>的装载方式自动装配模式（如<a href=\"#beans-factory-autowire\">自动装配</a>中所述） 可以通过构造函数或setter方法的方式注入，开发者也可以通过注解注入的方式。为了更为方便，包括可以注入的字段和多个参数方法，请使用新的基于注解的自动装配功能。 这样，<code>ApplicationContext</code>将自动装配字段、构造函数参数或方法参数，如果相关的字段，构造函数或方法带有 <code>@Autowired</code>注解，则该参数需要<code>ApplicationContext</code>类型。 有关更多信息，请参阅<a href=\"#beans-autowired-annotation\">使用 <code>@Autowired</code></a>@Autowired。</p>\n<p>当<code>ApplicationContext</code>创建实现了<code>org.springframework.beans.factory.BeanNameAware</code>接口的类，那么这个类就可以针对其名字进行配置。以下清单显示了BeanNameAware接口的定义：:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">BeanNameAware</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setBeanName</span><span class=\"hljs-params\">(String name)</span> <span class=\"hljs-keyword\">throws</span> BeansException</span>;\n}\n</code></pre>\n<pre><code class=\"language-kotlin\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">BeanNameAware</span> </span>{\n\n    <span class=\"hljs-meta\">@Throws(BeansException::class)</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">setBeanName</span><span class=\"hljs-params\">(name: <span class=\"hljs-type\">String</span>)</span></span>\n}\n</code></pre>\n<p>这个回调的调用在属性配置完成之后，但是在初始化回调之前。例如<code>InitializingBean</code>, <code>afterPropertiesSet</code>方法以及自定义的初始化方法等。</p>\n<p><a id=\"aware-list\"></a></p>\n<h4><a href=\"#aware-list\"></a>1.6.3. 其他的 <code>Aware</code>接口</h4>\n<p>除了 <code>ApplicationContextAware</code>和<code>BeanNameAware</code>（前面已讨论过）之外，Spring还提供了一系列<code>Aware</code>回调接口，让bean告诉容器，它们需要一些具体的基础配置信息。。 一些重要的<code>Aware</code>接口参看下表：</p>\n<p>Table 4. Aware 接口</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>注入的依赖</th>\n<th>所对应的章节</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ApplicationContextAware</code></td>\n<td>声明 <code>ApplicationContext</code></td>\n<td><a href=\"#beans-factory-aware\"><code>ApplicationContextAware</code> 和 <code>BeanNameAware</code></a></td>\n</tr>\n<tr>\n<td><code>ApplicationEventPublisherAware</code></td>\n<td><code>ApplicationContext</code>的事件发布者</td>\n<td><a href=\"#context-introduction\"><code>ApplicationContext</code>的其他功能</a></td>\n</tr>\n<tr>\n<td><code>BeanClassLoaderAware</code></td>\n<td>用于加载bean类的类加载器</td>\n<td><a href=\"#beans-factory-class\">实例化Bean</a></td>\n</tr>\n<tr>\n<td><code>BeanFactoryAware</code></td>\n<td>声明 <code>BeanFactory</code>.</td>\n<td><a href=\"#beans-factory-aware\"><code>ApplicationContextAware</code> 和 <code>BeanNameAware</code></a></td>\n</tr>\n<tr>\n<td><code>BeanNameAware</code></td>\n<td>声明bean的名称.</td>\n<td><a href=\"#beans-factory-aware\"><code>ApplicationContextAware</code> 和 <code>BeanNameAware</code></a></td>\n</tr>\n<tr>\n<td><code>BootstrapContextAware</code></td>\n<td>容器运行的资源适配器<code>BootstrapContext</code>。通常仅在JCA-aware的 <code>ApplicationContext</code> 实例中可用</td>\n<td><a href=\"https://github.com/DocsHome/spring-docs/blob/master/pages/integration/integration.md#cci\">JCA CCI</a></td>\n</tr>\n<tr>\n<td><code>LoadTimeWeaverAware</code></td>\n<td>定义的weaver用于在加载时处理类定义.</td>\n<td><a href=\"#aop-aj-ltw\">在Spring框架中使用AspectJ进行加载时织入</a></td>\n</tr>\n<tr>\n<td><code>MessageSourceAware</code></td>\n<td>用于解析消息的已配置策略（支持参数化和国际化）</td>\n<td><a href=\"#context-introduction\"><code>ApplicationContext</code>的其他作用</a></td>\n</tr>\n<tr>\n<td><code>NotificationPublisherAware</code></td>\n<td>Spring JMX通知发布者</td>\n<td><a href=\"https://github.com/DocsHome/spring-docs/blob/master/pages/integration/integration.md#jmx-notifications\">通知</a></td>\n</tr>\n<tr>\n<td><code>ResourceLoaderAware</code></td>\n<td>配置的资源加载器</td>\n<td><a href=\"#resources\">资源</a></td>\n</tr>\n<tr>\n<td><code>ServletConfigAware</code></td>\n<td>当前<code>ServletConfig</code>容器运行。仅在Web下的Spring <code>ApplicationContext</code>中有效</td>\n<td><a href=\"https://github.com/DocsHome/spring-docs/blob/master/pages/web/web.md#mvc\">Spring MVC</a></td>\n</tr>\n<tr>\n<td><code>ServletContextAware</code></td>\n<td>容器运行的当前ServletContext。仅在Web下的Spring <code>ApplicationContext</code>中有效。</td>\n<td><a href=\"https://github.com/DocsHome/spring-docs/blob/master/pages/web/web.md#mvc\">Spring MVC</a></td>\n</tr>\n</tbody>\n</table>\n<p>请再次注意，使用这些接口会将您的代码绑定到Spring API，而不会遵循IoC原则。 因此，我们建议将它们用于需要以编程方式访问容器的基础架构bean。</p>\n",
  "link": "\\zh-cn\\docs\\springframework\\core\\container\\beans-factory-nature.html",
  "meta": {
    "title": "自定义Bean的特性",
    "keywords": "keywords: docs，jcohy-docs，spring,自定义Bean的特性",
    "description": "Spring  Framework 中文文档 》 自定义Bean的特性"
  }
}