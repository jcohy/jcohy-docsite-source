{
  "filename": "appendix.md",
  "__html": "<p><a id=\"appendix\"></a></p>\n<h2><a href=\"#appendix\"></a>9. 附录</h2>\n<p><a id=\"xsd-schemas\"></a></p>\n<h3><a href=\"#xsd-schemas\"></a>9.1. XML Schemas</h3>\n<p>附录的这一部分列出了与集成技术相关的XML Schemas。</p>\n<p><a id=\"xsd-schemas-jee\"></a></p>\n<h4><a href=\"#xsd-schemas-jee\"></a>9.1.1. <code>jee</code> Schema</h4>\n<p><code>jee</code>元素处理与Java EE（Java Enterprise Edition）配置相关的问题，例如查找JNDI对象和定义EJB引用。</p>\n<p>要使用<code>jee</code> schema中的元素，您需要在Spring XML配置文件的顶部包含以下前导码。 以下代码段中的文本引用了正确的schema，以便<code>jee</code>命名空间中的元素可供您使用：:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n    <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"hljs-attr\">xmlns:jee</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/jee\"</span> <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd\"</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- bean definitions here --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<p><a id=\"xsd-schemas-jee-jndi-lookup\"></a></p>\n<h5><a href=\"#xsd-schemas-jee-jndi-lookup\"></a><a href=\"jee:jndi-lookup/\">jee:jndi-lookup/</a> (simple)</h5>\n<p>以下示例显示如何使用JNDI在没有<code>jee</code> schema的情况下查找数据源:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"dataSource\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.jndi.JndiObjectFactoryBean\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"jndiName\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"jdbc/MyDataSource\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"userDao\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.foo.JdbcUserDao\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- Spring will do the cast automatically (as usual) --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dataSource\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"dataSource\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>以下示例显示如何使用JNDI使用<code>jee</code> schema查找数据源:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">jee:jndi-lookup</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"dataSource\"</span> <span class=\"hljs-attr\">jndi-name</span>=<span class=\"hljs-string\">\"jdbc/MyDataSource\"</span>/&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"userDao\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.foo.JdbcUserDao\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- Spring will do the cast automatically (as usual) --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dataSource\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"dataSource\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p><a id=\"xsd-schemas-jee-jndi-lookup-environment-single\"></a></p>\n<h5><a href=\"#xsd-schemas-jee-jndi-lookup-environment-single\"></a><code>&lt;jee:jndi-lookup/&gt;</code> (使用单个JNDI环境设置)</h5>\n<p>以下示例显示如何使用JNDI查找没有<code>jee</code>的环境变量 :</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"simple\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.jndi.JndiObjectFactoryBean\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"jndiName\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"jdbc/MyDataSource\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"jndiEnvironment\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">props</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">prop</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"ping\"</span>&gt;</span>pong<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">prop</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">props</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>以下示例显示如何使用JNDI使用<code>jee</code>查找环境变量:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">jee:jndi-lookup</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"simple\"</span> <span class=\"hljs-attr\">jndi-name</span>=<span class=\"hljs-string\">\"jdbc/MyDataSource\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">jee:environment</span>&gt;</span>ping=pong<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">jee:environment</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">jee:jndi-lookup</span>&gt;</span>\n</code></pre>\n<p><a id=\"xsd-schemas-jee-jndi-lookup-evironment-multiple\"></a></p>\n<h5><a href=\"#xsd-schemas-jee-jndi-lookup-evironment-multiple\"></a><code>&lt;jee:jndi-lookup/&gt;</code> (多个JNDI环境设置)</h5>\n<p>以下示例显示如何使用JNDI在没有<code>jee</code>的情况下查找多个环境变量:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"simple\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.jndi.JndiObjectFactoryBean\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"jndiName\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"jdbc/MyDataSource\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"jndiEnvironment\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">props</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">prop</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"sing\"</span>&gt;</span>song<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">prop</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">prop</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"ping\"</span>&gt;</span>pong<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">prop</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">props</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>The following example shows how to use JNDI to look up multiple environment variables with <code>jee</code>:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">jee:jndi-lookup</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"simple\"</span> <span class=\"hljs-attr\">jndi-name</span>=<span class=\"hljs-string\">\"jdbc/MyDataSource\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- newline-separated, key-value pairs for the environment (standard Properties format) --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">jee:environment</span>&gt;</span>\n        sing=song\n        ping=pong\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">jee:environment</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">jee:jndi-lookup</span>&gt;</span>\n</code></pre>\n<p><a id=\"xsd-schemas-jee-jndi-lookup-complex\"></a></p>\n<h5><a href=\"#xsd-schemas-jee-jndi-lookup-complex\"></a><code>&lt;jee:jndi-lookup/&gt;</code> (复杂)</h5>\n<p>以下示例显示如何使用JNDI使用<code>jee</code>查找多个环境变量:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"simple\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.jndi.JndiObjectFactoryBean\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"jndiName\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"jdbc/MyDataSource\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"cache\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"resourceRef\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"lookupOnStartup\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"false\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"expectedType\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"com.myapp.DefaultThing\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"proxyInterface\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"com.myapp.Thing\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>以下示例显示如何使用JNDI在没有<code>jee</code>的情况下查找数据源和许多不同的属性:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">jee:jndi-lookup</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"simple\"</span>\n        <span class=\"hljs-attr\">jndi-name</span>=<span class=\"hljs-string\">\"jdbc/MyDataSource\"</span>\n        <span class=\"hljs-attr\">cache</span>=<span class=\"hljs-string\">\"true\"</span>\n        <span class=\"hljs-attr\">resource-ref</span>=<span class=\"hljs-string\">\"true\"</span>\n        <span class=\"hljs-attr\">lookup-on-startup</span>=<span class=\"hljs-string\">\"false\"</span>\n        <span class=\"hljs-attr\">expected-type</span>=<span class=\"hljs-string\">\"com.myapp.DefaultThing\"</span>\n        <span class=\"hljs-attr\">proxy-interface</span>=<span class=\"hljs-string\">\"com.myapp.Thing\"</span>/&gt;</span>\n</code></pre>\n<p><a id=\"xsd-schemas-jee-local-slsb\"></a></p>\n<h5><a href=\"#xsd-schemas-jee-local-slsb\"></a><code>&lt;jee:local-slsb/&gt;</code> (简单)</h5>\n<p><code>&lt;jee:local-slsb/&gt;</code> 元素配置对本地EJB Stateless SessionBean的引用。</p>\n<p>以下示例显示如何在没有<code>jee</code>的情况下配置对本地EJB Stateless SessionBean的引用:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"simple\"</span>\n        <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"jndiName\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"ejb/RentalServiceBean\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"businessInterface\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"com.foo.service.RentalService\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>以下示例显示如何使用<code>jee</code>配置对本地EJB Stateless SessionBean的引用:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">jee:local-slsb</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"simpleSlsb\"</span> <span class=\"hljs-attr\">jndi-name</span>=<span class=\"hljs-string\">\"ejb/RentalServiceBean\"</span>\n        <span class=\"hljs-attr\">business-interface</span>=<span class=\"hljs-string\">\"com.foo.service.RentalService\"</span>/&gt;</span>\n</code></pre>\n<p><a id=\"xsd-schemas-jee-local-slsb-complex\"></a></p>\n<h5><a href=\"#xsd-schemas-jee-local-slsb-complex\"></a><code>&lt;jee:local-slsb/&gt;</code> (复杂)</h5>\n<p><code>&lt;jee:local-slsb/&gt;</code>元素配置对本地EJB Stateless SessionBean的引用。</p>\n<p>以下示例显示如何配置对本地EJB Stateless SessionBean的引用以及许多不带<code>jee</code>的属性:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"complexLocalEjb\"</span>\n        <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"jndiName\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"ejb/RentalServiceBean\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"businessInterface\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"com.example.service.RentalService\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"cacheHome\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"lookupHomeOnStartup\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"resourceRef\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>以下示例显示如何使用<code>jee</code>配置对本地EJB Stateless SessionBean和许多属性的引用:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">jee:local-slsb</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"complexLocalEjb\"</span>\n        <span class=\"hljs-attr\">jndi-name</span>=<span class=\"hljs-string\">\"ejb/RentalServiceBean\"</span>\n        <span class=\"hljs-attr\">business-interface</span>=<span class=\"hljs-string\">\"com.foo.service.RentalService\"</span>\n        <span class=\"hljs-attr\">cache-home</span>=<span class=\"hljs-string\">\"true\"</span>\n        <span class=\"hljs-attr\">lookup-home-on-startup</span>=<span class=\"hljs-string\">\"true\"</span>\n        <span class=\"hljs-attr\">resource-ref</span>=<span class=\"hljs-string\">\"true\"</span>&gt;</span>\n</code></pre>\n<p><a id=\"xsd-schemas-jee-remote-slsb\"></a></p>\n<h5><a href=\"#xsd-schemas-jee-remote-slsb\"></a><a href=\"jee:remote-slsb/\">jee:remote-slsb/</a></h5>\n<p><code>&lt;jee:remote-slsb/&gt;</code> 元素配置对<code>remote</code>EJB Stateless SessionBean的引用。</p>\n<p>以下示例显示如何在不使用<code>jee</code>的情况下配置对远程EJB Stateless SessionBean的引用</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"complexRemoteEjb\"</span>\n        <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.ejb.access.SimpleRemoteStatelessSessionProxyFactoryBean\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"jndiName\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"ejb/MyRemoteBean\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"businessInterface\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"com.foo.service.RentalService\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"cacheHome\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"lookupHomeOnStartup\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"resourceRef\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"homeInterface\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"com.foo.service.RentalService\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"refreshHomeOnConnectFailure\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>以下示例显示如何使用 <code>jee</code>配置对远程EJB Stateless SessionBean的引用:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">jee:remote-slsb</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"complexRemoteEjb\"</span>\n        <span class=\"hljs-attr\">jndi-name</span>=<span class=\"hljs-string\">\"ejb/MyRemoteBean\"</span>\n        <span class=\"hljs-attr\">business-interface</span>=<span class=\"hljs-string\">\"com.foo.service.RentalService\"</span>\n        <span class=\"hljs-attr\">cache-home</span>=<span class=\"hljs-string\">\"true\"</span>\n        <span class=\"hljs-attr\">lookup-home-on-startup</span>=<span class=\"hljs-string\">\"true\"</span>\n        <span class=\"hljs-attr\">resource-ref</span>=<span class=\"hljs-string\">\"true\"</span>\n        <span class=\"hljs-attr\">home-interface</span>=<span class=\"hljs-string\">\"com.foo.service.RentalService\"</span>\n        <span class=\"hljs-attr\">refresh-home-on-connect-failure</span>=<span class=\"hljs-string\">\"true\"</span>&gt;</span>\n</code></pre>\n<p><a id=\"xsd-schemas-jms\"></a></p>\n<h4><a href=\"#xsd-schemas-jms\"></a>9.1.2. <code>jms</code> Schema</h4>\n<p><code>jms</code>元素处理配置与JMS相关的bean，例如Spring的<a href=\"#jms-mdp\">Message Listener Containers</a>。 这些元素在<a href=\"#jms-namespace\">JMS命名空间支持</a>支持一节中详细介绍。 有关此支持和<code>jms</code>元素本身的完整详细信息，请参阅该章节。</p>\n<p>为了完整性，要使用<code>jms</code> schema中的元素，您需要在Spring XML配置文件的顶部包含以下前导码。 以下代码段中的文本引用了正确的schema，以便您可以使用jms命名空间中的元素:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n    <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"hljs-attr\">xmlns:jms</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/jms\"</span> <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms.xsd\"</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- bean definitions here --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<p><a id=\"xsd-schemas-context-mbe\"></a></p>\n<h4><a href=\"#xsd-schemas-context-mbe\"></a>9.1.3. 使用 <code>&lt;context:mbean-export/&gt;</code></h4>\n<p><a href=\"#jmx-context-mbeanexport\">配置基于注解的MBean导出</a>中详细介绍了此元素。</p>\n<p><a id=\"xsd-schemas-cache\"></a></p>\n<h4><a href=\"#xsd-schemas-cache\"></a>9.1.4. <code>cache</code> Schema</h4>\n<p>您可以使用<code>cache</code>元素来启用对Spring的<code>@CacheEvict</code>, <code>@CachePut</code>,和<code>@Caching</code>注释的支持。 它还支持基于声明的基于XML的缓存。 有关详细信息，请参阅<a href=\"#cache-annotation-enable\">启用缓存注解</a>和 <a href=\"#cache-declarative-xml\">基于XML的声明性缓存</a>。</p>\n<p>要使用<code>cache</code> schema中的元素，需要在Spring XML配置文件的顶部包含以下前导码。 以下代码段中的文本引用了正确的schema，以便您可以使用<code>cache</code>命名空间中的元素:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n    <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"hljs-attr\">xmlns:cache</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/cache\"</span> <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd\"</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- bean definitions here --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n",
  "link": "\\zh-cn\\docs\\springframework\\integration\\appendix.html",
  "meta": {}
}