{
  "filename": "cache.md",
  "__html": "<p><a id=\"cache\"></a></p>\n<h2><a href=\"#cache\"></a>8. 缓存抽象</h2>\n<p>从3.1版本开始,Spring框架为在现有的Spring应用程序透明地添加缓存提供了支持。 与<a href=\"data-access.html#transaction\">事务</a>支持类似，缓存抽象允许一致地使用各种缓存解决方案，而对代码的影响最小。</p>\n<p>从Spring 4.1开始，通过<a href=\"#cache-jsr-107\">JSR-107注解</a>和更多自定义选项的支持，缓存抽象得到了显着改进。</p>\n<p><a id=\"cache-strategies\"></a></p>\n<h3><a href=\"#cache-strategies\"></a>8.1. 了解缓存抽象</h3>\n<p>Cache vs Buffer</p>\n<p>术语“buffer” 和 “cache,”倾向于可互换使用。 但请注意，它们代表不同的东西。 缓冲区通常用作快速和慢速实体之间的数据的中间临时存储区。由于一方必须等待另一个影响性能的因素， 因此缓冲区会通过允许整个数据块同时移动， 而不是一小块来缓解这一问题。数据只在缓冲区中写入和读取一次。此外， 缓冲区至少对知道它的一方是可见的。</p>\n<p>另一方面，理论上的缓存是隐藏的，任何一方都不知道缓存是否发生。它还可以提高性能，而且相同的数据可以快速读取多次。</p>\n<p>对两者更多的解释是在<a href=\"https://en.wikipedia.org/wiki/Cache_(computing)#The_difference_between_buffer_and_cache\">here</a> .</p>\n<p>缓存抽象的核心是将缓存应用于Java方法，从而根据缓存中可用的信息减少执行次数。 也就是说，每次调用目标方法时，抽象都会应用一种缓存行为，该行为检查该方法是否已针对给定参数执行。 如果已执行，则返回缓存的结果，而不必执行实际方法。 如果该方法尚未执行，则执行该方法，并将结果缓存并返回给用户，以便下次调用该方法时，返回缓存的结果。 这样，对于给定的一组参数，昂贵的方法（无论是CPU还是IO）只能执行一次，并且重用结果而不必再次实际执行该方法。 缓存逻辑是透明应用的，不会对调用者造成任何干扰。</p>\n<p>此方法仅适用于保证为给定输入（或参数）返回相同输出（结果）的方法，无论它执行多少次。</p>\n<p>其他与缓存相关的操作由抽象提供，如更新缓存内容的能力或删除所有条目中的一个。如果缓存处理在应用程序过程中可以更改的数据，这些都是很有用的。</p>\n<p>就像Spring框架中的其他服务一样，缓存服务是抽象(不是缓存实现)，需要使用实际存储来存储缓存数据，也就是说，抽象使开发人员不必编写缓存逻辑，但不提供实际的存储。此抽象由<code>org.springframework.cache.Cache</code>和<code>org.springframework.cache.CacheManager</code>接口具体化。</p>\n<p>Spring提供了一些抽象实现：基于JDK <code>java.util.concurrent.ConcurrentMap</code>的缓存，<a href=\"http://ehcache.org/\">Ehcache 2.x</a>，Gemfire缓存，<a href=\"https://github.com/ben-manes/caffeine/wiki\">Caffeine</a>和符合JSR-107的缓存（例如Ehcache 3.x）。 有关插入其他缓存存储和提供程序的详细信息，请参阅<a href=\"#cache-plug\">不同的后端缓存</a>。</p>\n<p>缓存抽象没有针对多线程和多进程环境的特殊处理，因为这些功能由缓存实现处理。</p>\n<p>如果您具有多进程环境（即，部署在多个节点上的应用程序），则需要相应地配置缓存提供程序。 根据您的使用情况，几个节点上的相同数据的副本就足够了。 但是，如果在应用程序过程中更改数据，则可能需要启用其他传播机制。</p>\n<p>在代码中直接添加缓存的经典流程有 get-if-not-found-then-proceed-and-put-eventually 这里没有用到锁。同时允许多线程同步时加载同一个缓存。同样对于回收缓存也是相似。但如果有多个线程试图更新或者回收数据的话，可能会用到旧数据。某些缓存为程序为该区域的操作提供了高级功能，请参阅您正在使用的缓存提供程序的文档以获取详细信息。</p>\n<p>要使用缓存抽象，您需要注意两个方面：</p>\n<ul>\n<li>\n<p>缓存声明：确定需要缓存的方法及其策略。</p>\n</li>\n<li>\n<p>缓存配置：存储数据并从中读取数据的后端缓存。</p>\n</li>\n</ul>\n<p><a id=\"cache-annotations\"></a></p>\n<h3><a href=\"#cache-annotations\"></a>8.2. 基于注解声明缓存</h3>\n<p>对于缓存声明，Spring的缓存抽象提供了一组Java注解：</p>\n<ul>\n<li>\n<p><code>@Cacheable</code>: 触发缓存储存</p>\n</li>\n<li>\n<p><code>@CacheEvict</code>: 触发缓存回收</p>\n</li>\n<li>\n<p><code>@CachePut</code>: 在不影响方法执行的情况下更新缓存</p>\n</li>\n<li>\n<p><code>@Caching</code>: 重新在方法上应用多个缓存操作</p>\n</li>\n<li>\n<p><code>@CacheConfig</code>: 在类级别共享与缓存有关的常见设置</p>\n</li>\n</ul>\n<p><a id=\"cache-annotations-cacheable\"></a></p>\n<h4><a href=\"#cache-annotations-cacheable\"></a>8.2.1. <code>@Cacheable</code> 注解</h4>\n<p>顾名思义，<code>@Cacheable</code> 用于标定可缓存的方法 ， 即将结果存储到缓存中的方法，以便在后续调用中(使用相同的参数)，缓存的值可以在不执行方法的情况下返回。最简单的，注解声明要求带注解的方法关联缓存的名称。如下:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Cacheable</span>(<span class=\"hljs-string\">\"books\"</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Book <span class=\"hljs-title\">findBook</span><span class=\"hljs-params\">(ISBN isbn)</span> </span>{...}\n</code></pre>\n<p>在上面的代码段中，方法<code>findBook</code>与名为<code>books</code>的缓存关联。每次调用该方法时，都会检查缓存以查看是否已经执行了调用，并且不会重复。在大多数情况下，只有一个缓存被声明，注解允许指定多个名称，以便使用一个以上的缓存。在这种情况下，在执行方法之前将检查每个缓存，如果至少命中一个缓存，则将返回关联的值。如下：</p>\n<p>即使未实际执行缓存的方法，也会更新不包含该值的所有其他缓存。</p>\n<p>以下示例在 <code>findBook</code> 方法上使用<code>@Cacheable</code>:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Cacheable</span>({<span class=\"hljs-string\">\"books\"</span>, <span class=\"hljs-string\">\"isbns\"</span>})\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Book <span class=\"hljs-title\">findBook</span><span class=\"hljs-params\">(ISBN isbn)</span> </span>{...}\n</code></pre>\n<p><a id=\"cache-annotations-cacheable-default-key\"></a></p>\n<h5><a href=\"#cache-annotations-cacheable-default-key\"></a>默认的键生成</h5>\n<p>由于缓存实质上是键-值存储区，因此需要将每个缓存方法的调用转换为适合缓存访问的键。缓存抽象使用基于以下算法使用简单的键生成器-<code>KeyGenerator</code>，做到开箱即用。:</p>\n<ul>\n<li>\n<p>如果没有参数被指定，则返回<code>SimpleKey.EMPTY</code>.</p>\n</li>\n<li>\n<p>如果只有一个参数被指定，则返回实例</p>\n</li>\n<li>\n<p>如果多于一个参数被指定，则返回一个<code>SimpleKey</code>包含所有的参数</p>\n</li>\n</ul>\n<p>这种方法适用于大多数用例。只要参数有自然的键并且实现了有效的<code>hashCode()</code> 和 <code>equals()</code>方法，如果不是这样的话， 那么战略就需要改变。</p>\n<p>要提供不同的默认键生成器，您需要实现<code>org.springframework.cache.interceptor.KeyGenerator</code>接口。</p>\n<p>默认的键生成策略在Spring 4.0版本有点改变。早期的Spring版本使用的键生成策略，对于多个键参数，只考虑参数的<code>hashCode()</code> 而没有考虑到 <code>equals()</code>方法，这将导致一定的碰撞（见<a href=\"https://jira.spring.io/browse/SPR-10237\">SPR-10237</a>）。新的 <code>SimpleKeyGenerator</code> 为这种情况使用复合键。</p>\n<p>如果您希望继续使用前面的 key strategy, 则可以配置已弃用的<code>org.springframework.cache.interceptor.DefaultKeyGenerator</code>类或创建自定义的基于<code>KeyGenerator</code>的实现。</p>\n<p><a id=\"cache-annotations-cacheable-key\"></a></p>\n<h5><a href=\"#cache-annotations-cacheable-key\"></a>自定义键生成器</h5>\n<p>由于缓存是具有普遍性的，因此目标方法很可能具有不同的签名，不能简单地映射到缓存结构的顶部。当目标方法有多个参数时，问题显得更突出，其中只有一部分是适合于缓存的(其余仅由方法逻辑使用)。例如：</p>\n<pre><code>@Cacheable(&quot;books&quot;)\npublic Book findBook(ISBN isbn, boolean checkWarehouse, boolean includeUsed)\n</code></pre>\n<p>乍一看，虽然两个 <code>boolean</code>参数影响了book的发现方式，但它们对缓存没有用处。 如果两个中只有一个重要而另一个不重要怎么办？</p>\n<p>对于这种情况，<code>@Cacheable</code>注解允许用户指定<code>key</code>的生成属性。开发人员可以使用<a href=\"core.html#expressions\">SpEL</a>)来选择感兴趣的参数(或它们的嵌套属性)执行操作，甚至调用任意方法，而不必编写任何代码或实现任何接口。这是在默认生成器。</p>\n<p>以下示例是各种SpEL声明（如果您不熟悉SpEL，请阅读 <a href=\"core.html#expressions\">Spring Expression Language</a>）:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Cacheable</span>(cacheNames=<span class=\"hljs-string\">\"books\"</span>, key=<span class=\"hljs-string\">\"#isbn\"</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Book <span class=\"hljs-title\">findBook</span><span class=\"hljs-params\">(ISBN isbn, <span class=\"hljs-keyword\">boolean</span> checkWarehouse, <span class=\"hljs-keyword\">boolean</span> includeUsed)</span>\n\n@<span class=\"hljs-title\">Cacheable</span><span class=\"hljs-params\">(cacheNames=<span class=\"hljs-string\">\"books\"</span>, key=<span class=\"hljs-string\">\"#isbn.rawNumber\"</span>)</span>\n<span class=\"hljs-keyword\">public</span> Book <span class=\"hljs-title\">findBook</span><span class=\"hljs-params\">(ISBN isbn, <span class=\"hljs-keyword\">boolean</span> checkWarehouse, <span class=\"hljs-keyword\">boolean</span> includeUsed)</span>\n\n@<span class=\"hljs-title\">Cacheable</span><span class=\"hljs-params\">(cacheNames=<span class=\"hljs-string\">\"books\"</span>, key=<span class=\"hljs-string\">\"T(someType).hash(#isbn)\"</span>)</span>\n<span class=\"hljs-keyword\">public</span> Book <span class=\"hljs-title\">findBook</span><span class=\"hljs-params\">(ISBN isbn, <span class=\"hljs-keyword\">boolean</span> checkWarehouse, <span class=\"hljs-keyword\">boolean</span> includeUsed)</span>\n</span></code></pre>\n<p>上面的代码段显示了选择某个参数、某个属性甚至是任意(静态)方法是多么容易。</p>\n<p>如果负责生成键的算法太特殊，或者需要共享，则可以在操作上定义一个自定义<code>keyGenerator</code>。为此，请指定要使用的<code>KeyGenerator</code> bean实现的名称。如下:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Cacheable</span>(cacheNames=<span class=\"hljs-string\">\"books\"</span>, keyGenerator=<span class=\"hljs-string\">\"myKeyGenerator\"</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Book <span class=\"hljs-title\">findBook</span><span class=\"hljs-params\">(ISBN isbn, <span class=\"hljs-keyword\">boolean</span> checkWarehouse, <span class=\"hljs-keyword\">boolean</span> includeUsed)</span>\n</span></code></pre>\n<p><code>key</code>和 <code>keyGenerator</code>参数是互斥的， 指定两者的操作将导致异常。</p>\n<p><a id=\"cache-annotations-cacheable-default-cache-resolver\"></a></p>\n<h5><a href=\"#cache-annotations-cacheable-default-cache-resolver\"></a>默认的缓存解析</h5>\n<p>缓存抽象使用一个简单的 <code>CacheResolver</code>（可即用）它使用<code>CacheManager</code>配置检索在操作级别定义的缓存。</p>\n<p>为了提供不同默认缓存解析，需要实现<code>org.springframework.cache.interceptor.CacheResolver</code> 接口.</p>\n<p><a id=\"cache-annotations-cacheable-cache-resolver\"></a></p>\n<h5><a href=\"#cache-annotations-cacheable-cache-resolver\"></a>自定义缓存解析</h5>\n<p>默认的缓存解析适合于应用对于使用单个<code>CacheManager</code>，并且不需要复杂的解析要求。</p>\n<p>对于应用使用不同的缓存管理，可以设置<code>cacheManager</code> 使用每个操作。如以下示例所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Cacheable</span>(cacheNames=<span class=\"hljs-string\">\"books\"</span>, cacheManager=<span class=\"hljs-string\">\"anotherCacheManager\"</span>) (<span class=\"hljs-number\">1</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Book <span class=\"hljs-title\">findBook</span><span class=\"hljs-params\">(ISBN isbn)</span> </span>{...}\n</code></pre>\n<p><strong>1</strong>、Specifying <code>anotherCacheManager</code>.</p>\n<p>也可以完全以类似于 <a href=\"#cache-annotations-cacheable-key\">key generation</a>的方式替换<code>CacheResolver</code>。为每个缓存操作请求该解决方案， 使实现能够根据运行时参数实际解析要使用的缓存。以下示例显示如何指定 <code>CacheResolver</code>：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Cacheable</span>(cacheResolver=<span class=\"hljs-string\">\"runtimeCacheResolver\"</span>) (<span class=\"hljs-number\">1</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Book <span class=\"hljs-title\">findBook</span><span class=\"hljs-params\">(ISBN isbn)</span> </span>{...}\n</code></pre>\n<p><strong>1</strong>、Specifying the <code>CacheResolver</code>.</p>\n<p>Spring 4.1版本以后, 缓存注解的 <code>value</code>属性不再是强制性的了，因为无论注解的内容如何，<code>CacheResolver</code>都可以提供此特定信息。</p>\n<p>与 <code>key</code>和<code>keyGenerator</code>似，<code>cacheManager</code>和<code>cacheResolver</code>参数是互斥的，同时指定两者的操作将导致异常，因为<code>CacheResolver</code>实现忽略了自定义<code>CacheManager</code>。这可能不是你所期望的。</p>\n<p><a id=\"cache-annotations-cacheable-synchronized\"></a></p>\n<h5><a href=\"#cache-annotations-cacheable-synchronized\"></a>同步缓存</h5>\n<p>在多线程环境中，对于同一参数(通常在启动时)，可能会同时调用某些操。默认情况下，缓存抽象不会锁定任何内容，并且可能会多次计算相同的值，从而无法达到缓存的目的。</p>\n<p>对于这些特定情况，可以使用<code>sync</code>属性指示基础缓存提供程序在计算值时锁定缓存项。因此，只有一个线程将忙于计算该值，而其余的则被阻塞，直到在缓存中更新该项。以下示例显示了如何使用<code>sync</code>属性:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Cacheable</span>(cacheNames=<span class=\"hljs-string\">\"foos\"</span>, sync=<span class=\"hljs-keyword\">true</span>) (<span class=\"hljs-number\">1</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Foo <span class=\"hljs-title\">executeExpensiveOperation</span><span class=\"hljs-params\">(String id)</span> </span>{...}\n</code></pre>\n<p><strong>1</strong>、Using the <code>sync</code> attribute.</p>\n<p>这是一个可选的功能，您喜欢的缓存库可能不支持它。核心框架提供的所有<code>CacheManager</code> 实现都支持它。有关详细信息，请参阅缓存提供程序的文档，</p>\n<p><a id=\"cache-annotations-cacheable-condition\"></a></p>\n<h5><a href=\"#cache-annotations-cacheable-condition\"></a>条件缓存</h5>\n<p>有时，一个方法做缓存可能不是万能的(例如，它可能依赖于给定的参数)。缓存注解通过<code>condition</code>参数支持此类功能，它采用 <code>SpEL</code> 表达式，并将其计算为<code>true</code>或<code>false</code>。如果为<code>true</code>，则方法执行缓存。如果不是，则它的行为就像不缓存的方法一样。 每次不管缓存中的值是什么或使用了什么参数，都将执行它。例如，仅当参数名称的长度小于32时，才会缓存以下方法：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Cacheable</span>(cacheNames=<span class=\"hljs-string\">\"book\"</span>, condition=<span class=\"hljs-string\">\"#name.length() &lt; 32\"</span>) (<span class=\"hljs-number\">1</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Book <span class=\"hljs-title\">findBook</span><span class=\"hljs-params\">(String name)</span>\n</span></code></pre>\n<p><strong>1</strong>、Setting a condition on <code>@Cacheable</code>.</p>\n<p>此外， 除了<code>condition</code>参数外， 还可以使用<code>unless</code> 参数来决定不想缓存的值。与 <code>condition</code>不同，， <code>unless</code>在调用方法后计算表达式。扩展上一示例。也许我们只想缓存平装书，如下例所示:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Cacheable</span>(cacheNames=<span class=\"hljs-string\">\"book\"</span>, condition=<span class=\"hljs-string\">\"#name.length() &lt; 32\"</span>, unless=<span class=\"hljs-string\">\"#result.hardback\"</span>) (<span class=\"hljs-number\">1</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Book <span class=\"hljs-title\">findBook</span><span class=\"hljs-params\">(String name)</span>\n</span></code></pre>\n<p><strong>1</strong>、Using the <code>unless</code> attribute to block hardbacks.</p>\n<p>缓存抽象支持<code>java.util.Optional</code>，仅在其存在时将其内容用作缓存值。 <code>#result</code>总是引用业务实体而从不支持包装器，因此前面的示例可以重写如下:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Cacheable</span>(cacheNames=<span class=\"hljs-string\">\"book\"</span>, condition=<span class=\"hljs-string\">\"#name.length() &lt; 32\"</span>, unless=<span class=\"hljs-string\">\"#result?.hardback\"</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Optional&lt;Book&gt; <span class=\"hljs-title\">findBook</span><span class=\"hljs-params\">(String name)</span>\n</span></code></pre>\n<p>请注意，<code>result</code>仍然引用 <code>Book</code> 而不是<code>Optional</code>。 由于它可能为<code>null</code>，我们应该使用安全导航操作符。</p>\n<p><a id=\"cache-spel-context\"></a></p>\n<h5><a href=\"#cache-spel-context\"></a>可用的缓存SpEL表达式内容</h5>\n<p>每个<code>SpEL</code>表达式都可以用于再次指定的上下文值。除了在参数中生成外，框架还提供专用的与缓存相关的元数据(如参数名称)。下表列出了可用于<a href=\"core.html#expressions-language-ref\"><code>context</code></a>的项，以便可以使用这些项进行键和条件计算。</p>\n<p>Table 11. 缓存SpEL可用的元数据</p>\n<table>\n<thead>\n<tr>\n<th>名字</th>\n<th>位置</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>methodName</code></td>\n<td>Root object</td>\n<td>正在调用的方法的名称</td>\n<td><code>#root.methodName</code></td>\n</tr>\n<tr>\n<td><code>method</code></td>\n<td>Root object</td>\n<td>正在调用的方法</td>\n<td><code>#root.method.name</code></td>\n</tr>\n<tr>\n<td><code>target</code></td>\n<td>Root object</td>\n<td>正在调用的目标对象</td>\n<td><code>#root.target</code></td>\n</tr>\n<tr>\n<td><code>targetClass</code></td>\n<td>Root object</td>\n<td>被调用的目标的类</td>\n<td><code>#root.targetClass</code></td>\n</tr>\n<tr>\n<td><code>args</code></td>\n<td>Root object</td>\n<td>用于调用目标的参数（作为数组）</td>\n<td><code>#root.args[0]</code></td>\n</tr>\n<tr>\n<td><code>caches</code></td>\n<td>Root object</td>\n<td>执行当前方法的高速缓存的集合</td>\n<td><code>#root.caches[0].name</code></td>\n</tr>\n<tr>\n<td>Argument name</td>\n<td>Evaluation context</td>\n<td>任何方法参数的名称。 如果名称不可用（可能由于没有调试信息），参数名称也可以在<code>#a&lt;#arg&gt;</code>下获得，其中 <code>#arg</code>代表参数索引（从0开始）。</td>\n<td><code>#iban</code> or <code>#a0</code> (you can also use <code>#p0</code> or <code>#p&lt;#arg&gt;</code> notation as an alias).</td>\n</tr>\n<tr>\n<td><code>result</code></td>\n<td>Evaluation context</td>\n<td>方法调用的结果（要缓存的值）。 仅在<code>unless</code>表达式，缓存<code>cache put</code>表达式（计算<code>key</code>）或缓存<code>cache evict</code>表达式（当<code>beforeInvocation</code>为 <code>false</code>时）中可用。 对于受支持的包装器（例如<code>Optional</code>）， <code>#result</code>引用实际的对象，而不是包装器。</td>\n<td><code>#result</code></td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"cache-annotations-put\"></a></p>\n<h4><a href=\"#cache-annotations-put\"></a>8.2.2. <code>@CachePut</code> 注解</h4>\n<p>对于需要更新缓存而不影响方法执行的情况，可以使用<code>@CachePut</code>注解。即，将始终执行该方法，并将其结果放入缓存(根据<code>@CachePut</code>选项)。它支持与<code>@Cacheable</code>相同的选项，，并且应用于缓存填充，而不是方法流优化。以下示例使用<code>@CachePut</code>注解:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@CachePut</span>(cacheNames=<span class=\"hljs-string\">\"book\"</span>, key=<span class=\"hljs-string\">\"#isbn\"</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Book <span class=\"hljs-title\">updateBook</span><span class=\"hljs-params\">(ISBN isbn, BookDescriptor descriptor)</span>\n</span></code></pre>\n<p>通常强烈建议不要在同一方法上使用<code>@CachePut</code>和<code>@Cacheable</code> 注解，因为它们具有不同的行为。当后者导致使用缓存跳过方法执行时，前者强制执行以执行缓存更新。这会导致意外的行为，并且除了特定的某些情况(例如，有排除彼此的条件的注解)之外， 应避免此类声明。还要注意，此类条件不应依赖于结果对象(即<code>#result</code>变量)，因为它们是预先验证的，以确认排除。</p>\n<p><a id=\"cache-annotations-evict\"></a></p>\n<h4><a href=\"#cache-annotations-evict\"></a>8.2.3. <code>@CacheEvict</code> 注解</h4>\n<p>抽象缓存不仅允许缓存存储区的填充，而且还可以回收。此过程对于从缓存中删除陈旧或未使用的数据非常有用。相比于<code>@Cacheable</code>，注解 <code>@CacheEvict</code>执行缓存回收的区分方法，即充当从缓存中移除数据的触发器的方法。就像它的同级注解一样， <code>@CacheEvict</code>需要指定一个(或多个)受该操作影响的缓存，允许自定义缓存和键解析或指定的条件，但除此之外 ，还具有一个额外的参数<code>allEntries</code>，它指示是否需要进行缓存范围的回收，而不是只执行一项(基于键):</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@CacheEvict</span>(cacheNames=<span class=\"hljs-string\">\"books\"</span>, allEntries=<span class=\"hljs-keyword\">true</span>) (<span class=\"hljs-number\">1</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">loadBooks</span><span class=\"hljs-params\">(InputStream batch)</span>\n</span></code></pre>\n<p><strong>1</strong>、Using the <code>allEntries</code> attribute to evict all entries from the cache.</p>\n<p>当需要清除整个缓存区域时，此选项会派上用场。然后将每个条目回收(这将需要很长时间，因为它的效率很低)，所有的条目都在一个操作中被移除，如上所示。请注意，框架将忽略此方案中指定的任何键，因为它不适用(整个缓存被回收的不仅仅是一个条目)。</p>\n<p>您还可以通过使用<code>beforeInvocation</code>属性指示回收是在（默认）之后还是在方法执行之前进行的。前者提供与注解的其余部分相同的语义：一旦方法成功完成，就会执行缓存上的操作（在本例中为回收）。如果方法未执行（因为它可能被缓存）或抛出异常，则不会发生回收。 后者（<code>beforeInvocation=true</code>）导致回收始终在调用方法之前发生。 这在回收不需要与方法结果相关联的情况下非常有用。</p>\n<p>必须注意的是，<code>void</code>方法可以与<code>@CacheEvict</code>一起使用-因为这些方法充当触发器,所以返回值被忽略(因为它们不与缓存交互)。<code>@Cacheable</code> 将数据添加/更新到缓存中的情况并非如此，因此需要重新请求结果。</p>\n<p><a id=\"cache-annotations-caching\"></a></p>\n<h4><a href=\"#cache-annotations-caching\"></a>8.2.4. <code>@Caching</code> 注解</h4>\n<p>在某些情况下，需要指定相同类型的多个注解(例如<code>@CacheEvict</code>或<code>@CachePut</code>)。例如，因为条件或键表达式在不同的缓存之间是不同的。 <code>@Caching</code>允许在同一方法上使用多个嵌套的<code>@Cacheable</code>、<code>@CachePut</code>和<code>@CacheEvict</code>。以下示例使用两个<code>@CacheEvict</code>注解:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Caching</span>(evict = { <span class=\"hljs-meta\">@CacheEvict</span>(<span class=\"hljs-string\">\"primary\"</span>), <span class=\"hljs-meta\">@CacheEvict</span>(cacheNames=<span class=\"hljs-string\">\"secondary\"</span>, key=<span class=\"hljs-string\">\"#p0\"</span>) })\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Book <span class=\"hljs-title\">importBooks</span><span class=\"hljs-params\">(String deposit, Date date)</span>\n</span></code></pre>\n<p><a id=\"cache-annotations-config\"></a></p>\n<h4><a href=\"#cache-annotations-config\"></a>8.2.5. <code>@CacheConfig</code> 注解</h4>\n<p>到目前为止，我们已经看到缓存操作提供了许多自定义选项，您可以为每个操作设置这些选项。但是，如果这些自定义选项适用于该类的所有操作，则可以对其进行配置。例如，指定要用于该类的每个缓存操作的缓存的名称可以由单个类级别定义替换。这就是<code>@CacheConfig</code>发挥作用的地方。 以下示例使用<code>@CacheConfig</code>设置缓存的名称:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@CacheConfig</span>(<span class=\"hljs-string\">\"books\"</span>) (<span class=\"hljs-number\">1</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BookRepositoryImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">BookRepository</span> </span>{\n\n    <span class=\"hljs-meta\">@Cacheable</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Book <span class=\"hljs-title\">findBook</span><span class=\"hljs-params\">(ISBN isbn)</span> </span>{...}\n}\n</code></pre>\n<p><strong>1</strong>、Using <code>@CacheConfig</code> to set the name of the cache.</p>\n<p><code>@CacheConfig</code>是一个类级注解，它允许共享缓存名称、自定义<code>KeyGenerator</code>、自定义<code>CacheManager</code>以及最终的自定义<code>CacheResolver</code>。将此注解放在类上不会打开任何缓存操作。</p>\n<p>操作级自定义项将始终覆盖在<code>@CacheConfig</code>上设置的自定义项。因此，每个缓存操作都提供了三个级别的自定义项:</p>\n<ul>\n<li>\n<p>全局配置, 适用于<code>CacheManager</code>, <code>KeyGenerator</code>.</p>\n</li>\n<li>\n<p>在类级别, 使用@ <code>@CacheConfig</code>.</p>\n</li>\n<li>\n<p>在操作级别</p>\n</li>\n</ul>\n<p><a id=\"cache-annotation-enable\"></a></p>\n<h4><a href=\"#cache-annotation-enable\"></a>8.2.6. 启用缓存注解</h4>\n<p>值得注意的是，即使声明缓存注解不会自动触发它们的操作(如Spring中的许多项)，该功能也必须以声明方式启用(这意味着如果您怀疑缓存是罪魁祸首，您可以通过只删除一个配置行而不是代码中的所有注解)。</p>\n<p>要启用缓存注解，请将注解<code>@EnableCaching</code>添加到您的<code>@Configuration</code>类之一上:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-meta\">@EnableCaching</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppConfig</span> </span>{\n}\n</code></pre>\n<p>在XML的配置中，可以使用<code>cache:annotation-driven</code> 元素:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n    <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"hljs-attr\">xmlns:cache</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/cache\"</span>\n    <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd\"</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">cache:annotation-driven</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<p><code>cache:annotation-driven</code> 元素和<code>@EnableCaching</code> 注解允许指定各种选项，从而影响通过AOP将缓存行为添加到应用程序的方式。此配置与<a href=\"data-access.html#tx-annotation-driven-settings\"><code>@Transactional</code></a>很类似：</p>\n<p>处理缓存注释的默认建议模式是<code>proxy</code>，它允许仅通过代理拦截调用。 同一类中的本地调用不能以这种方式截获。 对于更高级的拦截模式，请考虑结合编译时或加载时编织切换到<code>aspectj</code>模式。</p>\n<p>有关实现<code>CachingConfigurer</code>所需的高级自定义（使用Java配置）的更多详细信息，请参阅<a href=\"https://docs.spring.io/spring-framework/docs/5.1.3.RELEASE/javadoc-api/org/springframework/cache/annotation/CachingConfigurer.html\">javadoc</a>。</p>\n<p>Table 12. Cache 注解设置</p>\n<table>\n<thead>\n<tr>\n<th>XML属性</th>\n<th>注解属性</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>cache-manager</code></td>\n<td>N/A (see the <a href=\"https://docs.spring.io/spring-framework/docs/5.1.3.RELEASE/javadoc-api/org/springframework/cache/annotation/CachingConfigurer.html\"><code>CachingConfigurer</code></a> javadoc)</td>\n<td>要使用的缓存管理器的名称。 使用此缓存管理器（或未设置的<code>cacheManager</code>）在后台初始化默认的<code>CacheResolver</code>。 要获得更精细的缓存fine-grained 管理，请考虑设置'cache-resolver'属性。</td>\n<td><code>cacheManager</code></td>\n</tr>\n<tr>\n<td><code>cache-resolver</code></td>\n<td>N/A (see the <a href=\"https://docs.spring.io/spring-framework/docs/5.1.3.RELEASE/javadoc-api/org/springframework/cache/annotation/CachingConfigurer.html\"><code>CachingConfigurer</code></a> javadoc)</td>\n<td>A <code>SimpleCacheResolver</code> using the configured <code>cacheManager</code>.</td>\n<td>用于解析后端缓存的CacheResolver的bean名称。 此属性不是必需的，只需要指定为'cache-manager'属性的替代。</td>\n</tr>\n<tr>\n<td><code>key-generator</code></td>\n<td>N/A (see the <a href=\"https://docs.spring.io/spring-framework/docs/5.1.3.RELEASE/javadoc-api/org/springframework/cache/annotation/CachingConfigurer.html\"><code>CachingConfigurer</code></a> javadoc)</td>\n<td><code>SimpleKeyGenerator</code></td>\n<td>要使用的自定义键生成器的名称。</td>\n</tr>\n<tr>\n<td><code>error-handler</code></td>\n<td>N/A (see the <a href=\"https://docs.spring.io/spring-framework/docs/5.1.3.RELEASE/javadoc-api/org/springframework/cache/annotation/CachingConfigurer.html\"><code>CachingConfigurer</code></a> javadoc)</td>\n<td><code>SimpleCacheErrorHandler</code></td>\n<td>要使用的自定义缓存错误处理程序的名称。 默认情况下，在缓存相关操作期间抛出的任何异常都会在客户端返回。</td>\n</tr>\n<tr>\n<td><code>mode</code></td>\n<td><code>mode</code></td>\n<td><code>proxy</code></td>\n<td>默认模式（<code>proxy</code>）使用Spring的AOP框架处理要注释的注释bean（遵循代理语义，如前所述，仅适用于通过代理进入的方法调用）。 替代模式（<code>aspectj</code>）用Spring的AspectJ缓存方面编织受影响的类，修改目标类字节代码以应用于任何类型的方法调用。 AspectJ编织需要在类路径中使用<code>spring-aspects.jar</code>以及启用加载时织入（或编译时织入）。 （有关如何设置加载时织入的详细信息，请参阅<a href=\"core.html#aop-aj-ltw-spring\">Spring configuration</a>。）</td>\n</tr>\n<tr>\n<td><code>proxy-target-class</code></td>\n<td><code>proxyTargetClass</code></td>\n<td><code>false</code></td>\n<td>仅适用于代理模式。 控制为使用<code>@Cacheable</code>或<code>@CacheEvict</code>注解注释的类创建哪种类型的高速缓存代理。 如果<code>proxy-target-class</code> 属性设置为<code>true</code>，则创建基于类的代理。 如果<code>proxy-target-class</code>为<code>false</code>或者省略了该属性，则会创建基于标准JDK接口的代理。 （有关不同代理类型的详细检查，请参阅 <a href=\"core.html#aop-proxying\">代理机制</a></td>\n</tr>\n<tr>\n<td><code>order</code></td>\n<td><code>order</code></td>\n<td>Ordered.LOWEST_PRECEDENCE</td>\n<td>定义应用于使用<code>@Cacheable</code>或<code>@CacheEvict</code>注解的bean的缓存通知的顺序。 （有关与订购AOP advice相关的规则的更多信息，请参阅<a href=\"core.html#aop-ataspectj-advice-ordering\">Advice Ordering</a>。）没有指定的排序意味着AOP子系统确定advice的顺序。</td>\n</tr>\n</tbody>\n</table>\n<p><code>&lt;cache:annotation-driven/&gt;</code>在 bean 中定义的应用程序上下文中只查找<code>@Cacheable/@CachePut/@CacheEvict/@Caching</code>。这意味着，如果你在<code>WebApplicationContext</code> 中为<code>DispatcherServlet</code>放置<code>&lt;cache:annotation-driven/&gt;</code>，他只会检查控制器中的bean，而不是你的服务。有关更多信息，请参阅<a href=\"web.html#mvc-servlet\">MVC部分</a>。</p>\n<p>方法可见和缓存注解</p>\n<p>使用代理时，应仅将缓存注解应用于具有公共可见性的方法。如果使用这些注解对受保护的、私有的或包可见的方法进行注解，虽然不会引发任何错误，但注解的方法不会显示已配置的缓存设置。 如果需要在更改字节码本身时对非公共方法进行注解，请考虑使用AspectJ(请参阅本节的其余部分)</p>\n<p>Spring建议您只用<code>@Cache*</code>注解来注解具体类(还有具体类的方法)，而不是注解接口。当然，您可以将<code>@Cache*</code>注解放在接口(或接口方法)上，但这只适用于您在使用基于代理时所期望的效果。Java注解不是从接口继承的这一事实意味着， 如果您使用的是基于类的代理(<code>proxy-target-class=&quot;true&quot;</code>)或weaving-based aspect(<code>mode=&quot;aspectj&quot;</code>)，则缓存设置无法被代理和编织基础结构，并且对象不会被包装在缓存代理中，这将是绝对糟糕的。</p>\n<p>在代理模式(默认情况下), 仅截获通过代理进入的外部方法调用。这意味着，实际上，self-invocation在目标对象中调用目标对象的另一种方法时，在运行时不会导致实际的缓存，即使调用的方法标记为<code>@Cacheable</code>，考虑使用<code>aspectj</code>模式也是这种情况，此外，代理必须完全初始化以提供预期的行为，因此您不应依赖于初始化代码中的此功能，即<code>@PostConstruct</code>。</p>\n<p><a id=\"cache-annotation-stereotype\"></a></p>\n<h4><a href=\"#cache-annotation-stereotype\"></a>8.2.7. 使用自定义的注解</h4>\n<p>自定义的注解和AspectJ</p>\n<p>此功能仅在基于方法的情况下工作，但可以通过使用AspectJ的额外工作来启用。</p>\n<p><code>spring-aspects</code> 模块定义了标准注解的切面。如果你定义自己的注解，则还需要为这些注解定义一个切面。请检查<code>AnnotationCacheAspect</code> 以查看示例：</p>\n<p>缓存抽象允许您使用自己的注解来识别触发缓存储存或回收的方法。这在模板机制中非常方便，因为它消除了重复缓存注解声明的需要(在指定键或条件时尤其有用)，或者在您的代码库中不允许使用外部导入(<code>org.springframework</code>)。与<a href=\"core.html#beans-stereotype-annotations\">stereotype</a>注解的其余部分类似， <code>@Cacheable</code>, <code>@CachePut</code>、<code>@CacheEvict</code>, 和 <code>@CacheConfig</code>可以用作<a href=\"core.html#beans-meta-annotations\">meta-annotations</a>。这是可以注解其他注解的注解（就是元注解）。在下面的示例中，我们使用自己的自定义注释替换常见的<code>@Cacheable</code>声明：:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Retention</span>(RetentionPolicy.RUNTIME)\n<span class=\"hljs-meta\">@Target</span>({ElementType.METHOD})\n<span class=\"hljs-meta\">@Cacheable</span>(cacheNames=<span class=\"hljs-string\">\"books\"</span>, key=<span class=\"hljs-string\">\"#isbn\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> SlowService {\n}\n</code></pre>\n<p>在前面的示例中，我们定义了自己的<code>SlowService</code>注释，该注释本身使用<code>@Cacheable</code>进行注释。 现在我们可以替换以下代码:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Cacheable</span>(cacheNames=<span class=\"hljs-string\">\"books\"</span>, key=<span class=\"hljs-string\">\"#isbn\"</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Book <span class=\"hljs-title\">findBook</span><span class=\"hljs-params\">(ISBN isbn, <span class=\"hljs-keyword\">boolean</span> checkWarehouse, <span class=\"hljs-keyword\">boolean</span> includeUsed)</span>\n</span></code></pre>\n<p>以下示例显示了自定义注释，我们可以使用它来替换前面的代码：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@SlowService</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Book <span class=\"hljs-title\">findBook</span><span class=\"hljs-params\">(ISBN isbn, <span class=\"hljs-keyword\">boolean</span> checkWarehouse, <span class=\"hljs-keyword\">boolean</span> includeUsed)</span>\n</span></code></pre>\n<p>尽管<code>@SlowService</code>不是Spring注释，但容器会在运行时自动获取其声明并理解其含义。 请注意，<a href=\"#cache-annotation-enable\">如前所述</a>，需要启用注释驱动的行为。</p>\n<p><a id=\"cache-jsr-107\"></a></p>\n<h3><a href=\"#cache-jsr-107\"></a>8.3. JCache (JSR-107) 注解</h3>\n<p>自Spring框架4.1以来，缓存抽象完全支持JCache标准注释: <code>@CacheResult</code>, <code>@CachePut</code>, <code>@CacheRemove</code>, he <code>@CacheRemoveAll</code> 以及 <code>@CacheDefaults</code>, <code>@CacheKey</code>, 和 <code>@CacheValue</code>。这些注解可以正确地使用，而无需将缓存存储迁移到JSR-107。内部实现使用Spring的缓存抽象， 并提供默认的<code>CacheResolver</code>和<code>KeyGenerator</code>实现，它们符合规范。换言之，如果您已经在使用Spring的缓存抽象，则可以切换到这些标准注解，而无需更改缓存存储(或配置)。</p>\n<p><a id=\"cache-jsr-107-summary\"></a></p>\n<h4><a href=\"#cache-jsr-107-summary\"></a>8.3.1. 特性总结</h4>\n<p>对于熟悉Spring缓存注解的用户，下表描述了Spring注解和JSR-107对应项之间的主要区别：</p>\n<p>Table 13. Spring vs. JSR-107 缓存注解</p>\n<table>\n<thead>\n<tr>\n<th>Spring</th>\n<th>JSR-107</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@Cacheable</code></td>\n<td><code>@CacheResult</code></td>\n<td>非常相似。<code>@CacheResult</code>可以缓存特定的异常并强制执行该方法，而不管缓存的内容如何。</td>\n</tr>\n<tr>\n<td><code>@CachePut</code></td>\n<td><code>@CachePut</code></td>\n<td>当Spring使用方法调用的结果更新缓存时，JCache要求将其作为使用<code>@CacheValue</code>注释的参数传递。 由于这种差异，JCache允许在实际方法调用之前或之后更新缓存。</td>\n</tr>\n<tr>\n<td><code>@CacheEvict</code></td>\n<td><code>@CacheRemove</code></td>\n<td>非常相似。 当方法调用导致异常时，<code>@CacheRemove</code>支持条件回收。</td>\n</tr>\n<tr>\n<td><code>@CacheEvict(allEntries=true)</code></td>\n<td><code>@CacheRemoveAll</code></td>\n<td>See <code>@CacheRemove</code>.</td>\n</tr>\n<tr>\n<td><code>@CacheConfig</code></td>\n<td><code>@CacheDefaults</code></td>\n<td>允许您以类似的方式配置相同的概念。</td>\n</tr>\n</tbody>\n</table>\n<p>JCache具有与Spring的<code>CacheResolver</code>接口相同的<code>javax.cache.annotation.CacheResolver</code>，但JCache只支持单个缓存。默认情况下，一个简单的实现是根据注解上声明的名称检索要使用的缓存。 应该注意的是，如果在注解中没有指定缓存名称，则会自动生成默认值，参看<code>@CacheResult#cacheName()</code> 。</p>\n<p><code>CacheResolver</code>实例由<code>CacheResolverFactory</code>检索。 可以为每个缓存操作自定义工厂，如以下示例所示:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@CacheResult</span>(cacheNames=<span class=\"hljs-string\">\"books\"</span>, cacheResolverFactory=MyCacheResolverFactory<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>) (1)\n<span class=\"hljs-title\">public</span> <span class=\"hljs-title\">Book</span> <span class=\"hljs-title\">findBook</span>(<span class=\"hljs-title\">ISBN</span> <span class=\"hljs-title\">isbn</span>)\n</span></code></pre>\n<p><strong>1</strong>、为此操作自定义工厂。</p>\n<p>对于所有引用的类，Spring尝试查找具有给定类型的bean。如果存在多个匹配项，则会创建一个新实例，并且可以使用常规bean生命周期回调(如依赖项注入)。</p>\n<p>键由<code>javax.cache.annotation.CacheKeyGenerator</code>方法生成，其作用与Spring的<code>KeyGenerator</code>一样。默认情况下，所有方法参数都将被考虑，除非至少有一个参数是用<code>@CacheKey</code>注解。这类似于Spring的<a href=\"#cache-annotations-cacheable-key\">自定义键生成声明</a>。例如，同样的操作，一个使用Spring的抽象，另一个用JCache：:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Cacheable</span>(cacheNames=<span class=\"hljs-string\">\"books\"</span>, key=<span class=\"hljs-string\">\"#isbn\"</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Book <span class=\"hljs-title\">findBook</span><span class=\"hljs-params\">(ISBN isbn, <span class=\"hljs-keyword\">boolean</span> checkWarehouse, <span class=\"hljs-keyword\">boolean</span> includeUsed)</span>\n\n@<span class=\"hljs-title\">CacheResult</span><span class=\"hljs-params\">(cacheName=<span class=\"hljs-string\">\"books\"</span>)</span>\n<span class=\"hljs-keyword\">public</span> Book <span class=\"hljs-title\">findBook</span><span class=\"hljs-params\">(@CacheKey ISBN isbn, <span class=\"hljs-keyword\">boolean</span> checkWarehouse, <span class=\"hljs-keyword\">boolean</span> includeUsed)</span>\n</span></code></pre>\n<p>您还可以在操作上指定<code>CacheKeyResolver</code>，类似于指定<code>CacheResolverFactory</code>的方式。</p>\n<p>JCache可以管理由注解的方法引发的异常。这可以防止缓存的更新，但也可以将异常缓存为失败的指示器，而不是再次调用该方法。让我们假设，如果ISBN的结构错误，则抛出<code>InvalidIsbnNotFoundException</code>。这是一个永久性的失败，没有book可以用这样的参数检索。下面抛出缓存异常，以便使用相同的无效ISBN进行进一步调用，直接抛出缓存的异常，而不是再次调用该方法。:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@CacheResult</span>(cacheName=<span class=\"hljs-string\">\"books\"</span>, exceptionCacheName=<span class=\"hljs-string\">\"failures\"</span>\n            cachedExceptions = InvalidIsbnNotFoundException<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)\n<span class=\"hljs-title\">public</span> <span class=\"hljs-title\">Book</span> <span class=\"hljs-title\">findBook</span>(<span class=\"hljs-title\">ISBN</span> <span class=\"hljs-title\">isbn</span>)\n</span></code></pre>\n<p><a id=\"enabling-jsr-107-support\"></a></p>\n<h4><a href=\"#enabling-jsr-107-support\"></a>8.3.2. 启用 JSR-107 支持</h4>\n<p>除了Spring的声明性注解支持之外，不需要做任何具体的工作来启用JSR-107支持。如果<code>spring-context-support</code>模块已经在类加载路径中，那么使用<code>@EnableCaching</code>或者<code>cache:annotation-driven</code>元素都将自动启用JCache支持。</p>\n<p>根据您的使用情况，选择使用与否由你选择。您甚至可以使用JSR-107 API和其他使用Spring自己的注解来混合使用服务。但是，请注意，如果这些服务影响到相同的缓存，则应使用一致的和相同的键生成实现。</p>\n<p><a id=\"cache-declarative-xml\"></a></p>\n<h3><a href=\"#cache-declarative-xml\"></a>8.4. 声明式基于XML的缓存</h3>\n<p>如果注解不是可选的(不能访问源代码或没有外部码)，则可以使用XML进行声明性缓存。因此，您不必对缓存方法进行注解，而是在外部指定目标方法和缓存指令(类似于声明性事务管理<a href=\"data-access.html#transaction-declarative-first-example\">advice</a>)。上一节中的示例可以转换为以下示例:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-comment\">&lt;!-- the service we want to make cacheable --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"bookService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"x.y.service.DefaultBookService\"</span>/&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- cache definitions --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">cache:advice</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"cacheAdvice\"</span> <span class=\"hljs-attr\">cache-manager</span>=<span class=\"hljs-string\">\"cacheManager\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">cache:caching</span> <span class=\"hljs-attr\">cache</span>=<span class=\"hljs-string\">\"books\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">cache:cacheable</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"findBook\"</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"#isbn\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">cache:cache-evict</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"loadBooks\"</span> <span class=\"hljs-attr\">all-entries</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">cache:caching</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">cache:advice</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- apply the cacheable behavior to all BookService interfaces --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:config</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:advisor</span> <span class=\"hljs-attr\">advice-ref</span>=<span class=\"hljs-string\">\"cacheAdvice\"</span> <span class=\"hljs-attr\">pointcut</span>=<span class=\"hljs-string\">\"execution(* x.y.BookService.*(..))\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aop:config</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- cache manager definition omitted --&gt;</span>\n</code></pre>\n<p>在上面的配置中，<code>bookService</code>是可以缓存的。缓存语义被保存在<code>cache:advice</code>定义中，指定了方法<code>findBooks</code>用于将数据放入缓存，而方法<code>loadBooks</code>用于回收数据。这两个定义都可以使用 <code>books</code>缓存。</p>\n<p><code>aop:config</code>定义使用AspectJ切点表达式将缓存通知应用于程序中的适当的切点(更多信息参看<a href=\"core.html#aop\">Spring面向切面编程</a>)。在前面的示例中，将考虑<code>BookService</code>中的所有方法，并将缓存advice应用于它们。</p>\n<p>声明性XML缓存支持所有基于注解的模型，因此在两者之间转换应该相当简单。在同一个应用程序中可以进一步使用它们。基于XML的方法不会设计到目标代码，但是编写它非常冗长无聊。在处理具有针对缓存的重载方法的类时，确定正确的方法确实需要额外工作，因为该方法参数不能很好的被辨别。在这些情况下， 在这些情况下，您可以使用AspectJ切入点来挑选目标方法并应用适当的缓存功能。然而，通过XML，更容易应用在包/组/接口范围上的缓存(再次因为AspectJ切点)和创建类似模板的定义(如我们在上面的例子中通过缓存定义目标的<code>cache:definitions</code>属性。</p>\n<p><a id=\"cache-store-configuration\"></a></p>\n<h3><a href=\"#cache-store-configuration\"></a>8.5. 配置缓存的存储</h3>\n<p>缓存抽象集成了多个存储功能，可以开箱即用。为了使用他们，您需要声明一个适当的<code>CacheManager</code> （一个控制和管理<code>Cache</code>实例的实体，可用于检索这些实例以进行存储）。</p>\n<p><a id=\"cache-store-configuration-jdk\"></a></p>\n<h4><a href=\"#cache-store-configuration-jdk\"></a>8.5.1. 基于JDK<code>ConcurrentMap</code> 缓存</h4>\n<p>基于JDK的<code>Cache</code>实现位于<code>org.springframework.cache.concurrent</code>包下。它允许您使用<code>ConcurrentHashMap</code>作为支持<code>Cache</code>存储。 以下示例显示如何配置两个缓存:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-comment\">&lt;!-- simple cache manager --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"cacheManager\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.cache.support.SimpleCacheManager\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"caches\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">set</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean\"</span> <span class=\"hljs-attr\">p:name</span>=<span class=\"hljs-string\">\"default\"</span>/&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean\"</span> <span class=\"hljs-attr\">p:name</span>=<span class=\"hljs-string\">\"books\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">set</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>上面的代码段使用<code>SimpleCacheManager</code>为名为<code>default</code>和<code>books</code>的两个嵌套的<code>ConcurrentMapCache</code>实例创建<code>CacheManager</code>。请注意，这些名称是为每个缓存直接配置的。</p>\n<p>由于缓存是由应用程序创建的，因此它被绑定到其生命周期，使其适合于基本用例、测试或简单应用程序。高速缓存的规模很大，而且速度非常快，但它不提供任何管理或持久性功能，也没有任何回收的程序。</p>\n<p><a id=\"cache-store-configuration-ehcache\"></a></p>\n<h4><a href=\"#cache-store-configuration-ehcache\"></a>8.5.2. 基于Ehcache的缓存</h4>\n<p>Ehcache 3.x完全与JSR-107兼容， 不需要专门的支持。</p>\n<p>Ehcache 2.x实现在<code>org.springframework.cache.ehcache</code>包中。同样地，要使用它，需要简单地声明适当的 <code>CacheManager</code>。以下示例显示了如何执行此操作：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"cacheManager\"</span>\n        <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.cache.ehcache.EhCacheCacheManager\"</span> <span class=\"hljs-attr\">p:cache-manager-ref</span>=<span class=\"hljs-string\">\"ehcache\"</span>/&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- EhCache library setup --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"ehcache\"</span>\n        <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.cache.ehcache.EhCacheManagerFactoryBean\"</span> <span class=\"hljs-attr\">p:config-location</span>=<span class=\"hljs-string\">\"ehcache.xml\"</span>/&gt;</span>\n</code></pre>\n<p>此设置引导Spring IoC内部的ehcache库（通过<code>ehcache</code> bean），然后将其连接到专用的<code>CacheManager</code>实现中。 请注意，从<code>ehcache.xml</code>读取整个特定于<code>ehcache</code>的配置。</p>\n<p><a id=\"cache-store-configuration-caffeine\"></a></p>\n<h4><a href=\"#cache-store-configuration-caffeine\"></a>8.5.3. Caffeine Cache</h4>\n<p>Caffeine是Java 8重写了Guava的缓存，他的实现在<code>org.springframework.cache.caffeine</code>包中，并且提供了访问Caffeine特性的方法。</p>\n<p>以下示例配置一个按需创建缓存的<code>CacheManager</code>:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"cacheManager\"</span>\n        <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.cache.caffeine.CaffeineCacheManager\"</span>/&gt;</span>\n</code></pre>\n<p>还可以提供缓存以显式使用，在这种情况下，只有manager才能提供这些内容。以下示例显示了如何执行此操作:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"cacheManager\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.cache.caffeine.CaffeineCacheManager\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"caches\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">set</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>default<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>books<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">set</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>Caffeine <code>CacheManager</code>也支持自定义的<code>Caffeine</code> 和 <code>CacheLoader</code>. 查阅 <a href=\"https://github.com/ben-manes/caffeine/wiki\">Caffeine 文档</a>了解更多信息。</p>\n<p><a id=\"cache-store-configuration-gemfire\"></a></p>\n<h4><a href=\"#cache-store-configuration-gemfire\"></a>8.5.4. 基于GemFire的缓存</h4>\n<p>GemFire是一个面向内存/磁盘存储的全局的备份数据库，它具有可伸缩的、可持续的、可扩展的、具有内置模式订阅通知功能等等特性。全局复制的数据库。并提供全功能的边缘缓存。 有关如何将GemFire用作<code>CacheManager</code>（以及更多）的更多信息，请参阅<a href=\"https://docs.spring.io/spring-gemfire/docs/current/reference/html/\">Spring Data GemFire参考文档</a>。</p>\n<p><a id=\"cache-store-configuration-jsr107\"></a></p>\n<h4><a href=\"#cache-store-configuration-jsr107\"></a>8.5.5. JSR-107 缓存</h4>\n<p>JSR-107兼容的缓存也可用于Spring的缓存抽象。JCache实现在<code>org.springframework.cache.jcache</code> 包中.</p>\n<p>同样，要使用它，需要简单地声明适当的<code>CacheManager</code>。简单示例如下:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"cacheManager\"</span>\n        <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.cache.jcache.JCacheCacheManager\"</span>\n        <span class=\"hljs-attr\">p:cache-manager-ref</span>=<span class=\"hljs-string\">\"jCacheManager\"</span>/&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- JSR-107 cache manager setup  --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"jCacheManager\"</span> <span class=\"hljs-attr\">...</span>/&gt;</span>\n</code></pre>\n<p><a id=\"cache-store-configuration-noop\"></a></p>\n<h4><a href=\"#cache-store-configuration-noop\"></a>8.5.6.处理没有后端的缓存</h4>\n<p>有时在切换环境或进行测试时， 可能会只声明缓存， 而没有配置实际的后端缓存。由于这是一个无效的配置， 在运行时将引发异常， 因为缓存基础结构无法找到合适的存储。在这样的情况下， 与其删除缓存声明(这可能会很繁琐)， 你不如声明一个简单的，不执行缓存的虚拟缓存， 即强制每次执行缓存的方法。以下示例显示了如何执行此操作:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"cacheManager\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.cache.support.CompositeCacheManager\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"cacheManagers\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">list</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">\"jdkCache\"</span>/&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">\"gemfireCache\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">list</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"fallbackToNoOpCache\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p><code>CompositeCacheManager</code>使用了多个<code>CacheManager</code>实例。此外，通过<code>fallbackToNoOpCache</code> 标志，添加了一个没有op的缓存，为所有的定义没有被配置的缓存管理器处理。 也就是说，在<code>jdkCache</code>或<code>gemfireCache</code>(上面配置)中找不到的每个缓存定义都将由无op缓存来处理，并且不会存储目标方法的信息而方法每次都会被执行（就是多配置成可执行的无缓存操作）。</p>\n<p><a id=\"cache-plug\"></a></p>\n<h3><a href=\"#cache-plug\"></a>8.6. 各种各样的后端缓存插件</h3>\n<p>显然，有大量的缓存产品可以用作后端存储。要将它们集成，需要提供<code>CacheManager</code>和<code>Cache</code>实现，因为不幸的是没有可用的标准，我们可以改用它。这听起来可能比使用它更难，因为在实践中，类往往是简单的<a href=\"https://en.wikipedia.org/wiki/Adapter_pattern\">adapters</a>，它将缓存抽象框架映射到存储API的顶部，就像<code>ehcache</code>类可以显示的那样。 大多数<code>CacheManager</code>类可以使用<code>org.springframework.cache.support</code>包中的类，如<code>AbstractCacheManager</code>，它负责处理样板代码，只留下实际的映射即可结束工作。我们希望，提供与Spring集成的库能够及时填补这一小的配置缺口。</p>\n<p><a id=\"cache-specific-config\"></a></p>\n<h3><a href=\"#cache-specific-config\"></a>8.7. 我可以如何设置TTL/TTI/Eviction policy/XXX特性?</h3>\n<p>直接通过缓存提供程序。 缓存抽象是抽象，而不是缓存实现。 您正在使用的解决方案可能支持不同的数据策略和不同的拓扑结构，而其他解决方案不会这样做(例如，JDK <code>ConcurrentHashMap</code> - 暴露在缓存抽象中将是无用的，因为没有后端支持)。应该通过后端缓存（配置时）或通过其本机API直接控制此类功能。</p>\n",
  "link": "\\zh-cn\\docs\\springframework\\integration\\cache.html",
  "meta": {}
}