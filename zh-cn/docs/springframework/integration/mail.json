{
  "filename": "mail.md",
  "__html": "<p><a id=\"mail\"></a></p>\n<h2><a href=\"#mail\"></a>6. 电子邮件</h2>\n<p>本节介绍如何使用Spring Framework发送电子邮件。</p>\n<p>依赖库</p>\n<p>以下JAR需要位于应用程序的类路径中才能使用Spring Framework的电子邮件库:</p>\n<ul>\n<li>The <a href=\"https://javaee.github.io/javamail/\">JavaMail</a> library</li>\n</ul>\n<p>该库可在Web上免费获取 - 例如，在Maven Central中以<code>com.sun.mail:javax.mail</code>的形式提供。 .</p>\n<p>Spring提供了一个发送电子邮件的高级抽象层，它向用户屏蔽了底层邮件系统的一些细节，同时代表客户端负责底层的资源处理。</p>\n<p><code>org.springframework.mail</code>包是Spring Framework电子邮件支持的主要包，它包括了发送电子邮件的主要接口 <code>MailSender</code>，和值对象<code>SimpleMailMessage</code>，它封装了简单邮件的属性如<code>from</code> 和 <code>to</code>（以及许多其他邮件）。 此程序包还包含已检查异常的层次结构，这些异常提供较低级别邮件系统异常的更高抽象级别，根异常为<code>MailException</code>。 有关富邮件异常层次结构的详细信息，请参阅<a href=\"https://docs.spring.io/spring-framework/docs/5.1.3.RELEASE/javadoc-api/org/springframework/mail/MailException.html\">javadoc</a>。</p>\n<p>为了使用JavaMail中的一些特色，比如MIME类型的信件，Spring提供了<code>MailSender</code>的一个子接口（内嵌了的)，即<code>org.springframework.mail.javamail.JavaMailSender</code>。<code>JavaMailSender</code>还提供了一个回调接口<code>org.springframework.mail.javamail.MimeMessagePreparator</code>，用于准备<code>MimeMessage</code>。</p>\n<p><a id=\"mail-usage\"></a></p>\n<h3><a href=\"#mail-usage\"></a>6.1. Usage</h3>\n<p>假设我们有一个名为<code>OrderManager</code>的业务接口，如下例所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">OrderManager</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">placeOrder</span><span class=\"hljs-params\">(Order order)</span></span>;\n\n}\n</code></pre>\n<p>进一步假设我们要求说明需要生成带有订单号的电子邮件消息并将其发送给下达相关订单的客户。</p>\n<p><a id=\"mail-usage-simple\"></a></p>\n<h4><a href=\"#mail-usage-simple\"></a>6.1.1. <code>MailSender</code>与 <code>SimpleMailMessage</code>的基本用法</h4>\n<p>以下示例显示了当有人下订单时如何使用<code>MailSender</code>和<code>SimpleMailMessage</code>发送电子邮件:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">import</span> org.springframework.mail.MailException;\n<span class=\"hljs-keyword\">import</span> org.springframework.mail.MailSender;\n<span class=\"hljs-keyword\">import</span> org.springframework.mail.SimpleMailMessage;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SimpleOrderManager</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">OrderManager</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> MailSender mailSender;\n    <span class=\"hljs-keyword\">private</span> SimpleMailMessage templateMessage;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setMailSender</span><span class=\"hljs-params\">(MailSender mailSender)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.mailSender = mailSender;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setTemplateMessage</span><span class=\"hljs-params\">(SimpleMailMessage templateMessage)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.templateMessage = templateMessage;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">placeOrder</span><span class=\"hljs-params\">(Order order)</span> </span>{\n\n        <span class=\"hljs-comment\">// Do the business calculations...</span>\n\n        <span class=\"hljs-comment\">// Call the collaborators to persist the order...</span>\n\n        <span class=\"hljs-comment\">// Create a thread safe \"copy\" of the template message and customize it</span>\n        SimpleMailMessage msg = <span class=\"hljs-keyword\">new</span> SimpleMailMessage(<span class=\"hljs-keyword\">this</span>.templateMessage);\n        msg.setTo(order.getCustomer().getEmailAddress());\n        msg.setText(\n            <span class=\"hljs-string\">\"Dear \"</span> + order.getCustomer().getFirstName()\n                + order.getCustomer().getLastName()\n                + <span class=\"hljs-string\">\", thank you for placing order. Your order number is \"</span>\n                + order.getOrderNumber());\n        <span class=\"hljs-keyword\">try</span>{\n            <span class=\"hljs-keyword\">this</span>.mailSender.send(msg);\n        }\n        <span class=\"hljs-keyword\">catch</span> (MailException ex) {\n            <span class=\"hljs-comment\">// simply log it and go on...</span>\n            System.err.println(ex.getMessage());\n        }\n    }\n\n}\n</code></pre>\n<p>以下示例显示了上述代码的bean定义：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"mailSender\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.mail.javamail.JavaMailSenderImpl\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"host\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"mail.mycompany.com\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- this is a template message that we can pre-load with default state --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"templateMessage\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.mail.SimpleMailMessage\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"from\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"[email protected]\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"subject\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"Your order\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"orderManager\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.mycompany.businessapp.support.SimpleOrderManager\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"mailSender\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"mailSender\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"templateMessage\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"templateMessage\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p><a id=\"mail-usage-mime\"></a></p>\n<h4><a href=\"#mail-usage-mime\"></a>6.1.2. 使用 <code>JavaMailSender</code> 和 <code>MimeMessagePreparator</code></h4>\n<p>本节描述了使用<code>MimeMessagePreparator</code>回调接口的<code>OrderManager</code>的另一个实现。 在以下示例中，<code>mailSender</code>属性的类型为<code>JavaMailSender</code>，以便我们能够使用JavaMail <code>MimeMessage</code>类：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">import</span> javax.mail.Message;\n<span class=\"hljs-keyword\">import</span> javax.mail.MessagingException;\n<span class=\"hljs-keyword\">import</span> javax.mail.internet.InternetAddress;\n<span class=\"hljs-keyword\">import</span> javax.mail.internet.MimeMessage;\n\n<span class=\"hljs-keyword\">import</span> javax.mail.internet.MimeMessage;\n<span class=\"hljs-keyword\">import</span> org.springframework.mail.MailException;\n<span class=\"hljs-keyword\">import</span> org.springframework.mail.javamail.JavaMailSender;\n<span class=\"hljs-keyword\">import</span> org.springframework.mail.javamail.MimeMessagePreparator;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SimpleOrderManager</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">OrderManager</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> JavaMailSender mailSender;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setMailSender</span><span class=\"hljs-params\">(JavaMailSender mailSender)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.mailSender = mailSender;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">placeOrder</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Order order)</span> </span>{\n        <span class=\"hljs-comment\">// Do the business calculations...</span>\n        <span class=\"hljs-comment\">// Call the collaborators to persist the order...</span>\n\n        MimeMessagePreparator preparator = <span class=\"hljs-keyword\">new</span> MimeMessagePreparator() {\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">prepare</span><span class=\"hljs-params\">(MimeMessage mimeMessage)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n                mimeMessage.setRecipient(Message.RecipientType.TO,\n                        <span class=\"hljs-keyword\">new</span> InternetAddress(order.getCustomer().getEmailAddress()));\n                mimeMessage.setFrom(<span class=\"hljs-keyword\">new</span> InternetAddress(<span class=\"hljs-string\">\"[email protected]\"</span>));\n                mimeMessage.setText(<span class=\"hljs-string\">\"Dear \"</span> + order.getCustomer().getFirstName() + <span class=\"hljs-string\">\" \"</span> +\n                        order.getCustomer().getLastName() + <span class=\"hljs-string\">\", thanks for your order. \"</span> +\n                        <span class=\"hljs-string\">\"Your order number is \"</span> + order.getOrderNumber() + <span class=\"hljs-string\">\".\"</span>);\n            }\n        };\n\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-keyword\">this</span>.mailSender.send(preparator);\n        }\n        <span class=\"hljs-keyword\">catch</span> (MailException ex) {\n            <span class=\"hljs-comment\">// simply log it and go on...</span>\n            System.err.println(ex.getMessage());\n        }\n    }\n\n}\n</code></pre>\n<p>以上的邮件代码是一个横切关注点，能被完美地重构为<a href=\"core.html#aop\">自定义Spring AOP切面</a>的候选者，这样它就可以在目标对象<code>OrderManager</code>的一些合适的连接点（joinpoint)中被执行了。</p>\n<p>Spring Framework的邮件支持附带标准的JavaMail实现。 有关更多信息，请参阅相关的javadoc。</p>\n<p><a id=\"mail-javamail-mime\"></a></p>\n<h3><a href=\"#mail-javamail-mime\"></a>6.2. 使用JavaMail <code>MimeMessageHelper</code></h3>\n<p><code>org.springframework.mail.javamail.MimeMessageHelper</code>是处理JavaMail邮件时比较顺手组件之一。它可以让你摆脱繁复的JavaMail API。通过使用<code>MimeMessageHelper</code>，创建一个<code>MimeMessage</code>实例将非常容易。如下例所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// of course you would use DI in any real-world cases</span>\nJavaMailSenderImpl sender = <span class=\"hljs-keyword\">new</span> JavaMailSenderImpl();\nsender.setHost(<span class=\"hljs-string\">\"mail.host.com\"</span>);\n\nMimeMessage message = sender.createMimeMessage();\nMimeMessageHelper helper = <span class=\"hljs-keyword\">new</span> MimeMessageHelper(message);\nhelper.setTo(<span class=\"hljs-string\">\"[email protected]\"</span>);\nhelper.setText(<span class=\"hljs-string\">\"Thank you for ordering!\"</span>);\n\nsender.send(message);\n</code></pre>\n<p><a id=\"mail-javamail-mime-attachments-attachment\"></a></p>\n<h4><a href=\"#mail-javamail-mime-attachments\"></a>6.2.1. 发送附件和内部资源</h4>\n<p>Multipart email 允许添加附件和内嵌资源(inline resources)。内嵌资源可能是你在信件中希望使用的图像或样式表，但是又不想把它们作为附件。</p>\n<p><a id=\"mail-javamail-mime-attachments-attachment\"></a></p>\n<h5><a href=\"#mail-javamail-mime-attachments-attachment\"></a>附件</h5>\n<p>以下示例显示如何使用<code>MimeMessageHelper</code>发送包含单个JPEG图像附件的电子邮件:</p>\n<pre><code class=\"language-java\">JavaMailSenderImpl sender = <span class=\"hljs-keyword\">new</span> JavaMailSenderImpl();\nsender.setHost(<span class=\"hljs-string\">\"mail.host.com\"</span>);\n\nMimeMessage message = sender.createMimeMessage();\n\n<span class=\"hljs-comment\">// use the true flag to indicate you need a multipart message</span>\nMimeMessageHelper helper = <span class=\"hljs-keyword\">new</span> MimeMessageHelper(message, <span class=\"hljs-keyword\">true</span>);\nhelper.setTo(<span class=\"hljs-string\">\"[email protected]\"</span>);\n\nhelper.setText(<span class=\"hljs-string\">\"Check out this image!\"</span>);\n\n<span class=\"hljs-comment\">// let's attach the infamous windows Sample file (this time copied to c:/)</span>\nFileSystemResource file = <span class=\"hljs-keyword\">new</span> FileSystemResource(<span class=\"hljs-keyword\">new</span> File(<span class=\"hljs-string\">\"c:/Sample.jpg\"</span>));\nhelper.addAttachment(<span class=\"hljs-string\">\"CoolImage.jpg\"</span>, file);\n\nsender.send(message);\n</code></pre>\n<p><a id=\"mail-javamail-mime-attachments-inline\"></a></p>\n<h5><a href=\"#mail-javamail-mime-attachments-inline\"></a>内嵌资源</h5>\n<p>以下示例显示如何使用<code>MimeMessageHelper</code>发送带有内嵌图像的电子邮件：</p>\n<pre><code class=\"language-java\">JavaMailSenderImpl sender = <span class=\"hljs-keyword\">new</span> JavaMailSenderImpl();\nsender.setHost(<span class=\"hljs-string\">\"mail.host.com\"</span>);\n\nMimeMessage message = sender.createMimeMessage();\n\n<span class=\"hljs-comment\">// use the true flag to indicate you need a multipart message</span>\nMimeMessageHelper helper = <span class=\"hljs-keyword\">new</span> MimeMessageHelper(message, <span class=\"hljs-keyword\">true</span>);\nhelper.setTo(<span class=\"hljs-string\">\"[email protected]\"</span>);\n\n<span class=\"hljs-comment\">// use the true flag to indicate the text included is HTML</span>\nhelper.setText(<span class=\"hljs-string\">\"&lt;html&gt;&lt;body&gt;&lt;img src='cid:identifier1234'&gt;&lt;/body&gt;&lt;/html&gt;\"</span>, <span class=\"hljs-keyword\">true</span>);\n\n<span class=\"hljs-comment\">// let's include the infamous windows Sample file (this time copied to c:/)</span>\nFileSystemResource res = <span class=\"hljs-keyword\">new</span> FileSystemResource(<span class=\"hljs-keyword\">new</span> File(<span class=\"hljs-string\">\"c:/Sample.jpg\"</span>));\nhelper.addInline(<span class=\"hljs-string\">\"identifier1234\"</span>, res);\n\nsender.send(message);\n</code></pre>\n<p>通过使用指定的 <code>Content-ID</code>（上例中的<code>identifier1234</code>）将内联资源添加到<code>MimeMessage</code>。 添加文本和资源的顺序非常重要。 请务必先添加文本，然后再添加资源。 如果你反过来这样做，它就行不通。</p>\n<p><a id=\"mail-templates\"></a></p>\n<h4><a href=\"#mail-templates\"></a>6.2.2. 使用模板库创建电子邮件内容</h4>\n<p>在之前的代码示例中，所有邮件的内容都是显式定义的，并通过调用<code>message.setText(..)</code>来设置邮件内容。 这种做法针对简单的情况或在上述的例子中没什么问题。因为在这里只是为了向你展示基础API。</p>\n<p>但是，在典型的企业应用程序中，开发人员通常不会使用之前显示的方法创建电子邮件内容，原因如下:</p>\n<ul>\n<li>\n<p>使用Java代码创建基于HTML的电子邮件内容非常繁琐且容易出错。</p>\n</li>\n<li>\n<p>显示逻辑和业务逻辑之间没有明确的区别。</p>\n</li>\n<li>\n<p>更改电子邮件内容的显示结构需要编写Java代码，重新编译，重新部署等。</p>\n</li>\n</ul>\n<p>通常，解决这些问题的方法是使用模板库（例如FreeMarker）来定义电子邮件内容的显示结构。这使您的代码仅负责创建要在电子邮件模板中呈现的数据并发送电子邮件。 当您的电子邮件内容变得相当复杂时，这绝对是一种最佳实践，而且，使用Spring Framework的FreeMarker支持类，它变得非常容易。</p>\n",
  "link": "\\zh-cn\\docs\\springframework\\integration\\mail.html",
  "meta": {}
}