{
  "filename": "VariableHandles.md",
  "__html": "<h2>变量句柄</h2>\n<p>变量句柄是一个变量或一组变量的引用，包括静态域，非静态域，数组元素和堆外数据结构中的组成部分等。变量句柄的含义类似于已有的方法句柄。变量句柄由 J ava 类 java.lang.invoke.VarHandle 来表示。可以使用类 j ava.lang.invoke.MethodHandles.Looku p 中的静态工厂方法来创建 VarHandle 对 象。通过变量句柄，可以在变量上进行各种操作。这些操作称为访问模式。不同的访问模式尤其在内存排序上的不同语义。目前一共有 31 种 访问模式，而每种访问模式都 在 VarHandle 中 有对应的方法。这些方法可以对变量进行读取、写入、原子更新、数值原子更新和比特位原子操作等。VarHandle 还 可以用来访问数组中的单个元素，以及把 byte[]数组 和 ByteBuffer 当成是不同原始类型的数组来访问。</p>\n<p>在如下代码 中，我们创建了访问 HandleTarget 类中的域 count 的变量句柄，并在其上进行读取操作。</p>\n<pre><code class=\"language-java\">public class HandleTarget { \n    public int count = 1; \n} \npublic class VarHandleTest {\n    private HandleTarget handleTarget = new HandleTarget(); \n    private VarHandle varHandle; \n    @Before \n    public void setUp() throws Exception { \n        this.handleTarget = new HandleTarget(); \n        this.varHandle = MethodHandles \n            .lookup() \n            .findVarHandle(HandleTarget.class, \"count\", int.class); \n    } \n    @Test \n    public void testGet() throws Exception { \n        assertEquals(1, this.varHandle.get(this.handleTarget)); \n        assertEquals(1, this.varHandle.getVolatile(this.handleTarget)); \n        assertEquals(1, this.varHandle.getOpaque(this.handleTarget)); \n        assertEquals(1, this.varHandle.getAcquire(this.handleTarget)); \n    } \n}\n</code></pre>\n<p id=\"改进方法句柄\">\n<p>类 java.lang.invoke.MethodHandles 增加了更多的静态方法来创建不同类型的方法句柄。</p>\n<ul>\n<li>arrayConstructor：创建指定类型的数组。</li>\n<li>arrayLength：获取指定类型的数组的大小。</li>\n<li>varHandleInvoker 和 varHandleExactInvoker：调用 VarHandle 中的访问模式方法。</li>\n<li>zero：返回一个类型的默认值。</li>\n<li>empty：返 回 MethodType 的返回值类型的默认值。</li>\n<li>loop、countedLoop、iteratedLoop、whileLoop 和 doWhileLoop：创建不同类型的循环，包括 * for 循环、while 循环 和 do-while 循环。</li>\n<li>tryFinally：把对方法句柄的调用封装在 try-finally 语句中。</li>\n<li>在 下面代码中，我们使用 iteratedLoop 来创建一个遍历 S tring 类型迭代器的方法句柄，并计算所有字符串的长度的总和。</li>\n</ul>\n<pre><code class=\"language-java\">public class IteratedLoopTest { \n    static int body(final int sum, final String value) { \n        return sum + value.length(); \n    } \n    @Test \n    public void testIteratedLoop() throws Throwable { \n        final MethodHandle iterator = MethodHandles.constant( \n            Iterator.class, \n            List.of(\"a\", \"bc\", \"def\").iterator()); \n        final MethodHandle init = MethodHandles.zero(int.class); \n        final MethodHandle body = MethodHandles \n            .lookup() \n            .findStatic( \n                IteratedLoopTest.class, \n                \"body\", \n                MethodType.methodType( \n                    int.class, \n                    int.class, \n                    String.class)); \n        final MethodHandle iteratedLoop = MethodHandles \n            .iteratedLoop(iterator, init, body); \n        assertEquals(6, iteratedLoop.invoke()); \n    } \n}\n</code></pre>\n",
  "link": "\\zh-cn\\docs\\java\\java9\\VariableHandles.html",
  "meta": {
    "title": "变量句柄",
    "keywords": "docs,jcohy-docs,java9,变量句柄",
    "description": "变量句柄"
  }
}