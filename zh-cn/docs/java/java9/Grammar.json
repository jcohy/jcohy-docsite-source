{
  "filename": "Grammar.md",
  "__html": "<h2>语法改进</h2>\n<h3>接口的私有方法</h3>\n<h4>官方Feature</h4>\n<p>213: Milling Project Coin</p>\n<blockquote>\n<p>Java 8中规定接口中的方法除了抽象方法之外，还可以定义静态方法和默认的方法。一定程度上，扩展了接口的功能，此时的接口更像是一个抽象类。\n在Java 9中，接口更加的灵活和强大，连方法的访问权限修饰符都可以声明为private的了，此时方法将不会成为你对外暴露的API的一部分。</p>\n</blockquote>\n<p id=\"钻石操作符\">\n<h3>钻石操作符</h3>\n<blockquote>\n<p>我们将能够与匿名实现类共同使用钻石操作符（diamond operator）\n在java 8中如下的操作是会报错的：</p>\n</blockquote>\n<pre><code class=\"language-java\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> List&lt;String&gt; <span class=\"hljs-title\">flattenStrings</span><span class=\"hljs-params\">(List&lt;String&gt;... lists)</span> </span>{ \n        Set&lt;String&gt; set = <span class=\"hljs-keyword\">new</span> HashSet&lt;&gt;(){}; \n        <span class=\"hljs-keyword\">for</span>(List&lt;String&gt; list : lists) { \n            set.addAll(list); \n        } \n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;(set); \n    }\n</code></pre>\n<p>编译报错信息：'&lt;&gt;' cannot be used with anonymous classes</p>\n<p id=\"try语句\">\n<h3>try语句</h3>\n<p>在java 8 之前，我们习惯于这样处理资源的关闭：</p>\n<pre><code class=\"language-java\">InputStreamReader reader = <span class=\"hljs-keyword\">null</span>; \n<span class=\"hljs-keyword\">try</span>{ \n    reader = <span class=\"hljs-keyword\">new</span> InputStreamReader(System.in); \n    <span class=\"hljs-comment\">//流的操作 </span>\n    reader.read(); \n}<span class=\"hljs-keyword\">catch</span> (IOException e){ \n    e.printStackTrace(); \n}<span class=\"hljs-keyword\">finally</span>{ \n    <span class=\"hljs-keyword\">if</span>(reader != <span class=\"hljs-keyword\">null</span>){\n        <span class=\"hljs-keyword\">try</span> {\n            reader.close(); \n        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n            e.printStackTrace(); \n        } \n    } \n}\n</code></pre>\n<p>java 8 中，可以实现资源的自动关闭，但是要求执行后必须关闭的所有资源必须在try子句中初始化，否则编译不通过。如下例所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">try</span>(InputStreamReader reader = <span class=\"hljs-keyword\">new</span> InputStreamReader(System.in)){\n\n}<span class=\"hljs-keyword\">catch</span> (IOException e){\n    e.printStackTrace(); \n}\n</code></pre>\n<p>java 9 中，用资源语句编写try将更容易，我们可以在try子句中使用已经初始化过的资源，此时的资源是final的：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test3</span><span class=\"hljs-params\">()</span></span>{\n    <span class=\"hljs-comment\">//jdk 1.9</span>\n    InputStreamReader reader = <span class=\"hljs-keyword\">new</span>  InputStreamReader(System.in);\n    OutputStreamWriter writer = <span class=\"hljs-keyword\">new</span> OutputStreamWriter(System.out);\n    <span class=\"hljs-keyword\">try</span>(reader;writer){\n        <span class=\"hljs-comment\">//reader是final的，不可再被赋值</span>\n        <span class=\"hljs-comment\">//reader = null;</span>\n    }<span class=\"hljs-keyword\">catch</span> (IOException e){\n        e.printStackTrace();\n    }\n}\n</code></pre>\n<p id=\"UnderScope\">\n<h3>UnderScope（下划线使用的限制）</h3>\n<p>在java 8 中，标识符可以独立使用“_”来命名：</p>\n<pre><code class=\"language-java\">String _ = <span class=\"hljs-string\">\"hello\"</span>; \nSystem.out.println(_);\n</code></pre>\n<p>但是，在java 9 中规定“_”不再可以单独命名标识符了，如果使用，会报错</p>\n",
  "link": "\\zh-cn\\docs\\java\\java9\\Grammar.html",
  "meta": {
    "title": "语法改进",
    "keywords": "docs,jcohy-docs,java9,语法改进",
    "description": "语法改进"
  }
}