{
  "filename": "Switch.md",
  "__html": "<h2>Switch 表达式扩展</h2>\n<p>传统的switch声明语句(switch statement)在使用中有一些问题：</p>\n<ul>\n<li>匹配是自上而下的，如果忘记写break, 后面的case语句不论匹配与否都会执行；</li>\n<li>所有的case语句共用一个块范围，在不同的case语句定义的变量名不能重复；</li>\n<li>不能在一个case里写多个执行结果一致的条件；</li>\n<li>整个switch不能作为表达式返回值；</li>\n</ul>\n<p>Java 12将会对switch声明语句进行扩展，可将其作为增强版的 switch 语句或称为 &quot;switch 表达式&quot;来写出更加简化的代码。</p>\n<h3>预览语言</h3>\n<p>Switch 表达式也是作为预览语言功能的第一个语言改动被引入新版 Java 中来的，预览语言功能的想法是在 2018 年初被引入 Java 中的，本质上讲，这是一种引入新特性的测试版的方法。通过这种方式，能够根据用户反馈进行升级、更改，在极端情况下，如果没有被很好的接纳，则可以完全删除该功能。预览功能的关键在于它们没有被包含在 Java SE 规范中。</p>\n<h3>使用</h3>\n<p>扩展的 switch 语句，不仅可以作为语句（statement），还可以作为表达式（expression），并且两种写法都可以使用传统的 switch 语法，或者使用简化的“case L -&gt;”模式匹配语法作用于不同范围并控制执行流。这些更改将简化日常编码工作，并为 switch 中的模式匹配（JEP 305）做好准备。</p>\n<ul>\n<li>使用 Java 12 中 Switch 表达式的写法，省去了 break 语句，避免了因少写 break 而出错。同时将多个 case 合并到一行，显得简洁、清晰也更加优雅的表达逻辑分支，其具体写法就是将之前的 case 语句表成了：case L -&gt;，即如果条件匹配 case L，则执行标签右侧的代码 ，同时标签右侧的代码段只能是表达式、代码块或throw 语句。</li>\n<li>为了保持兼容性，case 条件语句中依然可以使用字符 : ，这时 fall-through 规则依然有效的，即不能省略原有的 break 语句，但是同一个 Switch 结构里不能混用 -&gt; 和 : ，否则会有编译错误。并且简化后的 Switch 代码块中定义的局部变量，其作用域就限制在代码块中，而不是蔓延到整Switch 结构，也不用根据不同的判断条件来给变量赋值。\njava12之前</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SwitchTest</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        <span class=\"hljs-keyword\">int</span> numberOfLetters;\n        Fruit fruit = Fruit.APPLE;\n        <span class=\"hljs-keyword\">switch</span> (fruit) {\n            <span class=\"hljs-keyword\">case</span> PEAR:\n                numberOfLetters = <span class=\"hljs-number\">4</span>;\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">case</span> APPLE:\n            <span class=\"hljs-keyword\">case</span> GRAPE:\n            <span class=\"hljs-keyword\">case</span> MANGO:\n                numberOfLetters = <span class=\"hljs-number\">5</span>;\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">case</span> ORANGE:\n            <span class=\"hljs-keyword\">case</span> PAPAYA:\n                numberOfLetters = <span class=\"hljs-number\">6</span>;\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">default</span>:\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalStateException(<span class=\"hljs-string\">\"No Such Fruit:\"</span> + fruit);\n        }\n        System.out.println(numberOfLetters);\n    }\n}\n\n<span class=\"hljs-keyword\">enum</span> Fruit {\n\tPEAR, APPLE, GRAPE, MANGO, ORANGE, PAPAYA;\n}\n</code></pre>\n<p>如果有编码经验，你一定知道，switch 语句如果漏写了一个 break，那么逻辑往往就跑偏了，这种方式既繁琐，又容易出错。如果换成 switch 表达式，Pattern Matching 机制能够自然地保证只有单一路径会被执行：\njava12</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SwitchTest1</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        Fruit fruit = Fruit.GRAPE;\n        <span class=\"hljs-keyword\">switch</span>(fruit){\n            <span class=\"hljs-keyword\">case</span> PEAR -&gt; System.out.println(<span class=\"hljs-number\">4</span>);\n            <span class=\"hljs-keyword\">case</span> APPLE,MANGO,GRAPE -&gt; System.out.println(<span class=\"hljs-number\">5</span>);\n            <span class=\"hljs-keyword\">case</span> ORANGE,PAPAYA -&gt; System.out.println(<span class=\"hljs-number\">6</span>);\n            <span class=\"hljs-keyword\">default</span> -&gt; <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalStateException(<span class=\"hljs-string\">\"No Such Fruit:\"</span> + fruit);\n        };\n    }\n}\n</code></pre>\n<p>更进一步，下面的表达式，为我们提供了优雅地表达特定场合计算逻辑的方式：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SwitchTest2</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        Fruit fruit = Fruit.GRAPE;\n        <span class=\"hljs-keyword\">int</span> numberOfLetters = <span class=\"hljs-keyword\">switch</span>(fruit){\n            <span class=\"hljs-keyword\">case</span> PEAR -&gt; <span class=\"hljs-number\">4</span>;\n            <span class=\"hljs-keyword\">case</span> APPLE,MANGO,GRAPE -&gt; <span class=\"hljs-number\">5</span>;\n            <span class=\"hljs-keyword\">case</span> ORANGE,PAPAYA -&gt; <span class=\"hljs-number\">6</span>;\n            <span class=\"hljs-keyword\">default</span> -&gt; <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalStateException(<span class=\"hljs-string\">\"No Such Fruit:\"</span> + fruit);\n        };\n        System.out.println(numberOfLetters);\n    }\n}\n</code></pre>\n<p>举例2\njava12之前：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SwitchTest</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        Week day = Week.FRIDAY;\n        <span class=\"hljs-keyword\">switch</span> (day) {\n            <span class=\"hljs-keyword\">case</span> MONDAY:\n            <span class=\"hljs-keyword\">case</span> FRIDAY:\n            <span class=\"hljs-keyword\">case</span> SUNDAY:\n                System.out.println(<span class=\"hljs-number\">6</span>);\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">case</span> TUESDAY:\n                System.out.println(<span class=\"hljs-number\">7</span>);\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">case</span> THURSDAY:\n            <span class=\"hljs-keyword\">case</span> SATURDAY:\n                System.out.println(<span class=\"hljs-number\">8</span>);\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">case</span> WEDNESDAY:\n                System.out.println(<span class=\"hljs-number\">9</span>);\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">default</span>:\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalStateException(<span class=\"hljs-string\">\"What day is today?\"</span> + day);\n        }\n    }\n}\n<span class=\"hljs-keyword\">enum</span> Week {\n    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY;\n}\n</code></pre>\n<p>java12</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SwitchTest1</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        Week day = Week.FRIDAY;\n        <span class=\"hljs-keyword\">switch</span> (day) {\n            <span class=\"hljs-keyword\">case</span> MONDAY,FRIDAY, SUNDAY -&gt; System.out.println(<span class=\"hljs-number\">6</span>);\n            <span class=\"hljs-keyword\">case</span> TUESDAY -&gt; System.out.println(<span class=\"hljs-number\">7</span>);\n            <span class=\"hljs-keyword\">case</span> THURSDAY, SATURDAY -&gt; System.out.println(<span class=\"hljs-number\">8</span>);\n            <span class=\"hljs-keyword\">case</span> WEDNESDAY -&gt; System.out.println(<span class=\"hljs-number\">9</span>);\n            <span class=\"hljs-keyword\">default</span> -&gt; <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalStateException(<span class=\"hljs-string\">\"What day is today?\"</span> + day);\n        }\n    }\n}\n</code></pre>\n<p>java12更近一步</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SwitchTest2</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        Week day = Week.FRIDAY;\n        <span class=\"hljs-keyword\">int</span> numLetters = <span class=\"hljs-keyword\">switch</span> (day) {\n            <span class=\"hljs-keyword\">case</span> MONDAY, FRIDAY, SUNDAY -&gt; <span class=\"hljs-number\">6</span>;\n            <span class=\"hljs-keyword\">case</span> TUESDAY -&gt; <span class=\"hljs-number\">7</span>;\n            <span class=\"hljs-keyword\">case</span> THURSDAY, SATURDAY -&gt; <span class=\"hljs-number\">8</span>;\n            <span class=\"hljs-keyword\">case</span> WEDNESDAY -&gt; <span class=\"hljs-number\">9</span>;\n            <span class=\"hljs-keyword\">default</span> -&gt; <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalStateException(<span class=\"hljs-string\">\"What day is today?\"</span> + day);\n        };\n    }\n}\n</code></pre>\n",
  "link": "\\zh-cn\\docs\\java\\java12\\Switch.html",
  "meta": {
    "title": "Switch 表达式扩展",
    "keywords": "docs,jcohy-docs,Switch，java12",
    "description": "Switch 表达式扩展"
  }
}