{
  "filename": "jvm.md",
  "__html": "<h2>引入 JVM 常量 API</h2>\n<p>Java 12 中引入 JVM 常量 API，用来更容易地对关键类文件 (key class-file) 和运行时构件（artefact）的名义描述(nominal description) 进行建模，特别是对那些从常量池加载的常量，这是一项非常技术性的变化，能够以更简单、标准的方式处理可加载常量。\n具体来说就是java.base模块新增了java.lang.constant包（而非 java.lang.invoke.constant ）。包中定义了一系列基于值的符号引用（JVMS 5.1）类型，它们能够描述每种可加载常量。</p>\n<blockquote>\n<p>官方api链接地址：\n<a href=\"http://cr.openjdk.java.net/~iris/se/12/latestSpec/api/java.base/java/lang/constant/pack\">http://cr.openjdk.java.net/~iris/se/12/latestSpec/api/java.base/java/lang/constant/pack</a>\nage-summary.html</p>\n</blockquote>\n<blockquote>\n<p>Java SE &gt; Java SE Specifications &gt; Java Virtual Machine Specification下的第5章：\nChapter 5. Loading, Linking, and Initializing\n<a href=\"https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-5.html\">https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-5.html</a></p>\n</blockquote>\n<p>引入了ConstantDesc接口( ClassDesc、MethodTypeDesc、MethodHandleDesc这几个接口直接继承了ConstantDesc接口)以及Constable接口；ConstantDesc接口定义了resolveConstantDesc方法，Constable接口定义了describeConstable方法；String、Integer、Long、Float、Double均实现了这两个接口，而EnumDesc实现了ConstantDesc接口。</p>\n<p><img src=\"https://github.com/jiachao23/jcohy-study-sample/blob/master/jcohy-study-java/images/java12-1.png\" alt=\"image-20191031183927168\"></p>\n<p>符号引用以纯 nominal 形式描述可加载常量，与类加载或可访问性上下文区分开。有些类可以作为自己的符号引用（例如 String）。而对于可链接常量，另外定义了一系列符号引用类型，具体包括： ClassDesc (Class 的可加载常量标称描述符) ，MethodTypeDesc(方法类型常量标称描述符) ，MethodHandleDesc (方法句柄常量标称描述符) 和DynamicConstantDesc (动态常量标称描述符) ，它们包含描述这些常量的 nominal 信息。此 API 对于操作类和方法的工具很有帮助。</p>\n<h4>String 实现了 Constable 接口：</h4>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">String</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">java</span>.<span class=\"hljs-title\">io</span>.<span class=\"hljs-title\">Serializable</span>, <span class=\"hljs-title\">Comparable</span>&lt;<span class=\"hljs-title\">String</span>&gt;,\n<span class=\"hljs-title\">CharSequence</span>,<span class=\"hljs-title\">Constable</span>, <span class=\"hljs-title\">ConstantDesc</span> </span>{\n</code></pre>\n<p>java.lang.constant.Constable接口定义了抽象方法：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Constable</span> </span>{\n\tOptional&lt;? extends ConstantDesc&gt; describeConstable();\n}\n</code></pre>\n<p>Java 12 String 的实现源码：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Optional&lt;String&gt; <span class=\"hljs-title\">describeConstable</span><span class=\"hljs-params\">()</span> </span>{\n\t<span class=\"hljs-keyword\">return</span> Optional.of(<span class=\"hljs-keyword\">this</span>);\n}\n</code></pre>\n<p>很简单，其实就是调用 Optional.of 方法返回一个 Optional 类型，Optional不懂的可以参考Java 8的新特性</p>\n<h4>String#describeConstable和resolveConstantDesc</h4>\n<p>一个非常有趣的方法来自新引入的接口java.lang.constant.Constable - 它用于标记constable类型，这意味着这类型的值是常量，可以在JVMS 4.4常量池中定义。</p>\n<blockquote>\n<p>Java SE &gt; Java SE Specifications &gt; Java Virtual Machine Specification下的第4章：\nChapter 4. The class File Format\n<a href=\"https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html\">https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html</a></p>\n</blockquote>\n<p>String的源码：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n* Returns an {<span class=\"hljs-doctag\">@link</span> Optional} containing the nominal descriptor for this\n* instance, which is the instance itself.\n*\n* <span class=\"hljs-doctag\">@return</span> an {<span class=\"hljs-doctag\">@link</span> Optional} describing the {<span class=\"hljs-doctag\">@linkplain</span> String} instance\n* <span class=\"hljs-doctag\">@since</span> 12\n*/</span>\n<span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Optional&lt;String&gt; <span class=\"hljs-title\">describeConstable</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> Optional.of(<span class=\"hljs-keyword\">this</span>);\n}\n<span class=\"hljs-comment\">/**\n* Resolves this instance as a {<span class=\"hljs-doctag\">@link</span> ConstantDesc}, the result of which is\n* the instance itself.\n*\n* <span class=\"hljs-doctag\">@param</span> lookup ignored\n* <span class=\"hljs-doctag\">@return</span> the {<span class=\"hljs-doctag\">@linkplain</span> String} instance\n* <span class=\"hljs-doctag\">@since</span> 12\n*/</span>\n<span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">resolveConstantDesc</span><span class=\"hljs-params\">(MethodHandles.Lookup lookup)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n}\n</code></pre>\n<p>举例：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testDescribeConstable</span><span class=\"hljs-params\">()</span> </span>{\n\tSystem.out.println(<span class=\"hljs-string\">\"======test java 12 describeConstable======\"</span>);\n\tString name = <span class=\"hljs-string\">\"hello world!\"</span>;\n\tOptional&lt;String&gt; optional = name.describeConstable();\n\tSystem.out.println(optional.get());\n}\n</code></pre>\n<p>结果输出：</p>\n<pre><code class=\"language-java\">======test java <span class=\"hljs-number\">12</span> describeConstable======\nhello world!\n</code></pre>\n",
  "link": "\\zh-cn\\docs\\java\\java12\\jvm.html",
  "meta": {
    "title": "引入 JVM 常量 API",
    "keywords": "docs,jcohy-docs,jvm，java12",
    "description": "引入 JVM 常量 API"
  }
}