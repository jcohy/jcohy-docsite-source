{
  "filename": "FlightRecorder.md",
  "__html": "<h2>飞行记录器</h2>\n<p>飞行记录器之前是商业版 JDK 的一项分析工具，但在 Java 11 中，其代码被包含到公开代码库中，这样所有人都能使用该功能了。</p>\n<p>Java 语言中的飞行记录器类似飞机上的黑盒子，是一种低开销的事件信息收集框架，主要用于对应用程序和 JVM 进行故障检查、分析。飞行记录器记录的主要数据源于应用程序、JVM 和 OS，这些事件信息保存在单独的事件记录文件中，故障发生后，能够从事件记录文件中提取出有用信息对故障进行分析。</p>\n<p>启用飞行记录器参数如下：</p>\n<pre><code class=\"language-shell\">-XX:StartFlightRecording\n</code></pre>\n<p>也可以使用 bin/jcmd 工具启动和配置飞行记录器：\n飞行记录器启动、配置参数示例</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> jcmd &lt;pid&gt; JFR.start</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> jcmd &lt;pid&gt; JFR.dump filename=recording.jfr</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> jcmd &lt;pid&gt; JFR.stop</span>\n</code></pre>\n<p>JFR 使用测试：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FlightRecorderTest</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Event</span> </span>{\n    <span class=\"hljs-meta\">@Label</span>(<span class=\"hljs-string\">\"Hello World\"</span>)\n    <span class=\"hljs-meta\">@Description</span>(<span class=\"hljs-string\">\"Helps the programmer getting started\"</span>)\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloWorld</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Event</span> </span>{\n        <span class=\"hljs-meta\">@Label</span>(<span class=\"hljs-string\">\"Message\"</span>)\n        String message;\n    }\n \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        HelloWorld event = <span class=\"hljs-keyword\">new</span> HelloWorld();\n        event.message = <span class=\"hljs-string\">\"hello, world!\"</span>;\n        event.commit();\n    }\n}\n</code></pre>\n<p>在运行时加上如下参数：</p>\n<pre><code>java -XX:StartFlightRecording=duration=1s, filename=recording.jfr\n</code></pre>\n<p>下面读取上一步中生成的 JFR 文件：recording.jfr\n飞行记录器分析示例:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">readRecordFile</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException </span>{\n    <span class=\"hljs-keyword\">final</span> Path path = Paths.get(<span class=\"hljs-string\">\"D:\\\\ java \\\\recording.jfr\"</span>);\n    <span class=\"hljs-keyword\">final</span> List&lt;RecordedEvent&gt; recordedEvents = RecordingFile.readAllEvents(path);\n    <span class=\"hljs-keyword\">for</span> (RecordedEvent event : recordedEvents) {\n        System.out.println(event.getStartTime() + <span class=\"hljs-string\">\",\"</span> + event.getValue(<span class=\"hljs-string\">\"message\"</span>));\n    }\n}\n</code></pre>\n<p>JFR是 Oracle 刚刚开源的强大特性。我们知道在生产系统进行不同角度的 Profiling，有各种工具、框架，但是能力范围、可靠性、开销等，大都差强人意，要么能力不全面，要么开销太大，甚至不可靠可能导致 Java 应用进程宕机。</p>\n<p>而 JFR 是一套集成进入 JDK、JVM 内部的事件机制框架，通过良好架构和设计的框架，硬件层面的极致优化，生产环境的广泛验证，它可以做到极致的可靠和低开销。在 SPECjbb2015 等基准测试中，JFR 的性能开销最大不超过 1%，所以，工程师可以基本没有心理负担地在大规模分布式的生产系统使用，这意味着，我们既可以随时主动开启 JFR 进行特定诊断，也可以让系统长期运行 JFR，用以在复杂环境中进行“After-the-fact”分析。还需要苦恼重现随机问题吗？JFR 让问题简化了很多。</p>\n<p>在保证低开销的基础上，JFR 提供的能力也令人眼前一亮，例如：我们无需 BCI 就可以进行 Object Allocation Profiling，终于不用担心 BTrace 之类把进程搞挂了。对锁竞争、阻塞、延迟，JVM GC、SafePoint 等领域，进行非常细粒度分析。甚至深入 JIT Compiler 内部，全面把握热点方法、内联、逆优化等等。JFR 提供了标准的 Java、C++ 等扩展 API，可以与各种层面的应用进行定制、集成，为复杂的企业应用栈或者复杂的分布式应用，提供 All-in-One 解决方案。而这一切都是内建在 JDK 和 JVM 内部的，并不需要额外的依赖，开箱即用。</p>\n",
  "link": "\\zh-cn\\docs\\java\\java11\\FlightRecorder.html",
  "meta": {
    "title": "飞行记录器",
    "keywords": "docs,jcohy-docs,飞行记录器,java11",
    "description": "飞行记录器"
  }
}