{
  "filename": "Lambda.md",
  "__html": "<h2>1.Lambda表达式</h2>\n<p>Lambda 是一个匿名函数，我们可以把Lambda 表达式理解为是一段可以传递的代码（将代码像数据一样进行传递）。可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。</p>\n<h4>Lambda表达式的基础语法：</h4>\n<p>java8中引入了新的操作符“-&gt;”，该操作符称为箭头操作符或者Lambda操作符</p>\n<p>箭头操作符将表达式拆分成两部分</p>\n<p><strong>左侧：Lambda表达式的参数列表</strong></p>\n<p><strong>右侧：Lambda表达式中所需执行的功能，即Lambda体</strong></p>\n<h5>语法格式一：无参数，无返回值：() -&gt; System.out.println(&quot;hello world&quot;);</h5>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test1</span><span class=\"hljs-params\">()</span></span>{\n    System.out.println(<span class=\"hljs-string\">\"------从匿名类到Lambda 的转换------\"</span>);\n    Runnable r = <span class=\"hljs-keyword\">new</span> Runnable() {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>{\n            System.out.println(<span class=\"hljs-string\">\"hello world\"</span>);\n        }\n    };\n    r.run();\n    System.out.println(<span class=\"hljs-string\">\"-------------------------\"</span>);\n    Runnable r1 = () -&gt; System.out.println(<span class=\"hljs-string\">\"hello world\"</span>);\n    r1.run();\n}\n</code></pre>\n<h5>语法格式二：有一个参数参数，无返回值：(x) -&gt; System.out.println(x);</h5>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test2</span><span class=\"hljs-params\">()</span></span>{\n    Consumer&lt;String&gt; con = (x) -&gt; System.out.println(x);\n    con.accept(<span class=\"hljs-string\">\"hello world\"</span>);\n}\n</code></pre>\n<h5>语法格式三：若只有一个参数，小括号可以省略不写</h5>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test2</span><span class=\"hljs-params\">()</span></span>{\n    Consumer&lt;String&gt; con = x -&gt; System.out.println(x);\n    con.accept(<span class=\"hljs-string\">\"hello world\"</span>);\n}\n</code></pre>\n<h5>语法格式四：有两个以上参数，并且有返回值，并且Lambda体中有多条语句</h5>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test3</span><span class=\"hljs-params\">()</span></span>{\n   Comparator&lt;Integer&gt; com = (x, y) -&gt; {\n       System.out.println(<span class=\"hljs-string\">\"函数式编程\"</span>);\n       <span class=\"hljs-keyword\">return</span> Integer.compare(x,y);\n   };\n}\n</code></pre>\n<h5>语法格式五：若Lambda体中只有一条语句，return和大括号都可以省略不写</h5>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test3</span><span class=\"hljs-params\">()</span></span>{\n   Comparator&lt;Integer&gt; com = (x, y) -&gt; Integer.compare(x,y);\n}\n</code></pre>\n<h5>语法格式六：Lambda表达式的参数列表的数据类型可以省略不写，因为JVM编译器可以通过上下文推断，数据类型，即“类型推断”</h5>\n<h4>Lambda表达式需要“函数式接口”的支持</h4>\n<h5>函数式接口</h5>\n<pre><code>接口中只有一个抽象方法的接口，成为函数式接口，可以使用@FunctionalInterface修饰。用来检查是否是函数式接口。\n</code></pre>\n<h4>Lambda简单使用</h4>\n<p>1）、对一个数进行运算</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@FunctionalInterface</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">MyFun</span> </span>{\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title\">getValue</span><span class=\"hljs-params\">(Integer num)</span></span>;\n    \n}\n</code></pre>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test4</span><span class=\"hljs-params\">()</span></span>{\n    Integer integer = operation(<span class=\"hljs-number\">100</span>, (x) -&gt; x * x);\n    System.out.println(integer);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title\">operation</span><span class=\"hljs-params\">(Integer num,MyFun myFun)</span></span>{\n    <span class=\"hljs-keyword\">return</span> myFun.getValue(num);\n}\n</code></pre>\n<p>2）、调用Collections.sort()方法，通过定制排序规则比较两个Employee(先按年龄排序，年龄相同，按姓名排序)，使用Lambda</p>\n<pre><code class=\"language-java\">List&lt;Employee&gt; emps = Arrays.asList(\n        <span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-number\">101</span>,<span class=\"hljs-string\">\"张三\"</span>,<span class=\"hljs-number\">18</span>,<span class=\"hljs-number\">1111.11</span>),\n        <span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-number\">102</span>,<span class=\"hljs-string\">\"李四\"</span>,<span class=\"hljs-number\">59</span>,<span class=\"hljs-number\">2222.22</span>),\n        <span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-number\">103</span>,<span class=\"hljs-string\">\"王五\"</span>,<span class=\"hljs-number\">28</span>,<span class=\"hljs-number\">3333.33</span>),\n        <span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-number\">104</span>,<span class=\"hljs-string\">\"赵六\"</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">4444.44</span>),\n        <span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-number\">105</span>,<span class=\"hljs-string\">\"田七\"</span>,<span class=\"hljs-number\">38</span>,<span class=\"hljs-number\">5555.55</span>),\n        <span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-number\">106</span>,<span class=\"hljs-string\">\"董八\"</span>,<span class=\"hljs-number\">42</span>,<span class=\"hljs-number\">6666.66</span>),\n        <span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-number\">107</span>,<span class=\"hljs-string\">\"周十\"</span>,<span class=\"hljs-number\">69</span>,<span class=\"hljs-number\">7777.77</span>)\n        );\n<span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test5</span><span class=\"hljs-params\">()</span></span>{\n    Collections.sort(emps,(e1,e2) -&gt; {\n        <span class=\"hljs-keyword\">if</span>(e1.getAge() == e2.getAge()){\n            <span class=\"hljs-keyword\">return</span> e1.getName().compareTo(e2.getName());\n        }<span class=\"hljs-keyword\">else</span>{\n            <span class=\"hljs-keyword\">return</span> Integer.compare(e1.getAge(),e2.getAge());\n        }\n    });\n\n    <span class=\"hljs-keyword\">for</span> (Employee e: emps) {\n        System.out.println(e);\n    }\n}\n</code></pre>\n<p>3）、声明函数式接口，接口中声明抽象方法 public String getValue(String str);</p>\n<pre><code>声明类TestLambda，类中编写方法使用接口作为参数，将一个字符串转换成大写，并作为返回值\n\n再将一个字符串的第2个和第4个索引位置进行截取子串\n</code></pre>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@FunctionalInterface</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Func1</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getValue</span><span class=\"hljs-params\">(String str)</span></span>;\n}\n</code></pre>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test6</span><span class=\"hljs-params\">()</span></span>{\n    String helloWorld = operation(<span class=\"hljs-string\">\"Hello World\"</span>, (str) -&gt; str.toUpperCase());\n    String helloWorld1 = operation(<span class=\"hljs-string\">\"He\"</span>, (str) -&gt; str.substring(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">5</span>));\n    System.out.println(helloWorld);\n    System.out.println(helloWorld1);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">operation</span><span class=\"hljs-params\">(String num,Func1 myFun)</span></span>{\n    <span class=\"hljs-keyword\">return</span> myFun.getValue(num);\n}\n</code></pre>\n<p>4）、声明一个带两个泛型的函数式接口，泛型类型为&lt;T,R&gt; T为参数，R为返回值。</p>\n<pre><code>接口中声明对应的抽象方法\n\n在TestLambda类中声明方法，使用接口作为参数，计算两个long型参数的和\n\n再计算两个long型类型的乘积。\n</code></pre>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Func2</span>&lt;<span class=\"hljs-title\">T</span>,<span class=\"hljs-title\">R</span>&gt; </span>{\n\n    <span class=\"hljs-function\">R <span class=\"hljs-title\">getValue</span><span class=\"hljs-params\">(T t1,T t2)</span></span>;\n}\n</code></pre>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test7</span><span class=\"hljs-params\">()</span></span>{\n    calculate(<span class=\"hljs-number\">100L</span>,<span class=\"hljs-number\">200L</span>,(a,b) -&gt; a+b);\n    calculate(<span class=\"hljs-number\">100L</span>,<span class=\"hljs-number\">200L</span>,(a,b) -&gt; a*b);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">calculate</span><span class=\"hljs-params\">(Long num,Long num2,Func2&lt;Long,Long&gt; myFun)</span></span>{\n    System.out.println(myFun.getValue(num,num2));\n}\n</code></pre>\n",
  "link": "\\zh-cn\\docs\\java\\java8\\Lambda.html",
  "meta": {
    "title": "Java8新特性",
    "keywords": "docs,jcohy-docs,java8,Lambda表达式",
    "description": "Lambda表达式"
  }
}