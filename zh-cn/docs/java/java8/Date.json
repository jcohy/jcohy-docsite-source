{
  "filename": "Date.md",
  "__html": "<h2>7.新时间日期API</h2>\n<h4>LocalDate、LocalTime、LocalDateTime</h4>\n<pre><code>类的实例是不可变的对象，分别表示使用ISO-8601日历系统的日期、时间、日期和时间。它们提供了简单的日期或时间，并不包含当前的时间信息。也不包含与时区相关的信息。\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>now()</td>\n<td>静态方法，根据当前时间创建对象</td>\n</tr>\n<tr>\n<td>of()</td>\n<td>静态方法，根据指定日期/时间创建对象</td>\n</tr>\n<tr>\n<td>plusDays,plusWeeks,plusMonths,plusYears</td>\n<td>向当前LocalDate对象添加几天、几周、几个月、几年</td>\n</tr>\n<tr>\n<td>minusMonths,minusYears</td>\n<td>从当前LocalDate对象减去几天、几周、几个月、几年</td>\n</tr>\n<tr>\n<td>plus,minus</td>\n<td>添加或减少一个Duration或Period</td>\n</tr>\n<tr>\n<td>withDayOfMonth, <br/>withDayOfYear,<br/>withMonth,<br/>withYear</td>\n<td>将月份天数、年份天数、月份、年份修改为指定的值并返回新的LocalDate对象</td>\n</tr>\n<tr>\n<td>getDayOfMonth</td>\n<td>获得月份天数(1-31)</td>\n</tr>\n<tr>\n<td>getDayOfYear</td>\n<td>获得年份天数(1-366)</td>\n</tr>\n<tr>\n<td>getDayOfWeek</td>\n<td>获得星期几(返回一个DayOfWeek枚举值)</td>\n</tr>\n<tr>\n<td>getMonth</td>\n<td>获得月份,返回一个Month枚举值</td>\n</tr>\n<tr>\n<td>getMonthValue</td>\n<td>获得月份(1-12)</td>\n</tr>\n<tr>\n<td>getYear</td>\n<td>获得年份</td>\n</tr>\n<tr>\n<td>until</td>\n<td>获得两个日期之间的Period对象，或者指定ChronoUnits的数字</td>\n</tr>\n<tr>\n<td>isBefore,isAfter</td>\n<td>比较两个LocalDate</td>\n</tr>\n<tr>\n<td>isLeapYear</td>\n<td>判断是否是闰年</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestLocalDateTime</span> </span>{\n\n\t<span class=\"hljs-comment\">//1. LocalDate、LocalTime、LocalDateTime</span>\n\t<span class=\"hljs-meta\">@Test</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test1</span><span class=\"hljs-params\">()</span></span>{\n\t\tLocalDateTime ldt = LocalDateTime.now();\n\t\tSystem.out.println(ldt);\n\t\t\n\t\tLocalDateTime ld2 = LocalDateTime.of(<span class=\"hljs-number\">2016</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>);\n\t\tSystem.out.println(ld2);\n\t\t\n\t\tLocalDateTime ldt3 = ld2.plusYears(<span class=\"hljs-number\">20</span>);\n\t\tSystem.out.println(ldt3);\n\t\t\n\t\tLocalDateTime ldt4 = ld2.minusMonths(<span class=\"hljs-number\">2</span>);\n\t\tSystem.out.println(ldt4);\n\t\t\n\t\tSystem.out.println(ldt.getYear());\n\t\tSystem.out.println(ldt.getMonthValue());\n\t\tSystem.out.println(ldt.getDayOfMonth());\n\t\tSystem.out.println(ldt.getHour());\n\t\tSystem.out.println(ldt.getMinute());\n\t\tSystem.out.println(ldt.getSecond());\n\t}\n</code></pre>\n<h4>Instant 时间戳</h4>\n<pre><code>用于“时间戳”的运算。它是以Unix元年(传统的设定为UTC时区1970年1月1日午夜时分)开始所经历的描述进行运算\n</code></pre>\n<pre><code class=\"language-java\">\t<span class=\"hljs-comment\">//2. Instant : 时间戳。 （使用 Unix 元年  1970年1月1日 00:00:00 所经历的毫秒值）</span>\n\t<span class=\"hljs-meta\">@Test</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test2</span><span class=\"hljs-params\">()</span></span>{\n\t\tInstant ins = Instant.now();  <span class=\"hljs-comment\">//默认使用 UTC 时区</span>\n\t\tSystem.out.println(ins);\n\t\t\n\t\tOffsetDateTime odt = ins.atOffset(ZoneOffset.ofHours(<span class=\"hljs-number\">8</span>));\n\t\tSystem.out.println(odt);\n\t\t\n\t\tSystem.out.println(ins.getNano());\n\t\t\n\t\tInstant ins2 = Instant.ofEpochSecond(<span class=\"hljs-number\">5</span>);\n\t\tSystem.out.println(ins2);\n\t}\n</code></pre>\n<h4>Duration 和Period</h4>\n<p>Duration:用于计算两个“时间”间隔</p>\n<p>Period:用于计算两个“日期”间隔</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">//3.</span>\n\t<span class=\"hljs-comment\">//Duration : 用于计算两个“时间”间隔</span>\n\t<span class=\"hljs-comment\">//Period : 用于计算两个“日期”间隔</span>\n\t<span class=\"hljs-meta\">@Test</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test3</span><span class=\"hljs-params\">()</span></span>{\n\t\tInstant ins1 = Instant.now();\n\t\t\n\t\tSystem.out.println(<span class=\"hljs-string\">\"--------------------\"</span>);\n\t\t<span class=\"hljs-keyword\">try</span> {\n\t\t\tThread.sleep(<span class=\"hljs-number\">1000</span>);\n\t\t} <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n\t\t}\n\t\t\n\t\tInstant ins2 = Instant.now();\n\t\t\n\t\tSystem.out.println(<span class=\"hljs-string\">\"所耗费时间为：\"</span> + Duration.between(ins1, ins2));\n\t\t\n\t\tSystem.out.println(<span class=\"hljs-string\">\"----------------------------------\"</span>);\n\t\t\n\t\tLocalDate ld1 = LocalDate.now();\n\t\tLocalDate ld2 = LocalDate.of(<span class=\"hljs-number\">2011</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);\n\t\t\n\t\tPeriod pe = Period.between(ld2, ld1);\n\t\tSystem.out.println(pe.getYears());\n\t\tSystem.out.println(pe.getMonths());\n\t\tSystem.out.println(pe.getDays());\n\t}\n</code></pre>\n<h4>日期的操纵</h4>\n<ul>\n<li>TemporalAdjuster : 时间校正器。有时我们可能需要获取例如：将日期调整到“下个周日”等操作。</li>\n<li>TemporalAdjusters : 该类通过静态方法提供了大量的常用TemporalAdjuster 的实现。</li>\n</ul>\n<pre><code class=\"language-java\">\t\n\t<span class=\"hljs-comment\">//4. TemporalAdjuster : 时间校正器</span>\n\t<span class=\"hljs-meta\">@Test</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test4</span><span class=\"hljs-params\">()</span></span>{\n\tLocalDateTime ldt = LocalDateTime.now();\n\t\tSystem.out.println(ldt);\n\t\t\n\t\tLocalDateTime ldt2 = ldt.withDayOfMonth(<span class=\"hljs-number\">10</span>);\n\t\tSystem.out.println(ldt2);\n\t\t\n\t\tLocalDateTime ldt3 = ldt.with(TemporalAdjusters.next(DayOfWeek.SUNDAY));\n\t\tSystem.out.println(ldt3);\n\t\t\n\t\t<span class=\"hljs-comment\">//自定义：下一个工作日</span>\n\t\tLocalDateTime ldt5 = ldt.with((l) -&gt; {\n\t\t\tLocalDateTime ldt4 = (LocalDateTime) l;\n\t\t\t\n\t\t\tDayOfWeek dow = ldt4.getDayOfWeek();\n\t\t\t\n\t\t\t<span class=\"hljs-keyword\">if</span>(dow.equals(DayOfWeek.FRIDAY)){\n\t\t\t\t<span class=\"hljs-keyword\">return</span> ldt4.plusDays(<span class=\"hljs-number\">3</span>);\n\t\t\t}<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(dow.equals(DayOfWeek.SATURDAY)){\n\t\t\t\t<span class=\"hljs-keyword\">return</span> ldt4.plusDays(<span class=\"hljs-number\">2</span>);\n\t\t\t}<span class=\"hljs-keyword\">else</span>{\n\t\t\t\t<span class=\"hljs-keyword\">return</span> ldt4.plusDays(<span class=\"hljs-number\">1</span>);\n\t\t\t}\n\t\t});\n\t\t\n\t\tSystem.out.println(ldt5);\n\t}\n</code></pre>\n<h4>解析与格式化</h4>\n<p><strong>java.time.format.DateTimeFormatter 类</strong>：该类提供了三种格式化方法：</p>\n<ul>\n<li>预定义的标准格式</li>\n<li>语言环境相关的格式</li>\n<li>自定义的格式**</li>\n</ul>\n<p>Java8 中加入了对时区的支持，带时区的时间为分别为：\n<strong>ZonedDate、ZonedTime、ZonedDateTime</strong>\n<strong>其中每个时区都对应着ID，地区ID都为“{区域}/{城市}”的格式</strong>\n例如：Asia/Shanghai 等\nZoneId：该类中包含了所有的时区信息\ngetAvailableZoneIds() : 可以获取所有时区时区信息\nof(id) : 用指定的时区信息获取ZoneId 对象</p>\n<pre><code class=\"language-java\">\n\t<span class=\"hljs-comment\">//6.ZonedDate、ZonedTime、ZonedDateTime ： 带时区的时间或日期</span>\n\t<span class=\"hljs-meta\">@Test</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test7</span><span class=\"hljs-params\">()</span></span>{\n\t\tLocalDateTime ldt = LocalDateTime.now(ZoneId.of(<span class=\"hljs-string\">\"Asia/Shanghai\"</span>));\n\t\tSystem.out.println(ldt);\n\t\t\n\t\tZonedDateTime zdt = ZonedDateTime.now(ZoneId.of(<span class=\"hljs-string\">\"US/Pacific\"</span>));\n\t\tSystem.out.println(zdt);\n\t}\n\t\n\t<span class=\"hljs-meta\">@Test</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test6</span><span class=\"hljs-params\">()</span></span>{\n\t\tSet&lt;String&gt; set = ZoneId.getAvailableZoneIds();\n\t\tset.forEach(System.out::println);\n\t}\n\n\t\n\t<span class=\"hljs-comment\">//5. DateTimeFormatter : 解析和格式化日期或时间</span>\n\t<span class=\"hljs-meta\">@Test</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test5</span><span class=\"hljs-params\">()</span></span>{\n<span class=\"hljs-comment\">//\t\tDateTimeFormatter dtf = DateTimeFormatter.ISO_LOCAL_DATE;</span>\n\t\t\n\t\tDateTimeFormatter dtf = DateTimeFormatter.ofPattern(<span class=\"hljs-string\">\"yyyy年MM月dd日 HH:mm:ss E\"</span>);\n\t\t\n\t\tLocalDateTime ldt = LocalDateTime.now();\n\t\tString strDate = ldt.format(dtf);\n\t\t\n\t\tSystem.out.println(strDate);\n\t\t\n\t\tLocalDateTime newLdt = ldt.parse(strDate, dtf);\n\t\tSystem.out.println(newLdt);\n\t}\n\n</code></pre>\n<h4>与传统日期的转换</h4>\n<table>\n<thead>\n<tr>\n<th>类</th>\n<th>To 遗留类</th>\n<th>From 遗留类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>java.time.Instant<br/>java.util.Date</td>\n<td>Date.from(instant)</td>\n<td>date.toInstant()</td>\n</tr>\n<tr>\n<td>java.time.Instant<br/>java.sql.Timestamp</td>\n<td>Timestamp.from(instant)</td>\n<td>timestamp.toInstant()</td>\n</tr>\n<tr>\n<td>java.time.ZonedDateTime<br/>java.util.GregorianCalendar</td>\n<td>GregorianCalendar.from(zonedDateTime)</td>\n<td>cal.toZonedDateTime()</td>\n</tr>\n<tr>\n<td>java.time.LocalDate<br/>java.sql.Time</td>\n<td>Date.valueOf(localDate)</td>\n<td>date.toLocalDate()</td>\n</tr>\n<tr>\n<td>java.time.LocalTime<br/>java.sql.Time</td>\n<td>Date.valueOf(localDate)</td>\n<td>date.toLocalTime()</td>\n</tr>\n<tr>\n<td>java.time.LocalDateTime<br/>java.sql.Timestamp</td>\n<td>Timestamp.valueOf(localDateTime)</td>\n<td>timestamp.toLocalDateTime()</td>\n</tr>\n<tr>\n<td>java.time.ZoneId<br/>java.util.TimeZone</td>\n<td>Timezone.getTimeZone(id)</td>\n<td>timeZone.toZoneId()</td>\n</tr>\n<tr>\n<td>java.time.format.DateTimeFormatter<br/>java.text.DateFormat</td>\n<td>formatter.toFormat()</td>\n<td>无</td>\n</tr>\n</tbody>\n</table>\n",
  "link": "\\zh-cn\\docs\\java\\java8\\Date.html",
  "meta": {
    "title": "Java8新特性",
    "keywords": "docs,jcohy-docs,java8,新时间日期API",
    "description": "新时间日期API"
  }
}