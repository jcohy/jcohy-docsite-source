{
  "filename": "Stream.md",
  "__html": "<h2>4.Stream API</h2>\n<h4>了解Stream</h4>\n<p>Java8中有两大最为重要的改变。第一个是Lambda 表达式；另外一个则是<strong>Stream API(java.util.stream.*)。</strong>\nStream 是Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用SQL 执行的数据库查询。也可以使用Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</p>\n<h4>什么是Stream</h4>\n<p>流(Stream) 到底是什么呢？\n是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。“集合讲的是数据，流讲的是计算！”</p>\n<p>注意：\n①Stream 自己不会存储元素。\n②Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。\n③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</p>\n<h4>Stream 的操作三个步骤</h4>\n<ul>\n<li>\n<p>创建Stream</p>\n<p>一个数据源（如：集合、数组），获取一个流</p>\n</li>\n<li>\n<p>中间操作</p>\n<p>一个中间操作链，对数据源的数据进行处理</p>\n</li>\n<li>\n<p>终止操作(终端操作)</p>\n<p>一个终止操作，执行中间操作链，并产生结果</p>\n<p><img src=\"https://github.com/jiachao23/jcohy-study-sample/blob/master/jcohy-study-java/src/main/resources/static/images/1.jpg\" alt=\"\"></p>\n</li>\n</ul>\n<h5>创建Stream</h5>\n<h6>1）、Java8 中的Collection 接口被扩展，提供了两个获取流的方法</h6>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">//Java8 中的Collection 接口被扩展，提供了两个获取流的方法：</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> Stream&lt;E&gt; <span class=\"hljs-title\">stream</span><span class=\"hljs-params\">()</span> : <span class=\"hljs-comment\">//返回一个顺序流</span>\n  <span class=\"hljs-keyword\">default</span> Stream&lt;E&gt; <span class=\"hljs-title\">parallelStream</span><span class=\"hljs-params\">()</span> : <span class=\"hljs-comment\">//返回一个并行流</span>\n</span></code></pre>\n<pre><code class=\"language-java\">List&lt;String&gt; list = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\nStream&lt;String&gt; stream = list.stream(); <span class=\"hljs-comment\">//获取一个顺序流</span>\nStream&lt;String&gt; parallelStream = list.parallelStream(); <span class=\"hljs-comment\">//获取一个并行流</span>\n</code></pre>\n<h6>2）、由数组创建流</h6>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">static</span> &lt;T&gt; <span class=\"hljs-function\">Stream&lt;T&gt; <span class=\"hljs-title\">stream</span><span class=\"hljs-params\">(T[] array)</span>: 返回一个流\n重载形式，能够处理对应基本类型的数组：\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> IntStream <span class=\"hljs-title\">stream</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] array)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> LongStream <span class=\"hljs-title\">stream</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span>[] array)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> DoubleStream <span class=\"hljs-title\">stream</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">double</span>[] array)</span>\n</span></code></pre>\n<pre><code class=\"language-java\">Integer[] nums = <span class=\"hljs-keyword\">new</span> Integer[<span class=\"hljs-number\">10</span>];\nStream&lt;Integer&gt; stream1 = Arrays.stream(nums);\n</code></pre>\n<h6>3）、由值创建流</h6>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">//可以使用静态方法Stream.of(), 通过显示值创建一个流。它可以接收任意数量的参数。</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span>&lt;T&gt; Stream&lt;T&gt; <span class=\"hljs-title\">of</span><span class=\"hljs-params\">(T... values)</span> : 返回一个流\n</span></code></pre>\n<pre><code class=\"language-java\">Stream&lt;Integer&gt; stream2 = Stream.of(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>);\n</code></pre>\n<h6>4）、由函数创建流：创建无限流</h6>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">//可以使用静态方法Stream.iterate() 和Stream.generate(), 创建无限流。</span>\n<span class=\"hljs-comment\">//迭代</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span>&lt;T&gt; Stream&lt;T&gt; <span class=\"hljs-title\">iterate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> T seed, <span class=\"hljs-keyword\">final</span> UnaryOperator&lt;T&gt; f)</span>\n<span class=\"hljs-comment\">//生成</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span>&lt;T&gt; Stream&lt;T&gt; <span class=\"hljs-title\">generate</span><span class=\"hljs-params\">(Supplier&lt;T&gt; s)</span> :\n</span></code></pre>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">//迭代</span>\nStream&lt;Integer&gt; stream3 = Stream.iterate(<span class=\"hljs-number\">0</span>, (x) -&gt; x + <span class=\"hljs-number\">2</span>).limit(<span class=\"hljs-number\">10</span>);\nstream3.forEach(System.out::println);\n\n<span class=\"hljs-comment\">//生成</span>\nStream&lt;Double&gt; stream4 = Stream.generate(Math::random).limit(<span class=\"hljs-number\">2</span>);\nstream4.forEach(System.out::println);\n</code></pre>\n<h5>Stream 的中间操作</h5>\n<p>多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理！\n而在终止操作时一次性全部处理，称为“惰性求值”。</p>\n<h6>筛选与切片</h6>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>filter(Predicate p)</td>\n<td>接收Lambda ，从流中排除某些元素。</td>\n</tr>\n<tr>\n<td>distinct()</td>\n<td>筛选，通过流所生成元素的hashCode() 和equals() 去除重复元素</td>\n</tr>\n<tr>\n<td>limit(long maxSize)</td>\n<td>截断流，使其元素不超过给定数量。</td>\n</tr>\n<tr>\n<td>skip(long n)</td>\n<td>跳过元素，返回一个扔掉了前n 个元素的流。若流中元素不足n 个，则返回一个空流。与limit(n) 互补</td>\n</tr>\n</tbody>\n</table>\n<h6>映射</h6>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>map(Function f)</td>\n<td>接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</td>\n</tr>\n<tr>\n<td>mapToDouble(ToDoubleFunction f)</td>\n<td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的DoubleStream。</td>\n</tr>\n<tr>\n<td>mapToInt(ToIntFunction f)</td>\n<td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的IntStream。</td>\n</tr>\n<tr>\n<td>mapToLong(ToLongFunction f)</td>\n<td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的LongStream。</td>\n</tr>\n<tr>\n<td>flatMap(Function f)</td>\n<td>接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</td>\n</tr>\n</tbody>\n</table>\n<h6>排序</h6>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sorted()</td>\n<td>产生一个新流，其中按自然顺序排序</td>\n</tr>\n<tr>\n<td>sorted(Comparator comp)</td>\n<td>产生一个新流，其中按比较器顺序排序</td>\n</tr>\n</tbody>\n</table>\n<h5>Stream 的终止操作</h5>\n<h6>查找与匹配</h6>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>allMatch(Predicate p)</td>\n<td>检查是否匹配所有元素</td>\n</tr>\n<tr>\n<td>anyMatch(Predicate p)</td>\n<td>检查是否至少匹配一个元素</td>\n</tr>\n<tr>\n<td>noneMatch(Predicatep)</td>\n<td>检查是否没有匹配所有元素</td>\n</tr>\n<tr>\n<td>findFirst()</td>\n<td>返回第一个元素</td>\n</tr>\n<tr>\n<td>findAny()</td>\n<td>返回当前流中的任意元素</td>\n</tr>\n<tr>\n<td>count()</td>\n<td>返回流中元素总数</td>\n</tr>\n<tr>\n<td>max(Comparator c)</td>\n<td>返回流中最大值</td>\n</tr>\n<tr>\n<td>min(Comparator c)</td>\n<td>返回流中最小值</td>\n</tr>\n<tr>\n<td>forEach(Consumer c)</td>\n<td>内部迭代(使用Collection 接口需要用户去做迭代，称为外部迭代。相反，Stream API 使用内部迭代——它帮你把迭代做了)</td>\n</tr>\n</tbody>\n</table>\n<h6>归约</h6>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>reduce(T iden, BinaryOperator b)</td>\n<td>可以将流中元素反复结合起来，得到一个值。返回T</td>\n</tr>\n<tr>\n<td>reduce(BinaryOperator b)</td>\n<td>可以将流中元素反复结合起来，得到一个值。返回Optional<T></td>\n</tr>\n</tbody>\n</table>\n<p><strong>备注：map 和reduce 的连接通常称为map-reduce 模式，因Google 用它来进行网络搜索而出名。</strong></p>\n<h6>收集</h6>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>collect(Collector c)</td>\n<td>将流转换为其他形式。接收一个Collector接口的实现，用于给Stream中元素做汇总的方法</td>\n</tr>\n</tbody>\n</table>\n<p>Collector 接口中方法的实现决定了如何对流执行收集操作(如收集到List、Set、Map)。但是Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例，具体方法与实例如下表：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>返回类型</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>toList</td>\n<td>List<T></td>\n<td>把流中元素收集到List</td>\n</tr>\n<tr>\n<td>toSet</td>\n<td>Set<T></td>\n<td>把流中元素收集到Set</td>\n</tr>\n<tr>\n<td>toCollection</td>\n<td>Collection<T></td>\n<td>把流中元素收集到创建的集合</td>\n</tr>\n<tr>\n<td>counting</td>\n<td>Long</td>\n<td>计算流中元素的个数</td>\n</tr>\n<tr>\n<td>summingInt</td>\n<td>Integer</td>\n<td>对流中元素的整数属性求和</td>\n</tr>\n<tr>\n<td>averagingInt</td>\n<td>Double</td>\n<td>计算流中元素Integer属性的平均值</td>\n</tr>\n<tr>\n<td>summarizingInt</td>\n<td>IntSummaryStatistics</td>\n<td>收集流中Integer属性的统计值。如：平均值</td>\n</tr>\n<tr>\n<td>joining</td>\n<td>String</td>\n<td>连接流中每个字符串</td>\n</tr>\n<tr>\n<td>maxBy</td>\n<td>Optional<T></td>\n<td>根据比较器选择最大值</td>\n</tr>\n<tr>\n<td>minBy</td>\n<td>Optional<T></td>\n<td>根据比较器选择最小值</td>\n</tr>\n<tr>\n<td>reducing</td>\n<td>归约产生的类型</td>\n<td>从一个作为累加器的初始值开始，利用BinaryOperator与流中元素逐个结合，从而归约成单个值</td>\n</tr>\n<tr>\n<td>collectingAndThen</td>\n<td>转换函数返回的类型</td>\n<td>包裹另一个收集器，对其结果转换函数</td>\n</tr>\n<tr>\n<td>groupingBy</td>\n<td>Map&lt;K,List<T>&gt;</td>\n<td>根据某属性值对流分组，属性为K，结果为V</td>\n</tr>\n<tr>\n<td>partitioningBy</td>\n<td>Map&lt;Boolean,List<T>&gt;</td>\n<td>根据true或false进行分区Map&lt;Boolean,</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">//toList</span>\nList&lt;Employee&gt; emps=list.stream().collect(Collectors.toList());\n\n<span class=\"hljs-comment\">//toSet</span>\nSet&lt;Employee&gt; emps=list.stream().collect(Collectors.toSet());\n\n<span class=\"hljs-comment\">//toCollection</span>\nCollection&lt;Employee&gt; emps=list.stream().collect(Collectors.toCollection(ArrayList::<span class=\"hljs-keyword\">new</span>));\n\n<span class=\"hljs-comment\">//counting</span>\n<span class=\"hljs-keyword\">long</span> count=list.stream().collect(Collectors.counting());\n\n<span class=\"hljs-comment\">//summingInt</span>\n<span class=\"hljs-keyword\">int</span> total=list.stream().collect(Collectors.summingInt(Employee::getSalary));\n\n<span class=\"hljs-comment\">//averagingInt</span>\n<span class=\"hljs-keyword\">double</span> avg=list.stream().collect(Collectors.averagingInt(Employee::getSalary));\n\n<span class=\"hljs-comment\">//summarizingInt</span>\nIntSummaryStatistic siss=list.stream().collect(Collectors.summarizingInt(Employee::getSalary));\n\n<span class=\"hljs-comment\">//joining</span>\nString str=list.stream().map(Employee::getName).collect(Collectors.joining());\n\n<span class=\"hljs-comment\">//maxBy</span>\nOptional&lt;Emp&gt; max=list.stream().collect(Collectors.maxBy(comparingInt(Employee::getSalary)));\n\n<span class=\"hljs-comment\">//minBy</span>\nOptional&lt;Emp&gt; min=list.stream().collect(Collectors.minBy(comparingInt(Employee::getSalary)));\n\n<span class=\"hljs-comment\">//reducing</span>\n<span class=\"hljs-keyword\">int</span> total=list.stream().collect(Collectors.reducing(<span class=\"hljs-number\">0</span>,Employee::getSalar,Integer::sum));\n\n<span class=\"hljs-comment\">//collectingAndThen</span>\n<span class=\"hljs-keyword\">int</span> how=list.stream().collect(Collectors.collectingAndThen(Collectors.toList(),List::size));\n\n<span class=\"hljs-comment\">//groupingBy</span>\nMap&lt;Emp.Status, List&lt;Emp&gt;&gt; map= list.stream()\n.collect(Collectors.groupingBy(Employee::getStatus));\n\n<span class=\"hljs-comment\">//partitioningBy</span>\nMap&lt;Boolean,List&lt;Emp&gt;&gt; vd=list.stream().collect(Collectors.partitioningBy(Employee::getManage));\n</code></pre>\n<h6>练习</h6>\n<p>1）、给定一个数字列表，如何返回一个由每个数的平方构成的列表呢？\n给定【1，2，3，4，5】， 应该返回【1，4，9，16，25】。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test1</span><span class=\"hljs-params\">()</span></span>{\n    Integer[] arrays = <span class=\"hljs-keyword\">new</span> Integer[]{<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>};\n    Arrays.stream(arrays)\n        .map((x) -&gt; x * x)\n        .collect(Collectors.toList())\n        .forEach(System.out::println);\n}\n</code></pre>\n<p>2）、怎样用 map 和 reduce 方法数一数流中有多少个Employee呢？</p>\n<pre><code class=\"language-java\">List&lt;Employee&gt; emps = Arrays.asList(\n\t\t\t<span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-number\">102</span>, <span class=\"hljs-string\">\"李四\"</span>, <span class=\"hljs-number\">59</span>, <span class=\"hljs-number\">6666.66</span>, Status.BUSY),\n\t\t\t<span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-number\">101</span>, <span class=\"hljs-string\">\"张三\"</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">9999.99</span>, Status.FREE),\n\t\t\t<span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-number\">103</span>, <span class=\"hljs-string\">\"王五\"</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">3333.33</span>, Status.VOCATION),\n\t\t\t<span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-number\">104</span>, <span class=\"hljs-string\">\"赵六\"</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7777.77</span>, Status.BUSY),\n\t\t\t<span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-number\">104</span>, <span class=\"hljs-string\">\"赵六\"</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7777.77</span>, Status.FREE),\n\t\t\t<span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-number\">104</span>, <span class=\"hljs-string\">\"赵六\"</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7777.77</span>, Status.FREE),\n\t\t\t<span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-number\">105</span>, <span class=\"hljs-string\">\"田七\"</span>, <span class=\"hljs-number\">38</span>, <span class=\"hljs-number\">5555.55</span>, Status.BUSY)\n\t);\n\t\n<span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test2</span><span class=\"hljs-params\">()</span></span>{\n    Optional&lt;Integer&gt; count = emps.stream()\n        .map((e) -&gt; <span class=\"hljs-number\">1</span>)\n        .reduce(Integer::sum);\n\n    System.out.println(count.get());\n}\n</code></pre>\n<p>3）、</p>\n<p>交易员类</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">//交易员类</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Trader</span> </span>{\n\n\t<span class=\"hljs-keyword\">private</span> String name;\n\t<span class=\"hljs-keyword\">private</span> String city;\n\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Trader</span><span class=\"hljs-params\">()</span> </span>{\n\t}\n\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Trader</span><span class=\"hljs-params\">(String name, String city)</span> </span>{\n\t\t<span class=\"hljs-keyword\">this</span>.name = name;\n\t\t<span class=\"hljs-keyword\">this</span>.city = city;\n\t}\n\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span> </span>{\n\t\t<span class=\"hljs-keyword\">return</span> name;\n\t}\n\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setName</span><span class=\"hljs-params\">(String name)</span> </span>{\n\t\t<span class=\"hljs-keyword\">this</span>.name = name;\n\t}\n\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getCity</span><span class=\"hljs-params\">()</span> </span>{\n\t\t<span class=\"hljs-keyword\">return</span> city;\n\t}\n\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setCity</span><span class=\"hljs-params\">(String city)</span> </span>{\n\t\t<span class=\"hljs-keyword\">this</span>.city = city;\n\t}\n\n\t<span class=\"hljs-meta\">@Override</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>{\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Trader [name=\"</span> + name + <span class=\"hljs-string\">\", city=\"</span> + city + <span class=\"hljs-string\">\"]\"</span>;\n\t}\n\n}\n\n</code></pre>\n<p>交易类</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">//交易类</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Transaction</span> </span>{\n\n\t<span class=\"hljs-keyword\">private</span> Trader trader;\n\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> year;\n\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> value;\n\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Transaction</span><span class=\"hljs-params\">()</span> </span>{\n\t}\n\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Transaction</span><span class=\"hljs-params\">(Trader trader, <span class=\"hljs-keyword\">int</span> year, <span class=\"hljs-keyword\">int</span> value)</span> </span>{\n\t\t<span class=\"hljs-keyword\">this</span>.trader = trader;\n\t\t<span class=\"hljs-keyword\">this</span>.year = year;\n\t\t<span class=\"hljs-keyword\">this</span>.value = value;\n\t}\n\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Trader <span class=\"hljs-title\">getTrader</span><span class=\"hljs-params\">()</span> </span>{\n\t\t<span class=\"hljs-keyword\">return</span> trader;\n\t}\n\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setTrader</span><span class=\"hljs-params\">(Trader trader)</span> </span>{\n\t\t<span class=\"hljs-keyword\">this</span>.trader = trader;\n\t}\n\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getYear</span><span class=\"hljs-params\">()</span> </span>{\n\t\t<span class=\"hljs-keyword\">return</span> year;\n\t}\n\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setYear</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> year)</span> </span>{\n\t\t<span class=\"hljs-keyword\">this</span>.year = year;\n\t}\n\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getValue</span><span class=\"hljs-params\">()</span> </span>{\n\t\t<span class=\"hljs-keyword\">return</span> value;\n\t}\n\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setValue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> value)</span> </span>{\n\t\t<span class=\"hljs-keyword\">this</span>.value = value;\n\t}\n\n\t<span class=\"hljs-meta\">@Override</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>{\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Transaction [trader=\"</span> + trader + <span class=\"hljs-string\">\", year=\"</span> + year + <span class=\"hljs-string\">\", value=\"</span>\n\t\t\t\t+ value + <span class=\"hljs-string\">\"]\"</span>;\n\t}\n\n}\n\n</code></pre>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestTransaction</span> </span>{\n\t\n\tList&lt;Transaction&gt; transactions = <span class=\"hljs-keyword\">null</span>;\n\t\n\t<span class=\"hljs-meta\">@Before</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">before</span><span class=\"hljs-params\">()</span></span>{\n\t\tTrader raoul = <span class=\"hljs-keyword\">new</span> Trader(<span class=\"hljs-string\">\"Raoul\"</span>, <span class=\"hljs-string\">\"Cambridge\"</span>);\n\t\tTrader mario = <span class=\"hljs-keyword\">new</span> Trader(<span class=\"hljs-string\">\"Mario\"</span>, <span class=\"hljs-string\">\"Milan\"</span>);\n\t\tTrader alan = <span class=\"hljs-keyword\">new</span> Trader(<span class=\"hljs-string\">\"Alan\"</span>, <span class=\"hljs-string\">\"Cambridge\"</span>);\n\t\tTrader brian = <span class=\"hljs-keyword\">new</span> Trader(<span class=\"hljs-string\">\"Brian\"</span>, <span class=\"hljs-string\">\"Cambridge\"</span>);\n\t\t\n\t\ttransactions = Arrays.asList(\n\t\t\t\t<span class=\"hljs-keyword\">new</span> Transaction(brian, <span class=\"hljs-number\">2011</span>, <span class=\"hljs-number\">300</span>),\n\t\t\t\t<span class=\"hljs-keyword\">new</span> Transaction(raoul, <span class=\"hljs-number\">2012</span>, <span class=\"hljs-number\">1000</span>),\n\t\t\t\t<span class=\"hljs-keyword\">new</span> Transaction(raoul, <span class=\"hljs-number\">2011</span>, <span class=\"hljs-number\">400</span>),\n\t\t\t\t<span class=\"hljs-keyword\">new</span> Transaction(mario, <span class=\"hljs-number\">2012</span>, <span class=\"hljs-number\">710</span>),\n\t\t\t\t<span class=\"hljs-keyword\">new</span> Transaction(mario, <span class=\"hljs-number\">2012</span>, <span class=\"hljs-number\">700</span>),\n\t\t\t\t<span class=\"hljs-keyword\">new</span> Transaction(alan, <span class=\"hljs-number\">2012</span>, <span class=\"hljs-number\">950</span>)\n\t\t);\n\t}\n\t\n\t<span class=\"hljs-comment\">//1. 找出2011年发生的所有交易， 并按交易额排序（从低到高）</span>\n\t<span class=\"hljs-meta\">@Test</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test1</span><span class=\"hljs-params\">()</span></span>{\n\t\ttransactions.stream()\n\t\t\t\t\t.filter((t) -&gt; t.getYear() == <span class=\"hljs-number\">2011</span>)\n\t\t\t\t\t.sorted((t1, t2) -&gt; Integer.compare(t1.getValue(), t2.getValue()))\n\t\t\t\t\t.forEach(System.out::println);\n\t}\n\t\n\t<span class=\"hljs-comment\">//2. 交易员都在哪些不同的城市工作过？</span>\n\t<span class=\"hljs-meta\">@Test</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test2</span><span class=\"hljs-params\">()</span></span>{\n\t\ttransactions.stream()\n\t\t\t\t\t.map((t) -&gt; t.getTrader().getCity())\n\t\t\t\t\t.distinct()\n\t\t\t\t\t.forEach(System.out::println);\n\t}\n\t\n\t<span class=\"hljs-comment\">//3. 查找所有来自剑桥的交易员，并按姓名排序</span>\n\t<span class=\"hljs-meta\">@Test</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test3</span><span class=\"hljs-params\">()</span></span>{\n\t\ttransactions.stream()\n\t\t\t\t\t.filter((t) -&gt; t.getTrader().getCity().equals(<span class=\"hljs-string\">\"Cambridge\"</span>))\n\t\t\t\t\t.map(Transaction::getTrader)\n\t\t\t\t\t.sorted((t1, t2) -&gt; t1.getName().compareTo(t2.getName()))\n\t\t\t\t\t.distinct()\n\t\t\t\t\t.forEach(System.out::println);\n\t}\n\t\n\t<span class=\"hljs-comment\">//4. 返回所有交易员的姓名字符串，按字母顺序排序</span>\n\t<span class=\"hljs-meta\">@Test</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test4</span><span class=\"hljs-params\">()</span></span>{\n\t\ttransactions.stream()\n\t\t\t\t\t.map((t) -&gt; t.getTrader().getName())\n\t\t\t\t\t.sorted()\n\t\t\t\t\t.forEach(System.out::println);\n\t\t\n\t\tSystem.out.println(<span class=\"hljs-string\">\"-----------------------------------\"</span>);\n\t\t\n\t\tString str = transactions.stream()\n\t\t\t\t\t.map((t) -&gt; t.getTrader().getName())\n\t\t\t\t\t.sorted()\n\t\t\t\t\t.reduce(<span class=\"hljs-string\">\"\"</span>, String::concat);\n\t\t\n\t\tSystem.out.println(str);\n\t\t\n\t\tSystem.out.println(<span class=\"hljs-string\">\"------------------------------------\"</span>);\n\t\t\n\t\ttransactions.stream()\n\t\t\t\t\t.map((t) -&gt; t.getTrader().getName())\n\t\t\t\t\t.flatMap(TestTransaction::filterCharacter)\n\t\t\t\t\t.sorted((s1, s2) -&gt; s1.compareToIgnoreCase(s2))\n\t\t\t\t\t.forEach(System.out::print);\n\t}\n\t\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Stream&lt;String&gt; <span class=\"hljs-title\">filterCharacter</span><span class=\"hljs-params\">(String str)</span></span>{\n\t\tList&lt;String&gt; list = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n\t\t\n\t\t<span class=\"hljs-keyword\">for</span> (Character ch : str.toCharArray()) {\n\t\t\tlist.add(ch.toString());\n\t\t}\n\t\t\n\t\t<span class=\"hljs-keyword\">return</span> list.stream();\n\t}\n\t\n\t<span class=\"hljs-comment\">//5. 有没有交易员是在米兰工作的？</span>\n\t<span class=\"hljs-meta\">@Test</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test5</span><span class=\"hljs-params\">()</span></span>{\n\t\t<span class=\"hljs-keyword\">boolean</span> bl = transactions.stream()\n\t\t\t\t\t.anyMatch((t) -&gt; t.getTrader().getCity().equals(<span class=\"hljs-string\">\"Milan\"</span>));\n\t\t\n\t\tSystem.out.println(bl);\n\t}\n\t\n\t\n\t<span class=\"hljs-comment\">//6. 打印生活在剑桥的交易员的所有交易额</span>\n\t<span class=\"hljs-meta\">@Test</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test6</span><span class=\"hljs-params\">()</span></span>{\n\t\tOptional&lt;Integer&gt; sum = transactions.stream()\n\t\t\t\t\t.filter((e) -&gt; e.getTrader().getCity().equals(<span class=\"hljs-string\">\"Cambridge\"</span>))\n\t\t\t\t\t.map(Transaction::getValue)\n\t\t\t\t\t.reduce(Integer::sum);\n\t\t\n\t\tSystem.out.println(sum.get());\n\t}\n\t\n\t\n\t<span class=\"hljs-comment\">//7. 所有交易中，最高的交易额是多少</span>\n\t<span class=\"hljs-meta\">@Test</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test7</span><span class=\"hljs-params\">()</span></span>{\n\t\tOptional&lt;Integer&gt; max = transactions.stream()\n\t\t\t\t\t.map((t) -&gt; t.getValue())\n\t\t\t\t\t.max(Integer::compare);\n\t\t\n\t\tSystem.out.println(max.get());\n\t}\n\t\n\t<span class=\"hljs-comment\">//8. 找到交易额最小的交易</span>\n\t<span class=\"hljs-meta\">@Test</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test8</span><span class=\"hljs-params\">()</span></span>{\n\t\tOptional&lt;Transaction&gt; op = transactions.stream()\n\t\t\t\t\t.min((t1, t2) -&gt; Integer.compare(t1.getValue(), t2.getValue()));\n\t\tSystem.out.println(op.get());\n\t}\n}\n</code></pre>\n<h4>并行流与串行流</h4>\n<p>并行流就是把一个内容分成多个数据块，并用不同的线程分别处理每个数据块的流。\nJava 8 中将并行进行了优化，我们可以很容易的对数据进行并行操作。<strong>Stream API 可以声明性地通过parallel() 与sequential() 在并行流与顺序流之间进行切换。</strong></p>\n<h4>了解Fork/Join 框架</h4>\n<p>Fork/Join 框架：就是在必要的情况下，将一个大任务，进行拆分(fork)成若干个小任务（拆到不可再拆时），再将一个个的小任务运算的结果进行join 汇总.</p>\n<p><img src=\"https://github.com/jiachao23/jcohy-study-sample/blob/91bd78d2d059f56b2090ea52e53e61b194788628/jcohy-study-java/src/main/resources/static/images/2.jpg\" alt=\"\"></p>\n<h5>Fork/Join 框架与传统线程池的区别</h5>\n<p>采用“工作窃取”模式（work-stealing）：\n当执行新的任务时它可以将其拆分分成更小的任务执行，并将小任务加到线程队列中，然后再从一个随机线程的队列中偷一个并把它放在自己的队列中。\n相对于一般的线程池实现,fork/join框架的优势体现在对其中包含的任务的处理方式上.在一般的线程池中,如果一个线程正在执行的任务由于某些原因无法继续运行,那么该线程会处于等待状态.而在fork/join框架实现中,如果某个子问题由于等待另外一个子问题的完成而无法继续运行.那么处理该子问题的线程会主动寻找其他尚未运行的子问题来执行.这种方式减少了线程的等待时间,提高了性能.</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ForkJoinCalculate</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">RecursiveTask</span>&lt;<span class=\"hljs-title\">Long</span>&gt;</span>{\n\n\t<span class=\"hljs-comment\">/**\n\t * \n\t */</span>\n\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> serialVersionUID = <span class=\"hljs-number\">13475679780L</span>;\n\t\n\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">long</span> start;\n\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">long</span> end;\n\t\n\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> THRESHOLD = <span class=\"hljs-number\">10000L</span>; <span class=\"hljs-comment\">//临界值</span>\n\t\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ForkJoinCalculate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span> start, <span class=\"hljs-keyword\">long</span> end)</span> </span>{\n\t\t<span class=\"hljs-keyword\">this</span>.start = start;\n\t\t<span class=\"hljs-keyword\">this</span>.end = end;\n\t}\n\t\n\t<span class=\"hljs-meta\">@Override</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> Long <span class=\"hljs-title\">compute</span><span class=\"hljs-params\">()</span> </span>{\n\t\t<span class=\"hljs-keyword\">long</span> length = end - start;\n\t\t\n\t\t<span class=\"hljs-keyword\">if</span>(length &lt;= THRESHOLD){\n\t\t\t<span class=\"hljs-keyword\">long</span> sum = <span class=\"hljs-number\">0</span>;\n\t\t\t\n\t\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">long</span> i = start; i &lt;= end; i++) {\n\t\t\t\tsum += i;\n\t\t\t}\n\t\t\t\n\t\t\t<span class=\"hljs-keyword\">return</span> sum;\n\t\t}<span class=\"hljs-keyword\">else</span>{\n\t\t\t<span class=\"hljs-keyword\">long</span> middle = (start + end) / <span class=\"hljs-number\">2</span>;\n\t\t\t\n\t\t\tForkJoinCalculate left = <span class=\"hljs-keyword\">new</span> ForkJoinCalculate(start, middle);\n\t\t\tleft.fork(); <span class=\"hljs-comment\">//拆分，并将该子任务压入线程队列</span>\n\t\t\t\n\t\t\tForkJoinCalculate right = <span class=\"hljs-keyword\">new</span> ForkJoinCalculate(middle+<span class=\"hljs-number\">1</span>, end);\n\t\t\tright.fork();\n\t\t\t\n\t\t\t<span class=\"hljs-keyword\">return</span> left.join() + right.join();\n\t\t}\n\t\t\n\t}\n\n}\n\n</code></pre>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestForkJoin</span> </span>{\n\t\n\t<span class=\"hljs-meta\">@Test</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test1</span><span class=\"hljs-params\">()</span></span>{\n\t\t<span class=\"hljs-keyword\">long</span> start = System.currentTimeMillis();\n\t\t\n\t\tForkJoinPool pool = <span class=\"hljs-keyword\">new</span> ForkJoinPool();\n\t\tForkJoinTask&lt;Long&gt; task = <span class=\"hljs-keyword\">new</span> ForkJoinCalculate(<span class=\"hljs-number\">0L</span>, <span class=\"hljs-number\">10000000000L</span>);\n\t\t\n\t\t<span class=\"hljs-keyword\">long</span> sum = pool.invoke(task);\n\t\tSystem.out.println(sum);\n\t\t\n\t\t<span class=\"hljs-keyword\">long</span> end = System.currentTimeMillis();\n\t\t\n\t\tSystem.out.println(<span class=\"hljs-string\">\"耗费的时间为: \"</span> + (end - start)); <span class=\"hljs-comment\">//112-1953-1988-2654-2647-20663-113808</span>\n\t}\n\t\n\t<span class=\"hljs-meta\">@Test</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test2</span><span class=\"hljs-params\">()</span></span>{\n\t\t<span class=\"hljs-keyword\">long</span> start = System.currentTimeMillis();\n\t\t\n\t\t<span class=\"hljs-keyword\">long</span> sum = <span class=\"hljs-number\">0L</span>;\n\t\t\n\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">long</span> i = <span class=\"hljs-number\">0L</span>; i &lt;= <span class=\"hljs-number\">10000000000L</span>; i++) {\n\t\t\tsum += i;\n\t\t}\n\t\t\n\t\tSystem.out.println(sum);\n\t\t\n\t\t<span class=\"hljs-keyword\">long</span> end = System.currentTimeMillis();\n\t\t\n\t\tSystem.out.println(<span class=\"hljs-string\">\"耗费的时间为: \"</span> + (end - start)); <span class=\"hljs-comment\">//34-3174-3132-4227-4223-31583</span>\n\t}\n\t\n\t<span class=\"hljs-meta\">@Test</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test3</span><span class=\"hljs-params\">()</span></span>{\n\t\t<span class=\"hljs-keyword\">long</span> start = System.currentTimeMillis();\n\t\t\n\t\tLong sum = LongStream.rangeClosed(<span class=\"hljs-number\">0L</span>, <span class=\"hljs-number\">10000000000L</span>)\n\t\t\t\t\t\t\t .parallel()\n\t\t\t\t\t\t\t .sum();\n\t\t\n\t\tSystem.out.println(sum);\n\t\t\n\t\t<span class=\"hljs-keyword\">long</span> end = System.currentTimeMillis();\n\t\t\n\t\tSystem.out.println(<span class=\"hljs-string\">\"耗费的时间为: \"</span> + (end - start)); <span class=\"hljs-comment\">//2061-2053-2086-18926</span>\n\t}\n\n}\n</code></pre>\n",
  "link": "\\zh-cn\\docs\\java\\java8\\Stream.html",
  "meta": {
    "title": "Java8新特性",
    "keywords": "docs,jcohy-docs,java8,Stream",
    "description": "Stream"
  }
}