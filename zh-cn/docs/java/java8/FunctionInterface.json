{
  "filename": "FunctionInterface.md",
  "__html": "<h2>2.函数式接口</h2>\n<h4>什么是函数式接口</h4>\n<ul>\n<li>只包含一个抽象方法的接口，称为函数式接口。</li>\n<li>你可以通过Lambda 表达式来创建该接口的对象。（若Lambda 表达式抛出一个受检异常，那么该异常需要在目标接口的抽象方法上进行声明）。</li>\n<li>我们可以在任意函数式接口上使用@FunctionalInterface注解，这样做可以检查它是否是一个函数式接口，同时javadoc也会包含一条声明，说明这个接口是一个函数式接口。</li>\n</ul>\n<h4>Java8中内置的四大核心函数式接口</h4>\n<table>\n<thead>\n<tr>\n<th>函数式接口</th>\n<th>参数类型</th>\n<th>返回类型</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Consumer&lt;T&gt; 消费型接口</td>\n<td>T</td>\n<td>void</td>\n<td>对类型为T的对象应用操作，包含方法：void accept(T t)</td>\n</tr>\n<tr>\n<td>Supplier&lt;T&gt;供给型接口</td>\n<td>无</td>\n<td>T</td>\n<td>返回类型为T的对象，包含方法：T get();</td>\n</tr>\n<tr>\n<td>Function&lt;T, R&gt; 函数型接口</td>\n<td>T</td>\n<td>R</td>\n<td>对类型为T的对象应用操作，并返回结果。结果是R类型的对象。包含方法：R apply(T t);</td>\n</tr>\n<tr>\n<td>Predicate&lt;T&gt;断定型接口</td>\n<td>T</td>\n<td>boolean</td>\n<td>确定类型为T的对象是否满足某约束，并返回boolean 值。包含方法boolean test(T t);</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>Consumer<T>：消费型接口</p>\n<p>void accept(T t)；</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test1</span><span class=\"hljs-params\">()</span></span>{\n    happy(<span class=\"hljs-number\">100000</span>,(m) -&gt; System.out.println(<span class=\"hljs-string\">\"吃饭花费了\"</span>+m+<span class=\"hljs-string\">\"元\"</span>));\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">happy</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">double</span> money, Consumer&lt;Double&gt; consumer)</span></span>{\n    consumer.accept(money);\n}\n</code></pre>\n</li>\n<li>\n<p>Supplier<T>：供给型接口</p>\n<p>T get();</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">//获取指定个数数字</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;Integer&gt; <span class=\"hljs-title\">getNumList</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> num, Supplier&lt;Integer&gt; supplier)</span></span>{\n    List&lt;Integer&gt; list = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;num;i++){\n        Integer integer = supplier.get();\n        list.add(integer);\n    }\n    <span class=\"hljs-keyword\">return</span> list;\n}\n\n<span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test2</span><span class=\"hljs-params\">()</span></span>{\n    List&lt;Integer&gt; numList = getNumList(<span class=\"hljs-number\">10</span>, () -&gt; (<span class=\"hljs-keyword\">int</span>)(Math.random() * <span class=\"hljs-number\">100</span>) );\n    <span class=\"hljs-keyword\">for</span> (Integer integer:numList ) {\n        System.out.println(integer);\n    }\n}\n</code></pre>\n</li>\n<li>\n<p>Function&lt;T,R&gt;：函数型接口</p>\n<p>R apply(T t);</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test3</span><span class=\"hljs-params\">()</span></span>{\n   String newStr = strHandler(<span class=\"hljs-string\">\"\\t\\t\\t 哈哈哈哈哈哈哈\"</span>,(str) -&gt; str.trim());\n    System.out.println(newStr);\n}\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">strHandler</span><span class=\"hljs-params\">(String str, Function&lt;String,String&gt; function)</span></span>{\n    <span class=\"hljs-keyword\">return</span> function.apply(str);\n}\n</code></pre>\n</li>\n<li>\n<p>Predicate<T>：断言型接口</p>\n<p>boolean test(T t)</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test4</span><span class=\"hljs-params\">()</span></span>{\n    List&lt;String&gt; list = Arrays.asList(<span class=\"hljs-string\">\"hellsssso\"</span>,<span class=\"hljs-string\">\"world\"</span>,<span class=\"hljs-string\">\"atcj\"</span>,<span class=\"hljs-string\">\"jcohy\"</span>);\n    List&lt;String&gt; str = filterStr(list, (x) -&gt; x.length() &gt; <span class=\"hljs-number\">4</span>);\n   <span class=\"hljs-keyword\">for</span>(String str1 :str){\n       System.out.println(str1);\n   }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;String&gt; <span class=\"hljs-title\">filterStr</span><span class=\"hljs-params\">(List&lt;String&gt; list, Predicate&lt;String&gt; pre)</span></span>{\n    List&lt;String&gt; strList = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n    <span class=\"hljs-keyword\">for</span>(String str:list){\n        <span class=\"hljs-keyword\">if</span>(pre.test(str)){\n            strList.add(str);\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> strList;\n}\n</code></pre>\n</li>\n</ul>\n<h4>其他接口</h4>\n<table>\n<thead>\n<tr>\n<th>函数式接口</th>\n<th>参数类型</th>\n<th>返回类型</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BiFunction&lt;T,U,R&gt;</td>\n<td>T,U</td>\n<td>R</td>\n<td>对类型为T,U参数应用操作，返回R类型的结果。包含方法为Rapply(Tt,Uu);</td>\n</tr>\n<tr>\n<td>UnaryOperator&lt;T&gt;(Function子接口)</td>\n<td>T</td>\n<td>T</td>\n<td>对类型为T的对象进行一元运算，并返回T类型的结果。包含方法为Tapply(Tt);</td>\n</tr>\n<tr>\n<td>BinaryOperator&lt;T&gt;(BiFunction子接口)</td>\n<td>T,T</td>\n<td>T</td>\n<td>对类型为T的对象进行二元运算，并返回T类型的结果。包含方法为Tapply(Tt1,Tt2);</td>\n</tr>\n<tr>\n<td>BiConsumer&lt;T,U&gt;</td>\n<td>T,U</td>\n<td>void</td>\n<td>对类型为T,U参数应用操作。包含方法为voidaccept(Tt,Uu)</td>\n</tr>\n<tr>\n<td>ToIntFunction&lt;T&gt; ToLongFunction&lt;T&gt;ToDoubleFunction&lt;T&gt;</td>\n<td>T</td>\n<td>int,long,double</td>\n<td>分别计算int、long、double、值的函数</td>\n</tr>\n<tr>\n<td>IntFunction&lt;R&gt;LongFunction&lt;R&gt;DoubleFunction&lt;R&gt;</td>\n<td>int,long,double</td>\n<td>R</td>\n<td>参数分别为int、long、double类型的函数</td>\n</tr>\n</tbody>\n</table>\n",
  "link": "\\zh-cn\\docs\\java\\java8\\FunctionInterface.html",
  "meta": {
    "title": "Java8新特性",
    "keywords": "docs,jcohy-docs,java8,函数式接口",
    "description": "函数式接口"
  }
}