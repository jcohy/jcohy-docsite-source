{
  "filename": "Optional.md",
  "__html": "<h2>5.Optional容器</h2>\n<p><strong>Optional<T> 类(java.util.Optional)</strong> 是一个容器类，代表一个值存在或不存在，原来用null 表示一个值不存在，现在Optional 可以更好的表达这个概念。并且可以避免空指针异常。\n常用方法：</p>\n<ul>\n<li>Optional.of(T t) : 创建一个Optional 实例</li>\n<li>Optional.empty() : 创建一个空的Optional 实例</li>\n<li>Optional.ofNullable(T t):若t 不为null,创建Optional 实例,否则创建空实例</li>\n<li>isPresent() : 判断是否包含值</li>\n<li>orElse(T t) : 如果调用对象包含值，返回该值，否则返回t</li>\n<li>orElseGet(Supplier s) :如果调用对象包含值，返回该值，否则返回s 获取的值</li>\n<li>map(Function f): 如果有值对其处理，并返回处理后的Optional，否则返回Optional.empty()</li>\n<li>flatMap(Function mapper):与map 类似，要求返回值必须是Optional</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/*\n * 一、Optional 容器类：用于尽量避免空指针异常\n * \tOptional.of(T t) : 创建一个 Optional 实例\n * \tOptional.empty() : 创建一个空的 Optional 实例\n * \tOptional.ofNullable(T t):若 t 不为 null,创建 Optional 实例,否则创建空实例\n * \tisPresent() : 判断是否包含值\n * \torElse(T t) :  如果调用对象包含值，返回该值，否则返回t\n * \torElseGet(Supplier s) :如果调用对象包含值，返回该值，否则返回 s 获取的值\n * \tmap(Function f): 如果有值对其处理，并返回处理后的Optional，否则返回 Optional.empty()\n * \tflatMap(Function mapper):与 map 类似，要求返回值必须是Optional\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestOptional</span> </span>{\n\t\n\t<span class=\"hljs-meta\">@Test</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test4</span><span class=\"hljs-params\">()</span></span>{\n\t\tOptional&lt;Employee&gt; op = Optional.of(<span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-number\">101</span>, <span class=\"hljs-string\">\"张三\"</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">9999.99</span>));\n\t\t\n\t\tOptional&lt;String&gt; op2 = op.map(Employee::getName);\n\t\tSystem.out.println(op2.get());\n\t\t\n\t\tOptional&lt;String&gt; op3 = op.flatMap((e) -&gt; Optional.of(e.getName()));\n\t\tSystem.out.println(op3.get());\n\t}\n\t\n\t<span class=\"hljs-meta\">@Test</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test3</span><span class=\"hljs-params\">()</span></span>{\n\t\tOptional&lt;Employee&gt; op = Optional.ofNullable(<span class=\"hljs-keyword\">new</span> Employee());\n\t\t\n\t\t<span class=\"hljs-keyword\">if</span>(op.isPresent()){\n\t\t\tSystem.out.println(op.get());\n\t\t}\n\t\t\n\t\tEmployee emp = op.orElse(<span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-string\">\"张三\"</span>));\n\t\tSystem.out.println(emp);\n\t\t\n\t\tEmployee emp2 = op.orElseGet(() -&gt; <span class=\"hljs-keyword\">new</span> Employee());\n\t\tSystem.out.println(emp2);\n\t}\n\t\n\t<span class=\"hljs-meta\">@Test</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test2</span><span class=\"hljs-params\">()</span></span>{\n\t\t<span class=\"hljs-comment\">/*Optional&lt;Employee&gt; op = Optional.ofNullable(null);\n\t\tSystem.out.println(op.get());*/</span>\n\t\t\n<span class=\"hljs-comment\">//\t\tOptional&lt;Employee&gt; op = Optional.empty();</span>\n<span class=\"hljs-comment\">//\t\tSystem.out.println(op.get());</span>\n\t}\n\n\t<span class=\"hljs-meta\">@Test</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test1</span><span class=\"hljs-params\">()</span></span>{\n\t\tOptional&lt;Employee&gt; op = Optional.of(<span class=\"hljs-keyword\">new</span> Employee());\n\t\tEmployee emp = op.get();\n\t\tSystem.out.println(emp);\n\t}\n\t\n\t<span class=\"hljs-meta\">@Test</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test5</span><span class=\"hljs-params\">()</span></span>{\n\t\tMan man = <span class=\"hljs-keyword\">new</span> Man();\n\t\t\n\t\tString name = getGodnessName(man);\n\t\tSystem.out.println(name);\n\t}\n\t\n\t<span class=\"hljs-comment\">//需求：获取一个男人心中女神的名字</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getGodnessName</span><span class=\"hljs-params\">(Man man)</span></span>{\n\t\t<span class=\"hljs-keyword\">if</span>(man != <span class=\"hljs-keyword\">null</span>){\n\t\t\tGodness g = man.getGod();\n\t\t\t\n\t\t\t<span class=\"hljs-keyword\">if</span>(g != <span class=\"hljs-keyword\">null</span>){\n\t\t\t\t<span class=\"hljs-keyword\">return</span> g.getName();\n\t\t\t}\n\t\t}\n\t\t\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"苍老师\"</span>;\n\t}\n\t\n\t<span class=\"hljs-comment\">//运用 Optional 的实体类</span>\n\t<span class=\"hljs-meta\">@Test</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test6</span><span class=\"hljs-params\">()</span></span>{\n\t\tOptional&lt;Godness&gt; godness = Optional.ofNullable(<span class=\"hljs-keyword\">new</span> Godness(<span class=\"hljs-string\">\"林志玲\"</span>));\n\t\t\n\t\tOptional&lt;NewMan&gt; op = Optional.ofNullable(<span class=\"hljs-keyword\">new</span> NewMan(godness));\n\t\tString name = getGodnessName2(op);\n\t\tSystem.out.println(name);\n\t}\n\t\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getGodnessName2</span><span class=\"hljs-params\">(Optional&lt;NewMan&gt; man)</span></span>{\n\t\t<span class=\"hljs-keyword\">return</span> man.orElse(<span class=\"hljs-keyword\">new</span> NewMan())\n\t\t\t\t  .getGodness()\n\t\t\t\t  .orElse(<span class=\"hljs-keyword\">new</span> Godness(<span class=\"hljs-string\">\"苍老师\"</span>))\n\t\t\t\t  .getName();\n\t}\n}\n\n</code></pre>\n",
  "link": "\\zh-cn\\docs\\java\\java8\\Optional.html",
  "meta": {
    "title": "Java8新特性",
    "keywords": "docs,jcohy-docs,java8,Optional容器",
    "description": "Optional容器"
  }
}