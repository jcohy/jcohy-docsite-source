{
  "filename": "block.md",
  "__html": "<h2>文本块（预览）</h2>\n<p>在JDK 12中引入了Raw String Literals特性，但在发布之前就放弃了。这个JEP与引入多行字符串文字（text block）在意义上是类似的。</p>\n<p>这条新特性跟 Kotlin 里的文本块是类似的。</p>\n<p>在Java中，通常需要使用String类型表达HTML，XML，SQL或JSON等格式的字符串，在进行字符串赋值时需要进行转义和连接操作，然后才能编译该代码，这种表达方式难以阅读并且难以维护。</p>\n<p>文本块就是指多行字符串，例如一段格式化后的xml、json等。而有了文本块以后，用户不需要转义，Java能自动搞定。因此，文本块将提高Java程序的可读性和可写性。</p>\n<h3>目标</h3>\n<blockquote>\n<ul>\n<li>简化跨越多行的字符串，避免对换行等特殊字符进行转义，简化编写Java程序。</li>\n<li>增强Java程序中字符串的可读性。</li>\n</ul>\n</blockquote>\n<h3>使用</h3>\n<pre><code class=\"language-java\">//jdk 13 之前\n\"&lt;html&gt;\\n\" +\n    \" &lt;body&gt;\\n\" +\n    \" &lt;p&gt;Hello, 尚硅谷&lt;/p&gt;\\n\" +\n    \" &lt;/body&gt;\\n\" +\n    \"&lt;/html&gt;\\n\";\n\n//jdk 13\n\"\"\"\n    &lt;html&gt;\n    &lt;body&gt;\n    &lt;p&gt;Hello, world&lt;/p&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\";\n</code></pre>\n<p>使用“”“作为文本块的开始符和结束符，在其中就可以放置多行的字符串，不需要进行任何转义。看起来就十分清爽了。</p>\n<p>如常见的SQL语句：</p>\n<pre><code class=\"language-sql\"><span class=\"hljs-keyword\">select</span> employee_id,last_name,salary,department_id\n<span class=\"hljs-keyword\">from</span> employees\n<span class=\"hljs-keyword\">where</span> department_id <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">40</span>,<span class=\"hljs-number\">50</span>,<span class=\"hljs-number\">60</span>)\n<span class=\"hljs-keyword\">order</span> <span class=\"hljs-keyword\">by</span> department_id <span class=\"hljs-keyword\">asc</span>\n</code></pre>\n<pre><code class=\"language-java\">//jdk 13之前\nString query = \"select employee_id,last_name,salary,department_id\\n\" +\n    \"from employees\\n\" +\n    \"where department_id in (40,50,60)\\n\" +\n    \"order by department_id asc\";\n\n//jdk 13\n\nString newQuery = \"\"\"\n    select employee_id,last_name,salary,department_id\n    from employees\n    where department_id in (40,50,60)\n    order by department_id asc\n    \"\"\";\n</code></pre>\n<h3>具体使用</h3>\n<h4>基本使用</h4>\n<ul>\n<li>文本块是Java语言中的一种新文字。它可以用来表示任何字符串，并且提供更大的表现力和更少的复杂性。</li>\n<li>文本块由零个或多个字符组成，由开始和结束分隔符括起来。\n<ul>\n<li>开始分隔符是由三个双引号字符（&quot;&quot;&quot;），后面可以跟零个或多个空格，最终以行终止符结束。文本块内容以开始分隔符的行终止符后的第一个字符开始。</li>\n<li>结束分隔符也是由三个双引号字符（&quot;&quot;&quot;）表示，文本块内容以结束分隔符的第一个双引号之前的最后一个字符结束。</li>\n</ul>\n</li>\n<li>文本块中的内容可以直接使用&quot;，&quot;，但不是必需的。</li>\n<li>文本块中的内容可以直接包括行终止符。允许在文本块中使用 \\n，但不是必需的。例如，文本块：</li>\n</ul>\n<pre><code class=\"language-java\">\"\"\"\nline1\nline2\nline3\n\"\"\"\n</code></pre>\n<p>相当于</p>\n<pre><code class=\"language-java\"><span class=\"hljs-string\">\"line1\\1 nline2\\nline3\\n\"</span>\n</code></pre>\n<p>或者一个连接的字符串：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-string\">\"line1\\n\"</span> +\n<span class=\"hljs-string\">\"line2\\n\"</span> +\n<span class=\"hljs-string\">\"line3\\n\"</span>\n</code></pre>\n<p>如果字符串末尾不需要行终止符，则结束分隔符可以放在最后一行内容上。例如：</p>\n<pre><code class=\"language-java\">\"\"\"\nline1\nline2\nline3\"\"\"\n</code></pre>\n<p>相当于:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-string\">\"line1\\nline2\\nline3\"</span>\n</code></pre>\n<p>文本块可以表示空字符串，但不建议这样做，因为它需要两行源代码：</p>\n<pre><code class=\"language-java\">String empty = \"\"\"\n\"\"\";\n</code></pre>\n<p>以下示例是错误格式的文本块：</p>\n<pre><code class=\"language-java\">String a = \"\"\"\"\"\"; // 开始分隔符后没有行终止符\nString b = \"\"\" \"\"\"; // 开始分隔符后没有行终止符\nString c = \"\"\"\n\"; // 没有结束分隔符\nString d = \"\"\"\nabc \\ def\n\"\"\"; // 含有未转义的反斜线（请参阅下面的转义处理）\n</code></pre>\n<p>在运行时，文本块将被实例化为String的实例，就像字符串一样。从文本块派生的String实例与从字符串派生的实例是无法区分的。具有相同内容的两个文本块将引用相同的String实例，就像字符串一样。</p>\n<h4>编译器在编译时会删除掉这些多余的空格。</h4>\n<p>下面这段代码中，我们用 . 来表示我们代码中的的空格，而这些位置的空格就是多余的。</p>\n<pre><code class=\"language-java\">String html = \"\"\"\n..............&lt;html&gt;\n.............. &lt;body&gt;\n.............. &lt;p&gt;Hello, world&lt;/p&gt;\n.............. &lt;/body&gt;\n..............&lt;/html&gt;\n..............\"\"\";\n</code></pre>\n<p>多余的空格还会出现在每一行的结尾，特别是当你从其他地方复制过来时，更容易出现这种情况，比如下面的代码：</p>\n<pre><code class=\"language-java\">String html = \"\"\"\n..............&lt;html&gt;...\n.............. &lt;body&gt;\n.............. &lt;p&gt;Hello, world&lt;/p&gt;....\n.............. &lt;/body&gt;.\n..............&lt;/html&gt;...\n..............\"\"\";\n</code></pre>\n<p>这些多余的空格对于程序员来说是看不到的，但是他又是实际存在的，所以如果编译器不做处理，可能会导致程序员看到的两个文本块内容是一样的，但是这两个文本块却因为存在这种多余的空格而导致差异，比如哈希值不相等。</p>\n<h4>转义字符</h4>\n<p>允许开发人员使用 \\n，\\f 和\\r 来进行字符串的垂直格式化，使用 \\b和 \\t进行水平格式化。比如下面的代码是合法的：</p>\n<pre><code class=\"language-java\">String html = \"\"\"\n    &lt;html&gt;\\n\n    &lt;body&gt;\\n\n    &lt;p&gt;Hello, world&lt;/p&gt;\\n\n    &lt;/body&gt;\\n\n    &lt;/html&gt;\\n\n    \"\"\";\n</code></pre>\n<p>请注意，在文本块内自由使用&quot;是合法的。例如:</p>\n<pre><code class=\"language-java\">String story = \"\"\"\n    \"When I use a word,\" Humpty Dumpty said,\nin rather a scornful tone, \"it means just what I\n    choose it to mean - neither more nor less.\"\n    \"The question is,\" said Alice, \"whether you\n    can make words mean so many different things.\"\n    \"The question is,\" said Humpty Dumpty,\n\"which is to be master - that's all.\"\n    \"\"\";\n</code></pre>\n<p>但是，三个&quot;字符的序列需要进行转义至少一个&quot;以避免模仿结束分隔符：</p>\n<pre><code class=\"language-java\">String code =\n    \"\"\"\n    String text = \\\"\"\"\n    A text block inside a text block\n    \\\"\"\";\n    \"\"\";\n</code></pre>\n<h4>文本块连接</h4>\n<p>可以在任何可以使用字符串的地方使用文本块。例如，文本块和字符串可以相互连接：</p>\n<pre><code class=\"language-java\">String code = \"public void print(Object o) {\" +\n    \"\"\"\n    System.out.println(Objects.toString(o));\n}\n\"\"\";\n</code></pre>\n<p>但是，涉及文本块的连接可能变得相当笨重。以下面文本块为基础：</p>\n<pre><code class=\"language-java\">String code = \"\"\"\n    public void print(Object o) {\n    System.out.println(Objects.toString(o));\n}\n\"\"\";\n</code></pre>\n<p>假设我们想把上面的Object改为来自某一变量，我们可能会这么写：</p>\n<pre><code class=\"language-java\">String code = \"\"\"\n    public void print(\"\"\" + type + \"\"\"\n                      o) {\n    System.out.println(Objects.toString(o));\n}\n\"\"\";\n</code></pre>\n<p>可以发现这种写法可读性是非常差的，更简洁的替代方法是使用String :: replace或String :: format，比如：另一个方法是使用String :: formatted，这是一个新方法，比如：</p>\n<pre><code class=\"language-java\">String code = \"\"\"\n    public void print($type o) {\n    System.out.println(Objects.toString(o));\n}\n\"\"\".replace(\"$type\", type);\n</code></pre>\n<pre><code class=\"language-java\">String code = String.format(\"\"\"\n                            public void print(%s o) {\n                                System.out.println(Objects.toString(o));\n                            }\n                            \"\"\", type);\n</code></pre>\n<p>另一个方法是使用String :: formatted，这是一个新方法，比如：</p>\n<pre><code class=\"language-java\">String source = \"\"\"\n    public void print(%s object) {\n    System.out.println(Objects.toString(object));\n}\n\"\"\".formatted(type);\n</code></pre>\n",
  "link": "\\zh-cn\\docs\\java\\java13\\block.html",
  "meta": {
    "title": "文本块（预览）",
    "keywords": "docs,jcohy-docs,文本块（预览,java13",
    "description": "文本块（预览）"
  }
}