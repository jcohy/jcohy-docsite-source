{
  "filename": "switch.md",
  "__html": "<h2>switch表达式（预览）</h2>\n<blockquote>\n<p>在JDK 12中引入了Switch表达式作为预览特性。JDK 13提出了第二个switch表达式预览。JEP 354修改了这个特性，它引入了yield语句，用于返回值。这意味着，switch表达式(返回值)应该使用yield, switch语句(不返回值)应该使用break。</p>\n<p>在 JDK 12中有一个，但是要进行一个更改：要从 switch 表达式中生成一个值 break，要删除with value语句以支持a yield 声明。目的是扩展，switch 以便它可以用作语句或表达式，因此两个表单既可以使用 case ... : 带有连贯符号的传统标签，也可以使用新 <strong>case … -&gt;</strong> 标签，而不需要通过，还有一个新的语句用于从 switch 表达式中产生值。这些更改将简化编码并为<a href=\"https://openjdk.java.net/jeps/305\">模式匹配</a>做好准备。</p>\n</blockquote>\n<p>在以前，我们想要在switch中返回内容，还是比较麻烦的，一般语法如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testSwitch1</span><span class=\"hljs-params\">()</span></span>{\n    String x = <span class=\"hljs-string\">\"3\"</span>;\n    <span class=\"hljs-keyword\">int</span> i;\n    <span class=\"hljs-keyword\">switch</span> (x) {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"1\"</span>:\n            i=<span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"2\"</span>:\n            i=<span class=\"hljs-number\">2</span>;\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">default</span>:\n            i = x.length();\n            <span class=\"hljs-keyword\">break</span>;\n    }\n    System.out.println(i);\n}\n</code></pre>\n<p>在JDK13中使用以下语法：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testSwitch2</span><span class=\"hljs-params\">()</span></span>{\n    String x = <span class=\"hljs-string\">\"3\"</span>;\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-keyword\">switch</span> (x) {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"1\"</span> -&gt; <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"2\"</span> -&gt; <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-keyword\">default</span> -&gt; {\n            yield <span class=\"hljs-number\">3</span>;\n        }\n    };\n    System.out.println(i);\n}\n</code></pre>\n<p>或者</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testSwitch3</span><span class=\"hljs-params\">()</span> </span>{\n    String x = <span class=\"hljs-string\">\"3\"</span>;\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-keyword\">switch</span> (x) {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"1\"</span>:\n            yield <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"2\"</span>:\n            yield <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-keyword\">default</span>:\n            yield <span class=\"hljs-number\">3</span>;\n    };\n    System.out.println(i);\n}\n</code></pre>\n<p>在这之后，switch中就多了一个关键字用于跳出 switch 块了，那就是 yield，他用于返回一个值。和return的区别在于：return会直接跳出当前循环或者方法，而yield只会跳出当前switch块。</p>\n",
  "link": "\\zh-cn\\docs\\java\\java13\\switch.html",
  "meta": {
    "title": "switch表达式（预览）",
    "keywords": "docs,jcohy-docs,switch表达式（预览）,java13",
    "description": "switch表达式（预览）"
  }
}