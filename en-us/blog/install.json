{
  "filename": "install.md",
  "__html": "<h1>Linux下常用软件安装</h1>\n<blockquote>\n<h3>PS:待开发中。。。。</h3>\n<h3>作者：jiac</h3>\n</blockquote>\n<h2>安装目录</h2>\n<blockquote>\n<ul>\n<li><a href=\"#%E8%BD%AF%E7%A1%AC%E4%BB%B6%E7%8E%AF%E5%A2%83\">软硬件环境</a></li>\n<li><a href=\"#jdk\">JDK</a></li>\n<li><a href=\"#tomcat\">Tomcat</a></li>\n<li><a href=\"#mysql\">Mysql</a></li>\n<li><a href=\"#redis\">Redis</a></li>\n<li><a href=\"#nginx\">Nginx</a></li>\n<li><a href=\"#git\">git</a></li>\n<li><a href=\"#gitlab\">gitlab</a></li>\n<li><a href=\"#node\">node</a></li>\n<li><a href=\"#yapi\">yapi</a></li>\n<li><a href=\"#mongodb\">mongodb</a></li>\n<li><a href=\"#docker\">docker</a></li>\n<li><a href=\"#jenkins\">Jenkins</a></li>\n</ul>\n</blockquote>\n<p id =\"软硬件环境\">\n<h2>软硬件环境</h2>\n<table>\n<thead>\n<tr>\n<th>软件</th>\n<th>相关软件包或版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>操作系统</td>\n<td>CentOS Linux release 7.6.1810</td>\n</tr>\n<tr>\n<td>jdk</td>\n<td>jdk-8u221-linux-x64.tar.gz</td>\n</tr>\n<tr>\n<td>tomcat</td>\n<td>apache-tomcat-7.0.94.tar.gz</td>\n</tr>\n<tr>\n<td>mysql</td>\n<td>mysql-8.0.16-2.el7.x86_64.rpm-bundle.tar</td>\n</tr>\n<tr>\n<td>redis</td>\n<td>redis-5.0.5.tar.gz</td>\n</tr>\n<tr>\n<td>nginx</td>\n<td>nginx-1.6.2.build.tar.gz</td>\n</tr>\n<tr>\n<td>git</td>\n<td>release</td>\n</tr>\n<tr>\n<td>gitlab</td>\n<td>release</td>\n</tr>\n<tr>\n<td>node</td>\n<td>node-v10.16.0.tar.gz</td>\n</tr>\n<tr>\n<td>yapi</td>\n<td>release</td>\n</tr>\n<tr>\n<td>mongodb</td>\n<td>release</td>\n</tr>\n<tr>\n<td>docker</td>\n<td>release</td>\n</tr>\n<tr>\n<td>jenkins</td>\n<td>release</td>\n</tr>\n<tr>\n<td>gcc</td>\n<td>gcc-8.3.0.tar.gz</td>\n</tr>\n</tbody>\n</table>\n<p id =\"jdk\">\n<h2>JDK</h2>\n<h3>下载地址</h3>\n<p><a href=\"http://software.jcohy.com/linux/jdk-8u221-linux-x64.tar.gz\">http://software.jcohy.com/linux/jdk-8u221-linux-x64.tar.gz</a></p>\n<h3>常规安装</h3>\n<p>1、用FileZilla或其他工具将下载好的安装包上传至Linux服务器。放置在 <strong>/opt/software/</strong> 目录下。这里使用的是 <strong>jdk-8u221-linux-x64.tar.gz</strong></p>\n<p>2、解压jdk到/usr/local目录</p>\n<pre><code class=\"language-shell\">tar -zxvf jdk-8u221-linux-x64.tar.gz -C /usr/local/\n</code></pre>\n<p>3、设置环境变量，在/etc/profile文件最后追加相关内容</p>\n<pre><code class=\"language-shell\">vi /etc/profile\n\nexport JAVA_HOME=/usr/local/jdk1.8.0_221\nexport PATH=$PATH:$JAVA_HOME/bin\n</code></pre>\n<p>4、刷新环境变量</p>\n<pre><code class=\"language-shell\">source /etc/profile\n</code></pre>\n<p>5、测试java命令是否可用</p>\n<pre><code class=\"language-shell\">java -version\n</code></pre>\n<p id =\"tomcat\">\n<h2>Tomcat</h2>\n<h3>下载地址</h3>\n<p><a href=\"http://software.jcohy.com/linux/apache-tomcat-7.0.94.tar.gz\">http://software.jcohy.com/linux/apache-tomcat-7.0.94.tar.gz</a></p>\n<h3>常规安装</h3>\n<p>1、用FileZilla或其他工具将下载好的安装包上传至Linux服务器。放置在 <strong>/opt/software/</strong> 目录下。这里使用的是 <strong>apache-tomcat-7.0.94.tar.gz</strong></p>\n<p>2、解压tomcat</p>\n<pre><code class=\"language-shell\">tar -zxvf apache-tomcat-7.0.94.tar.gz -C /usr/local/\n</code></pre>\n<p>3、启动tomcat</p>\n<pre><code class=\"language-shell\">/usr/local/apache-tomcat-7.0.94/bin/startup.sh\n</code></pre>\n<p>4、查看tomcat进程是否启动</p>\n<pre><code class=\"language-shell\">jps\n</code></pre>\n<p>5、查看tomcat进程端口</p>\n<pre><code class=\"language-shell\">netstat -anpt | grep 2465\n</code></pre>\n<p>6、通过浏览器访问tomcat</p>\n<p><a href=\"http://192.168.11.231:8080/\">http://192.168.11.231:8080/</a></p>\n<p id =\"mysql\">\n<h2>mysql</h2>\n<h3>下载地址</h3>\n<p><a href=\"https://pan.baidu.com/s/1iP5QDXSYHQ5q61cBFQvs-A\">https://pan.baidu.com/s/1iP5QDXSYHQ5q61cBFQvs-A</a></p>\n<h3>常规安装</h3>\n<ol>\n<li>\n<p>用FileZilla或其他工具将下载好的安装包上传至Linux服务器。放置在 <strong>/opt/software/</strong> 目录下。这里使用的是 <strong>mysql-8.0.16-2.el7.x86_64.rpm-bundle.tar</strong></p>\n</li>\n<li>\n<p>解压mysql</p>\n</li>\n</ol>\n<pre><code class=\"language-shell\">\tmkdir -p /usr/local/mysql\n\ttar -xvf mysql-8.0.16-2.el7.x86_64.rpm-bundle.tar\n</code></pre>\n<ol start=\"3\">\n<li>centos7默认集成了MariaDB，而安装mysql的话会和mariadb的文件冲突，所以需要先卸载掉mariadb</li>\n</ol>\n<pre><code class=\"language-shell\">\tyum remove mariadb\n\trpm -qa|grep mariadb-libs\n\trpm -e mariadb-libs-5.5.60-1.el7_5.x86_64 --nodeps\n</code></pre>\n<ol start=\"4\">\n<li>安装相关依赖</li>\n</ol>\n<pre><code class=\"language-shell\">yum search libaio  # 检索相关信息\nyum install -y libaio # 安装依赖包\n\nyum search net-tools\nyum install -y net-tools\n\nyum search perl\nyum install -y perl \n\nyum install -y numactl\n</code></pre>\n<ol start=\"5\">\n<li>mysql rpm 安装顺序</li>\n</ol>\n<pre><code class=\"language-xml\">rpm -ivh mysql-community-common-8.0.16-2.el7.x86_64.rpm   \nrpm -ivh mysql-community-libs-8.0.16-2.el7.x86_64.rpm   \nrpm -ivh mysql-community-client-8.0.16-2.el7.x86_64.rpm  \nrpm -ivh mysql-community-server-8.0.16-2.el7.x86_64.rpm \n</code></pre>\n<p>6.设置开机启动</p>\n<pre><code class=\"language-shell\">systemctl enable mysqld\n</code></pre>\n<p>7.启动mysql</p>\n<pre><code class=\"language-shell\">systemctl start mysqld\n</code></pre>\n<p>8、mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改：</p>\n<pre><code class=\"language-shell\">grep 'temporary password' /var/log/mysqld.log\n\nmysql -uroot -p\n</code></pre>\n<p>9、登录上去后，使用下列语句更新密码</p>\n<pre><code class=\"language-shell\"> ALTER USER 'root'@'localhost' IDENTIFIED BY 'jia_chao23@126.com';\n</code></pre>\n<p>mysql 5.8 修改密码加密方式，改成mysql_native_password,然后修改密码</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"> #</span><span class=\"bash\">查看密码加密方式</span>\n use mysql\n select host,user,plugin  from mysql.user;\n \n\n ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'jia_chao23@126.com';\n ALTER USER 'root'@'%' IDENTIFIED BY 'jia_chao23@126.com';\n ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'jia_chao23@126.com';\n ALTER USER 'root'@'localhost' IDENTIFIED BY 'jia_chao23@126.com';\n flush privileges;\n\n</code></pre>\n<p>10、修改密码策略</p>\n<p>mysql5.8默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR 1819 (HY000): Your\npassword does not satisfy the current policy requirements错误，如下图所示：</p>\n<p><img src=\"https://github.com/jiachao23/jcohy-study-sample/blob/master/jcohy-study-linux/images/1.jpg\" alt=\"\"></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\">查看密码策略的相关信息</span>\nshow variables like '%password%';\n</code></pre>\n<p>validate_password_policy：密码策略，默认为MEDIUM策略\nvalidate_password_dictionary_file：密码策略文件，策略为STRONG才需要\nvalidate_password_length：密码最少长度\nvalidate_password_mixed_case_count：大小写字符长度，至少1个\nvalidate_password_number_count ：数字至少1个\nvalidate_password_special_char_count：特殊字符至少1个\n<em>上述参数是默认策略<strong>MEDIUM</strong>的密码检查规则</em></p>\n<pre><code class=\"language-shell\">set global validate_password_policy=0;\nselect @@validate_password_length;\nset global validate_password_length=1;\n</code></pre>\n<p>11、添加远程登录用户</p>\n<pre><code class=\"language-shell\">GRANT ALL PRIVILEGES ON *.* TO 'jiac'@'%' IDENTIFIED BY 'jiac0917!' WITH GRANT OPTION;\n</code></pre>\n<p>12、配置默认编码为utf8</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\">修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示：</span>\n[mysqld]\ncharacter_set_server=utf8\ninit_connect='SET NAMES utf8'\n</code></pre>\n<p>13、开启端口访问</p>\n<pre><code class=\"language-shell\">firewall-cmd --permanent --zone=public --add-port=3306/tcp\nfirewall-cmd --permanent --zone=public --add-port=3306/udp\nfirewall-cmd --reload\nfirewall-cmd --list-ports  \n</code></pre>\n<p>14、开启远程登录</p>\n<pre><code class=\"language-shell\">CREATE USER 'root'@'%' IDENTIFIED BY 'jiac0917!';\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;\nflush privileges;\n</code></pre>\n<p id =\"redis\">\n<h2>Redis</h2>\n<h3>下载地址</h3>\n<p><a href=\"https://pan.baidu.com/s/1iP5QDXSYHQ5q61cBFQvs-A\">https://pan.baidu.com/s/1iP5QDXSYHQ5q61cBFQvs-A</a></p>\n<p><a href=\"https://github.com/MSOpenTech/redis/releases\">https://github.com/MSOpenTech/redis/releases</a></p>\n<h3>常规安装</h3>\n<p>1、<a href=\"https://github.com/MSOpenTech/redis/releases\">到官网</a>下载redis安装包</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> wget http://download.redis.io/releases/redis-5.0.5.tar.gz</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> tar xzf redis-5.0.5.tar.gz</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> redis-5.0.5</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> make</span>\n</code></pre>\n<p>2、make完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server,还有用于测试的客户端程序redis-cli,两个程序位于安装目录 src 目录下：</p>\n<p>下面启动redis服务.</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> src</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> ./redis-server</span>\n</code></pre>\n<p>3、注意这种方式启动redis 使用的是默认配置。也可以通过启动参数告诉redis使用指定配置文件使用下面命令启动。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> src</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> ./redis-server ../redis.conf</span>\n</code></pre>\n<p>4、<strong>redis.conf</strong> 是一个默认的配置文件。我们可以根据需要使用自己的配置文件。</p>\n<p>启动redis服务进程后，就可以使用测试客户端程序redis-cli和redis服务交互了。 比如：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> src</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> ./redis-cli</span>\n<span class=\"hljs-meta\">redis&gt;</span><span class=\"bash\"> <span class=\"hljs-built_in\">set</span> foo bar</span>\nOK\n<span class=\"hljs-meta\">redis&gt;</span><span class=\"bash\"> get foo</span>\n\"bar\"\n</code></pre>\n<h3>docker安装</h3>\n<p>1、使用docker安装<a href=\"http://www.runoob.com/docker/docker-install-redis.html\">redis</a></p>\n<pre><code class=\"language-shell\">docker pull redis\nmkdir -p /docker/redis/conf /docker/redis/data\ndocker run --restart=always --privileged=true -p 6379:6379 -v /docker/redis/data:/data -v /docker/redis/conf/redis.conf:/etc/redis/redis.conf --name myredis -d redis redis-server --appendonly yes\n\n</code></pre>\n<p id =\"nginx\">\n<h2>nginx</h2>\n<h3>下载地址：</h3>\n<p><a href=\"http://nginx.org/en/linux_packages.html#RHEL-CentOS\">http://nginx.org/en/linux_packages.html#RHEL-CentOS</a></p>\n<p><a href=\"http://software.jcohy.com/linux/nginx-1.6.2.tar.gz\">http://software.jcohy.com/linux/nginx-1.6.2.tar.gz</a></p>\n<h3>常规安装</h3>\n<p>1、安装编译工具及库文件</p>\n<pre><code class=\"language-shell\">yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel\n</code></pre>\n<p>2、首先要安装 PCRE</p>\n<ul>\n<li>下载 PCRE 安装包，下载地址： <a href=\"http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz\">http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz</a></li>\n</ul>\n<pre><code class=\"language-shell\">[root@bogon src]# cd /opt/software\n[root@bogon src]# wget http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz\n</code></pre>\n<ul>\n<li>解压安装包:</li>\n</ul>\n<pre><code class=\"language-shell\">[root@bogon src]# tar zxvf pcre-8.35.tar.gz\n</code></pre>\n<ul>\n<li>进入安装包目录</li>\n</ul>\n<pre><code class=\"language-shell\">[root@bogon src]# cd pcre-8.35\n</code></pre>\n<ul>\n<li>编译安装</li>\n</ul>\n<pre><code class=\"language-shell\">[root@bogon pcre-8.35]# ./configure\n[root@bogon pcre-8.35]# make &amp;&amp; make install\n</code></pre>\n<ul>\n<li>查看pcre版本</li>\n</ul>\n<pre><code class=\"language-shell\">[root@bogon pcre-8.35]# pcre-config --version\n</code></pre>\n<p>3、安装 Nginx</p>\n<ul>\n<li>下载 Nginx，下载地址：<a href=\"http://nginx.org/download/nginx-1.6.2.tar.gz\">http://nginx.org/download/nginx-1.6.2.tar.gz</a></li>\n</ul>\n<pre><code class=\"language-shell\">[root@bogon src]# cd /opt/software\n[root@bogon src]# wget http://nginx.org/download/nginx-1.6.2.tar.gz\n</code></pre>\n<ul>\n<li>安装包</li>\n</ul>\n<pre><code class=\"language-shell\">[root@bogon src]# tar zxvf nginx-1.6.2.tar.gz\n</code></pre>\n<ul>\n<li>进入安装包目录</li>\n</ul>\n<pre><code class=\"language-shell\">[root@bogon src]# cd nginx-1.6.2\n</code></pre>\n<ul>\n<li>编译安装</li>\n</ul>\n<pre><code class=\"language-shell\">[root@bogon nginx-1.6.2]# ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=//opt/software/pcre-8.35\n[root@bogon nginx-1.6.2]# make &amp;&amp; make install\n</code></pre>\n<ul>\n<li>查看nginx版本</li>\n</ul>\n<pre><code class=\"language-shell\">[root@bogon nginx-1.6.2]# /usr/local/nginx/sbin/nginx -v\n</code></pre>\n<p>4、启动nginx</p>\n<pre><code class=\"language-shell\">[root@bogon conf]# /usr/local/nginx/sbin/nginx\n</code></pre>\n<p>5、Nginx 其他命令</p>\n<pre><code class=\"language-shell\">/usr/local/webserver/nginx/sbin/nginx -s reload            # 重新载入配置文件\n/usr/local/webserver/nginx/sbin/nginx -s reopen            # 重启 Nginx\n/usr/local/webserver/nginx/sbin/nginx -s stop              # 停止 Nginx\n</code></pre>\n<p>6、错误处理</p>\n<pre><code>src/core/ngx_murmurhash.c: In function ‘ngx_murmur_hash2’:\n\n原因，是将警告当成了错误处理，打开/usr/local/nginx-1.6.2/objs/Makefile，\n去掉CFLAGS中的 -Werror\n再重新make\n</code></pre>\n<h3>docker安装</h3>\n<p>1、使用docker安装<a href=\"http://www.runoob.com/docker/docker-install-nginx.html\">nginx</a></p>\n<pre><code class=\"language-shell\">docker pull nginx\n\nmkdir -p /docker/nginx/www /docker/nginx/logs /docker/nginx/conf\n\ndocker run -d -p 80:80 --name nginx -v /docker/nginx/www:/usr/share/nginx/html -v /docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /docker/nginx/logs:/var/log/nginx nginx\n</code></pre>\n<h3>使用编译后软件包安装</h3>\n<p>这里本人将nginx软件进行了编译。使用编译后的文件直接解压使用即可。</p>\n<p><a href=\"https://software.jcohy.com/linux/nginx-1.6.2.build.tar.gz\">https://software.jcohy.com/linux/nginx-1.6.2.build.tar.gz</a></p>\n<pre><code>tar -zxvf nginx-1.6.2.build.tar.gz  -C /usr/local\n</code></pre>\n<p id =\"rabbit\">\n<h2>RabbitMq</h2>\n<h3>下载地址</h3>\n<h3>常规安装</h3>\n<p>1、由于RabbitMQ依赖Erlang， 所以需要先安装Erlang</p>\n<pre><code class=\"language-shell\">  wget https://packages.erlang-solutions.com/erlang-solutions-1.0-1.noarch.rpm\n  rpm -Uvh erlang-solutions-1.0-1.noarch.rpm\n  yum install erlang\n</code></pre>\n<p>2、安装</p>\n<pre><code class=\"language-shell\">  wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.6/rabbitmq-server-3.6.6-1.el7.noarch.rpm\n  yum install rabbitmq-server-3.6.6-1.el7.noarch.rpm\n</code></pre>\n<p>3、启动</p>\n<pre><code class=\"language-shell\">  rabbitmq-server start\n</code></pre>\n<p>4、开启web管理接口</p>\n<pre><code class=\"language-shell\">rabbitmq-plugins enable rabbitmq_management\n</code></pre>\n<p>5、通过浏览器访问</p>\n<pre><code class=\"language-shell\">  http://localhost:15672\n</code></pre>\n<p>6、其他命令</p>\n<pre><code class=\"language-shell\">sudo chkconfig rabbitmq-server on  # 添加开机启动RabbitMQ服务\n/sbin/service rabbitmq-server start # 启动服务\n/sbin/service rabbitmq-server status  # 查看服务状态\n/sbin/service rabbitmq-server stop   # 停止服务\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 查看当前所有用户</span>\nrabbitmqctl list_users\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 查看默认guest用户的权限</span>\nrabbitmqctl list_user_permissions guest\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 由于RabbitMQ默认的账号用户名和密码都是guest。为了安全起见, 先删掉默认用户</span>\nrabbitmqctl delete_user guest\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 添加新用户</span>\nrabbitmqctl add_user username password\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 设置用户tag</span>\nrabbitmqctl set_user_tags username administrator\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 赋予用户默认vhost的全部操作权限</span>\nrabbitmqctl set_permissions -p / username \".*\" \".*\" \".*\"\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 查看用户的权限</span>\nrabbitmqctl list_user_permissions username\n\n</code></pre>\n<h3>docker安装</h3>\n<pre><code>1、在docker官网查找docker镜像，https://hub.docker.com/\n\n2、拉取镜像,我们选择带有“mangement”的版本（包含web管理页面）\n</code></pre>\n<pre><code class=\"language-shell\">  docker pull rabbitmq:3.7.16-management\n\n  docker run --restart=always -d -p 5672:5672 -p 15672:15672 --name myrabbitmq 3f92e6354d11\n</code></pre>\n<p id =\"git\">\n<h2>git</h2>\n<pre><code class=\"language-shell\">yum -y install git-core\ngit --version\n</code></pre>\n<p id =\"gitlab\">\n<h2>gitlab</h2>\n<h3>下载地址</h3>\n<p><a href=\"https://about.gitlab.com/install/#centos-7\">https://about.gitlab.com/install/#centos-7</a></p>\n<h3>常规安装</h3>\n<p>1、安装依赖</p>\n<pre><code class=\"language-shell\">sudo yum install -y curl policycoreutils-python openssh-server\nsudo systemctl enable sshd\nsudo systemctl start sshd\nsudo firewall-cmd --permanent --add-service=http\nsudo systemctl reload firewalld\n\n\nsudo yum install postfix\nsudo systemctl enable postfix\nsudo systemctl start postfix\n</code></pre>\n<p>2、下载源码并安装</p>\n<pre><code class=\"language-shell\">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\n\nsudo EXTERNAL_URL=\"http://192.168.11.231:9090\" yum install -y gitlab-ee\n</code></pre>\n<p>3、修改gitlab配置文件指定服务器ip和自定义端口</p>\n<pre><code>vi  /etc/gitlab/gitlab.rb\n\nexternal_url -&gt; 服务器http://IP:端口\n</code></pre>\n<p>4、执行配置</p>\n<pre><code>gitlab-ctl reconfigure\n</code></pre>\n<p>5、启动：gitlab-ctl start 出现如下说明成功</p>\n<pre><code>ok: run: alertmanager: (pid 7324) 0s \nok: run: gitaly: (pid 7334) 0s \nok: run: gitlab-monitor: (pid 7355) 1s \nok: run: gitlab-workhorse: (pid 7360) 0s \nok: run: logrotate: (pid 7373) 1s \nok: run: nginx: (pid 7416) 0s \nok: run: node-exporter: (pid 7461) 0s \nok: run: postgres-exporter: (pid 7467) 1s \nok: run: postgresql: (pid 7473) 0s \nok: run: prometheus: (pid 7481) 1s \nok: run: redis: (pid 7492) 0s \nok: run: redis-exporter: (pid 7496) 1s \nok: run: sidekiq: (pid 7502) 0s \nok: run: unicorn: (pid 7517) 0s\n</code></pre>\n<p>6、修改储存位置</p>\n<pre><code>sudo vi /etc/gitlab/gitlab.rb \ngit_data_dirs -&gt; 修改成目标位置 \nsudo gitlab-ctl reconfigure 配置执行 \n重新启动\n</code></pre>\n<h3>Docker安装中文版</h3>\n<p><a href=\"https://docs.gitlab.com/omnibus/docker/\">https://docs.gitlab.com/omnibus/docker/</a></p>\n<p><a href=\"https://hub.docker.com/r/twang2218/gitlab-ce-zh\">https://hub.docker.com/r/twang2218/gitlab-ce-zh</a></p>\n<p>1、下载镜像</p>\n<pre><code class=\"language-shell\">docker pull twang2218/gitlab-ce-zh\n</code></pre>\n<p>2、运行</p>\n<pre><code class=\"language-shell\">docker run --detach \\\n  --hostname 192.168.11.238 \\\n  --publish 443:443 --publish 80:80 --publish 222:22 \\\n  --name gitlab \\\n  --restart always \\\n  --volume /opt/gitlab/config:/etc/gitlab  \\\n  --volume /opt/gitlab/logs:/var/log/gitlab \\\n  --volume /opt/gitlab/data:/var/opt/gitlab \\\n  twang2218/gitlab-ce-zh\n  \n  docker run -d \\\n    --hostname 192.168.11.238 \\\n    -p 80:80 \\\n    -p 443:443 \\\n    -p 222:22 \\\n    --privileged=true \\\n    --name gitlab \\\n    --restart always \\\n    -v /opt/gitlab/gitlab-config:/etc/gitlab \\\n    -v /opt/gitlab/gitlab-logs:/var/log/gitlab \\\n    -v /opt/gitlab/gitlab-data:/var/opt/gitlab \\\n   \ttwang2218/gitlab-ce-zh\n</code></pre>\n<p>3、数据存储</p>\n<table>\n<thead>\n<tr>\n<th><strong>当地的位置</strong></th>\n<th><strong>docker位置</strong></th>\n<th><strong>用法</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/opt/gitlab/config</td>\n<td>/etc/gitlab</td>\n<td>用于存储应用数据</td>\n</tr>\n<tr>\n<td>/opt/gitlab/logs</td>\n<td>/var/log/gitlab</td>\n<td>用于存储日志</td>\n</tr>\n<tr>\n<td>/srv/gitlab/config</td>\n<td>/var/opt/gitlab</td>\n<td>用于存储GitLab配置文件</td>\n</tr>\n</tbody>\n</table>\n<p>4、配置GitLab</p>\n<pre><code>docker exec -it gitlab /bin/bash\ndocker exec -it gitlab vi /etc/gitlab/gitlab.rb\n修改external_url\n\nsudo docker restart gitlab\n</code></pre>\n<p>5、查看log</p>\n<pre><code>docker logs -f gitlab\n</code></pre>\n<p>6、配置邮箱</p>\n<pre><code>gitlab_rails['smtp_enable'] = true\ngitlab_rails['smtp_address'] = &quot;smtp.exmail.qq.com&quot;\ngitlab_rails['smtp_port'] = 465\ngitlab_rails['smtp_user_name'] = &quot;jia_chao23@126.com&quot;\ngitlab_rails['smtp_password'] = &quot;Jia@1203&quot;\ngitlab_rails['smtp_authentication'] = &quot;login&quot;\ngitlab_rails['smtp_enable_starttls_auto'] = true\ngitlab_rails['smtp_tls'] = true\ngitlab_rails['gitlab_email_from'] = 'jia_chao23@126.com'\ngitlab_rails['smtp_domain'] = &quot;exmail.qq.com&quot;\n\n</code></pre>\n<p>7、常用操作</p>\n<pre><code>//外部操作\ndocker restart gitlab\ndocker stop gitlab\ndocker rm gitlab\n\n//内部操作\n//重新配置GitLab以使更改生效\ngitlab-ctl reconfigure\ngitlab-ctl restart\n//验证是否正确配置了所有内容：\ngitlab-rake gitlab:incoming_email:check\ngitlab-rails console\nNotify.test_email('jia_chao23@126.com', 'Message Subject', 'Message Body').deliver_now\n</code></pre>\n<p id =\"node\">\n<h2>node</h2>\n<h3>下载地址</h3>\n<p><a href=\"http://software.jcohy.com/linux/node-v10.16.0.tar.gz\">http://software.jcohy.com/linux/node-v10.16.0.tar.gz</a></p>\n<p><a href=\"http://nodejs.org/dist/v10.16.0/node-v10.16.0.tar.gz\">http://nodejs.org/dist/v10.16.0/node-v10.16.0.tar.gz</a></p>\n<h3>常规安装</h3>\n<p>1、下载并解压</p>\n<pre><code class=\"language-shell\">// 下载\nwget http://nodejs.org/dist/v10.16.0/node-v10.16.0.tar.gz   \n//解压\ntar -zxvf node-v10.16.0.tar.gz -C /usr/local/   \n</code></pre>\n<p>2、编译</p>\n<pre><code class=\"language-shell\">./configure --prefix=/usr/local/node/v10.16.0 \n</code></pre>\n<p>报错 C++ compiler too old, need g++ 4.9.4 or clang++ 3.4.2 (CXX=g++)</p>\n<pre><code class=\"language-shell\">//1、装bzip2解压工具\nyum -y install bzip2\n//2、下载gcc包\nwget https://ftp.gnu.org/gnu/gcc/gcc-7.3.0/gcc-7.3.0.tar.gz\n//3、安装依赖，自动下载可能会慢。建议手动下载，然后复制到安装目录下。需要下载以下四个包。下载地址：ftp://gcc.gnu.org/pub/gcc/infrastructure/\ngmp-6.1.0.tar.bz2: \nmpfr-3.1.4.tar.bz2: \nmpc-1.0.3.tar.gz: \nisl-0.16.1.tar.bz2: \n\n./contrib/download_prerequisites\n\n//3、建立编译输出目录\n\nmkdir gcc-build-7.3.0\n//4、进入下面目录，执行命令，生成Makefile文件\n\n../gcc-7.3.0/configure --enable-checking=release --enable-languages=c,c++ --disable-multilib\n//5、执行命令进行编译，此处利用4个job，需编译时约40分钟，此值不宜设置过高\n\nmake -j4\n\n//6 编译完成之后，需要把原来的GCC卸载，换成7.3.0版本的\nrpm -q gcc \nrpm -q gcc-c++\n\n删除已经安装低版本 \nrpm -e [包名] \n包名为上一步中显示的包，形如： \ngcc-4.8.5-16.el7_4.2.x86_64 \ngcc-c++-4.8.5-16.el7_4.2.x86_64\n\n那就删除吧 \nrpm -e gcc-4.8.5-16.el7_4.2.x86_64 \nrpm -e gcc-c++-4.8.5-16.el7_4.2.x86_64\n\n\n//7、安装 \nmake install\n\n//8、验证版本\nwhich gcc \n/usr/local/bin/gcc -v\n\n//9、添加环境变量\n//1、直接用export命令： \nexport PATH=$PATH:/usr/local/bin \n查看是否已经设好，可用命令export查看，或者直接echo $PATH\n\n//2、这个应该更靠谱一点，要不然有时候sudo的时候会提示找不到gcc命令 \nsudo ln -s /usr/local/bin/gcc /usr/bin/gcc \n(建立/usr/bin/gcc到编译安装gcc的软链接)\n</code></pre>\n<p>报错：</p>\n<pre><code>node: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.21' not found (required by node)\nnode: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.15' not found (required by node)\nnode: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.20' not found (required by node)\n</code></pre>\n<p><code>gcc</code>的动态库还是旧版本的。说明出现这些问题，是因为升级<code>gcc</code>时，生成的动态库没有替换老版本<code>gcc</code>的动态库。</p>\n<pre><code class=\"language-shell\">//1、执行以下命令，查找编译gcc时生成的最新动态库：\nfind / -name \"libstdc++.so*\"\n...\n/opt/software/gcc-build-7.3.0/prev-x86_64-pc-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.24\n/opt/software/gcc-build-7.3.0/prev-x86_64-pc-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6\n/opt/software/gcc-build-7.3.0/prev-x86_64-pc-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so\n/opt/software/gcc-build-7.3.0/x86_64-pc-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.24\n...\n\n//2、将上面的最新动态库libstdc++.so.6.0.21复制到/usr/lib64目录下：\n\ncp /opt/software/gcc-build-7.3.0/x86_64-pc-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.24 /usr/lib64\n\n//3、复制后，修改系统默认动态库的指向，即：重建默认库的软连接。\ncd /usr/lib64\nrm -rf libstdc++.so.6\nln -s libstdc++.so.6.0.21 libstdc++.so.6\n</code></pre>\n<h3>2、淘宝镜像安装</h3>\n<pre><code class=\"language-shell\">.cd  /usr/loacl/node/  \n\nwget https://npm.taobao.org/mirrors/node/v0.10.16/node-v0.10.16-linux-x64.tar.gz\n\ntar -zxvf node-v0.10.16-linux-x64.tar.gz\n\n\nln -s /usr/local/node/node-v0.10.16-linux-x64/bin/npm /usr/local/bin/npm\n\n\nln -s /usr/local/node/node-v0.10.16-linux-x64/bin/node /usr/local/bin/node\n\n\nnpm -v\n</code></pre>\n<p id =\"yapi\">\n<h2>yapi</h2>\n<ol>\n<li>确保 node 版本=&gt; 7.6,请运行 node -v 查看版本号</li>\n<li>确保 mongodb 版本 =&gt; 2.6，请运行 mongo --version 查看版本号</li>\n<li>确保安装了 npm, 运行 npm -v 查看版本号</li>\n<li>确保安装了 git,运行 git --version 查看版本号</li>\n<li>确保安装了 node-gyp 环境，<a href=\"https://github.com/nodejs/node-gyp#on-unix\">配置方法</a></li>\n</ol>\n<pre><code class=\"language-shell\">npm install -g yapi-cli --registry https://registry.npm.taobao.org\nyapi server \n</code></pre>\n<p id =\"mongodb\">\n<h2>mongodb</h2>\n<pre><code>wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz\n\n</code></pre>\n<p id =\"docker\">\n<h2>docker</h2>\n<pre><code class=\"language-shell\">yum -y install docker\nsystemctl daemon-reload\nsystemctl restart docker.service\n</code></pre>\n<p><a href=\"https://docs.docker.com/install/\">https://docs.docker.com/install/</a></p>\n<p>报错：IPv4 forwarding is disabled. Networking will not work.</p>\n<pre><code class=\"language-shell\">vim  /usr/lib/sysctl.d/00-system.conf\n<span class=\"hljs-meta\">#</span><span class=\"bash\">添加下面的内容</span>\nnet.ipv4.ip_forward=1\nsystemctl restart network &amp;&amp; systemctl restart docker\n</code></pre>\n<p id =\"jenkins\">\n<h2>Jenkins</h2>\n<p>1、获取镜像</p>\n<pre><code>docker pull jenkinsci/blueocean\n</code></pre>\n<p>2、运行镜像</p>\n<pre><code>docker run \\\n-u root \\\n-d  \\\n-p 80:8080 \\\n-p 50000:50000 \\\n--privileged=true \\\n--name=jenkins \\\n-v /opt/jenkins/jenkins-data:/var/jenkins_home  \\\n-v /opt/jenkins/run/docker.sock:/var/run/docker.sock  \\\njenkinsci/blueocean \n</code></pre>\n<h2>安装高版本Gcc</h2>\n<p>1、下载高版本gcc，这里使用的是8.3.0</p>\n<p><a href=\"http://ftp.gnu.org/gnu/gcc/\">http://ftp.gnu.org/gnu/gcc/</a></p>\n<p>编译后的gcc包，可解压后可直接从第5步开始：<a href=\"https://pan.baidu.com/s/159KLVjbaYALx6lrgibU-SQ\">https://pan.baidu.com/s/159KLVjbaYALx6lrgibU-SQ</a></p>\n<p>2、解压缩</p>\n<pre><code class=\"language-shell\">tar -zxvf gcc-8.3.0.tar.gz -C /usr/local\nyum install -y bzip2 glibc-headers gcc-c++ \nyum install -y glibc-headers\nyum install -y gcc-c++ \n</code></pre>\n<p>3、下载依赖包</p>\n<pre><code class=\"language-shell\">cd /usr/local/gcc-8.3.0/\n./contrib/download_prerequisites\n</code></pre>\n<p>4、编译+安装</p>\n<pre><code class=\"language-shell\">mkdir ../gcc8.3.0build &amp;&amp; cd ../gcc8.3.0build\n\n../gcc-8.3.0/configure --prefix=/usr/local/gcc8.3.0build --enable-checking=release --enable-languages=c,c++ --disable-multilib\nmake &amp;&amp; make install\n</code></pre>\n<p>5、之间已有低版本的gcc存在，先删除已建的软连接</p>\n<pre><code class=\"language-shell\">rm -rf /usr/bin/gcc\nrm -rf /usr/bin/g++\nln -s /usr/local/gcc8.3.0build/bin/gcc /usr/bin/gcc\nln -s /usr/local/gcc8.3.0build/bin/g++ /usr/bin/g++\n</code></pre>\n<p>6、查看新版本</p>\n<pre><code class=\"language-shell\">gcc --version\n</code></pre>\n<p>7、运行程序时可能会出现/lib64/libstdc++.so.6: version  `GLIBCXX_3.4.20' not found，是因为升级安装了gcc，生成的动态库没有替换老版本的gcc动态库导致的。</p>\n<p>查看包含最新的动态链接库的位置</p>\n<pre><code class=\"language-shell\">find / -name \"libstdc++.so*\"\n</code></pre>\n<p>找到在/usr/local/gcc5/lib64/文件夹下</p>\n<pre><code class=\"language-shell\">cp /usr/local/gcc8.3.0build/lib64/libstdc++.so.6.0.25  /usr/lib64/libstdc++.so.6.0.25\nrm -f /usr/lib64/libstdc++.so.6\nln /usr/lib64/libstdc++.so.6.0.25 /usr/lib64/libstdc++.so.6\n\n</code></pre>\n<p>8、查看libstdc++.so.6链接包含的动态库</p>\n<pre><code class=\"language-shell\">strings /usr/lib64/libstdc++.so.6|grep GLIBC\n</code></pre>\n<p>9、error 排除</p>\n<ul>\n<li>C++ preprocessor &quot;/lib/cpp&quot; fails sanity check</li>\n</ul>\n<pre><code class=\"language-shell\">yum install -y glibc-headers\nyum install -y gcc-c++ \n</code></pre>\n<h2>LDAP</h2>\n<p>1、安装LDAP</p>\n<pre><code class=\"language-shell\">yum install -y openldap-servers openldap-clients\n<span class=\"hljs-meta\">#</span><span class=\"bash\">拷贝数据库配置文件,DB_CONIFG中主要是关于Berkeley DB的相关的一些配置</span>\ncp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG\n\nsystemctl start slapd\nsystemctl enable slapd\nsystemctl status slapd\n</code></pre>\n<p>2、<strong>配置ldap服务</strong></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\">生成管理员密码</span>\nslappasswd\nNew password:\nRe-enter new password:\n{SSHA}krOGXDmiCdSXuXocOf10F96LJO5ijdXo  #记住这个,下面会用到\n</code></pre>\n<p>3、新建一个rootpwd.ldif(名称是自定义的)的文件:</p>\n<pre><code class=\"language-shell\">vi rootpwd.ldif\n\ndn: olcDatabase={0}config,cn=config\nchangetype: modify\nadd: olcRootPW\nolcRootPW: {SSHA}krOGXDmiCdSXuXocOf10F96LJO5ijdXo\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\">ldif即LDAP Data Interchange Format，是LDAP中数据交换的一种文件格式。文件内容采用的是key-value形式，注意value后面不能有空格。</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">上面内容中dn即distingush name</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">olc即Online Configuration，表示写入LDAP后不需要重启即可生效</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">changetype: modify表示修改一个entry，changetype的值可以是add,delete, modify等。</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">add: olcRootPW表示对这个entry新增了一个olcRootPW的属性</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">olcRootPW: {SSHA}krOGXDmiCdSXuXocOf10F96LJO5ijdXo指定了属性值</span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\">下面使用ldapadd命令将上面的rootpwd.ldif文件写入LDAP:</span>\nldapadd -Y EXTERNAL -H ldapi:/// -f rootpwd.ldif\nSASL/EXTERNAL authentication started\nSASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth\nSASL SSF: 0\nmodifying entry \"olcDatabase={0}config,cn=config\"\n</code></pre>\n<p>4、<strong>导入schema</strong></p>\n<p>导入schema，schema包含为了支持特殊场景相关的属性，可根据选择导入，这里先全部导入:</p>\n<pre><code class=\"language-shell\">ls /etc/openldap/schema/*.ldif | while read f; do ldapadd -Y EXTERNAL -H ldapi:/// -f $f; done\n</code></pre>\n<p>5、<strong>设定默认域</strong></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 先使用slappasswd生成一个密码:</span>\nslappasswd\nNew password:\nRe-enter new password:\n{SSHA}OpMcf0c+pEqFLZm3i+YiI2qhId1G/yM3\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\">新建一个domain.ldif的文件:</span>\n\nvi domain.ldif\n\ndn: olcDatabase={1}monitor,cn=config\nchangetype: modify\nreplace: olcAccess\nolcAccess: {0}to * by dn.base=\"gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth\"\n  read by dn.base=\"cn=Manager,dc=jiac,dc=cn\" read by * none\n\ndn: olcDatabase={2}hdb,cn=config\nchangetype: modify\nreplace: olcSuffix\nolcSuffix: dc=jiac,dc=cn\n\ndn: olcDatabase={2}hdb,cn=config\nchangetype: modify\nreplace: olcRootDN\nolcRootDN: cn=Manager,dc=jiac,dc=cn\n\n\ndn: olcDatabase={2}hdb,cn=config\nchangetype: modify\nadd: olcRootPW\nolcRootPW: {SSHA}OpMcf0c+pEqFLZm3i+YiI2qhId1G/yM3 #替换上面生成的密码\n\n\ndn: olcDatabase={2}hdb,cn=config\nchangetype: modify\nadd: olcAccess\nolcAccess: {0}to attrs=userPassword,shadowLastChange by\n  dn=\"cn=Manager,dc=jiac,dc=cn\" write by anonymous auth by self write by * none\nolcAccess: {1}to dn.base=\"\" by * read\nolcAccess: {2}to * by dn=\"cn=Manager,dc=jiac,dc=cn\" write by * read\n</code></pre>\n<ul>\n<li><code>olcAccess</code>即access，该key用于指定目录的ACL即谁有什么权限可以存取什么</li>\n<li><code>olcRootDN</code>设定管理员root用户的distingush name</li>\n<li>注意替换上面文件内容中cn为具体的域信息</li>\n<li>olcRootPW用上面新生成的密码替换</li>\n</ul>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\">写入</span>\nldapmodify -Y EXTERNAL -H ldapi:/// -f domain.ldif\nSASL/EXTERNAL authentication started\nSASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth\nSASL SSF: 0\nmodifying entry \"olcDatabase={1}monitor,cn=config\"\n\nmodifying entry \"olcDatabase={2}hdb,cn=config\"\n\nmodifying entry \"olcDatabase={2}hdb,cn=config\"\n\nmodifying entry \"olcDatabase={2}hdb,cn=config\"\n\nmodifying entry \"olcDatabase={2}hdb,cn=config\"\n</code></pre>\n<p>6、<strong>添加基本目录</strong></p>\n<pre><code class=\"language-shell\">dn: dc=jiac,dc=cn\nobjectClass: top\nobjectClass: dcObject\nobjectclass: organization\no: jiac cn\ndc: jiac\n\ndn: cn=Manager,dc=jiac,dc=cn\nobjectClass: organizationalRole\ncn: Manager\ndescription: Directory Manager\n\ndn: ou=People,dc=jiac,dc=cn\nobjectClass: organizationalUnit\nou: People\n\ndn: ou=Group,dc=jiac,dc=cn\nobjectClass: organizationalUnit\nou: Group\n</code></pre>\n<ul>\n<li>注意替换上面文件内容中dn为具体的域信息</li>\n<li>理解dn,cn,dc\n<ul>\n<li>DC即Domain Component，LDAP目录类似文件系统目录<code>dc=jiac,dc=cn</code>相当于<code>/cn/jiac</code></li>\n<li>CN即Common Name，CN有可能代表一个用户名，例如<code>cn=Manager,dc=jiac,dc=cn</code>表示在<code>/cn/jiac</code>域下的管理员用户Manager</li>\n<li>OU即Organizational Unit，例如<code>ou=People,dc=jiac,dc=cn</code>表示在<code>/cn/jiac</code>域下的一个组织单元<code>People</code></li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\">写入:</span>\nldapadd -x -D cn=Manager,dc=jiac,dc=cn -W -f basedomain.ldif\nEnter LDAP Password:\nadding new entry \"dc=jiac,dc=cn\"\n\nadding new entry \"cn=Manager,dc=jiac,dc=cn\"\n\nadding new entry \"ou=People,dc=jiac,dc=cn\"\n\nadding new entry \"ou=Group,dc=jiac,dc=cn\"\n</code></pre>\n<p>7、测试</p>\n<pre><code class=\"language-shell\">ldapsearch -LLL -W -x -D \"cn=Manager,dc=jiac,dc=cn\" -H ldap://localhost -b \"dc=jiac,dc=cn\"\nEnter LDAP Password:\ndn: dc=jiac,dc=cn\nobjectClass: top\nobjectClass: dcObject\nobjectClass: organization\no: jiac cn\ndc: jiac\n\ndn: cn=Manager,dc=jiac,dc=cn\nobjectClass: organizationalRole\ncn: Manager\ndescription: Directory Manager\n\ndn: ou=People,dc=jiac,dc=cn\nobjectClass: organizationalUnit\nou: People\n\ndn: ou=Group,dc=jiac,dc=cn\nobjectClass: organizationalUnit\nou: Group\n</code></pre>\n<p>8、可以在局域网内的windows电脑上下载<a href=\"http://www.ldapadmin.org/download/ldapadmin.html\">ldapadmin</a>作为管理工具</p>\n<p><a href=\"https://github.com/jiachao23/jcohy-study-sample/tree/master/jcohy-study-linux/bash/basedomain.ldif\">basedomain.ldif</a></p>\n<p><a href=\"https://github.com/jiachao23/jcohy-study-sample/tree/master/jcohy-study-linux/bash/domain.ldif\">domain.ldif</a></p>\n<p><a href=\"https://github.com/jiachao23/jcohy-study-sample/tree/master/jcohy-study-linux/bash/rootpwd.ldif\">rootpwd.ldif</a></p>\n<h2>Confluence</h2>\n<p>参考文档：</p>\n<p><a href=\"https://www.cnblogs.com/ios9/p/9045035.html#_label0\">https://www.cnblogs.com/ios9/p/9045035.html#_label0</a></p>\n<p><a href=\"https://blog.csdn.net/LuckySuger/article/details/85121715\">https://blog.csdn.net/LuckySuger/article/details/85121715</a></p>\n<p><a href=\"https://confluence.atlassian.com/confkb/known-issues-for-mysql-13138.html\">https://confluence.atlassian.com/confkb/known-issues-for-mysql-13138.html</a></p>\n<p><a href=\"https://www.cwiki.us/display/CONFLUENCEWIKI/Connecting+to+an+LDAP+Directory\">https://www.cwiki.us/display/CONFLUENCEWIKI/Connecting+to+an+LDAP+Directory</a></p>\n<p>1、下载，不同的版本</p>\n<pre><code class=\"language-shell\">wget https://downloads.atlassian.com/software/confluence/downloads/atlassian-confluence-6.12.1-x64.bin\nwget https://downloads.atlassian.com/software/confluence/downloads/atlassian-confluence-6.7.1-x64.bin\nwget https://downloads.atlassian.com/software/confluence/downloads/atlassian-confluence-6.9.1-x64.bin\nwget https://downloads.atlassian.com/software/confluence/downloads/atlassian-confluence-6.13.0-x64.bin\n</code></pre>\n<p>2、下载破解器</p>\n<p><a href=\"http://software.jcohy.com/windows/confluence%E7%A0%B4%E8%A7%A3%E5%B7%A5%E5%85%B7.zip\">http://software.jcohy.com/windows/confluence破解工具.zip</a></p>\n<p>3、安装confluence</p>\n<pre><code class=\"language-shell\">cd /opt\nchmod +x atlassian-confluence-6.12.1-x64.bin\n./atlassian-confluence-6.12.1-x64.bin\n</code></pre>\n<p>4、破解jar包</p>\n<p>下载破解和mysql驱动</p>\n<p><a href=\"https://software.jcohy.com/windows/confluence%E7%A0%B4%E8%A7%A3%E5%B7%A5%E5%85%B7.zip\">https://software.jcohy.com/windows/confluence破解工具.zip</a></p>\n<ul>\n<li>\n<p>1、备份jar包</p>\n<pre><code class=\"language-shell\">mv /opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jar /opt/atlassian-extras-2.4.jar\n</code></pre>\n</li>\n<li>\n<p>2、通过FTP将atlassian-extras-2.4.jar传到本地</p>\n</li>\n<li>\n<p>3、运行破解器confluence_keygen.jar</p>\n<p>java -jar confluence_keygen.jar</p>\n</li>\n</ul>\n<p><img src=\"D:%5CDocument%5Cpicture%5Cconfluence_keygen1.png\" alt=\"\"></p>\n<ul>\n<li>\n<p>4、点击.patch，选择atlassian-extras-2.4.jar文件，点击打开，jar文件破解成功</p>\n</li>\n<li>\n<p>5、上传破解后jar包到/opt/atlassian/confluence/confluence/WEB-INF/lib，并重命名atlassian-extras-decoder-v2-3.4.1.jar</p>\n</li>\n<li>\n<p>6、上传mysql驱动/opt/atlassian/confluence/confluence/WEB-INF/lib</p>\n</li>\n</ul>\n<p>5、重启服务</p>\n<pre><code class=\"language-shell\">chmod 777 atlassian-extras-decoder-v2-3.4.1.jar\nservice confluence stop；\nservice confluence start；\n</code></pre>\n<p>6、访问confluence</p>\n<p><a href=\"http://localhost:8090\">http://localhost:8090</a></p>\n<p>7、点击产品安装</p>\n<p>8、拷贝服务ID通过破解器获取key</p>\n<p>9、设置外部数据库</p>\n<p>mysql设置问题：</p>\n<ul>\n<li>\n<p>数据库字符编码</p>\n<p>＆characterEncoding = utf8</p>\n<pre><code class=\"language-none\">utf8_bin\n</code></pre>\n</li>\n<li>\n<p>事务隔离级别</p>\n<p>?sessionVariables=tx_isolation='READ-COMMITTED'</p>\n<pre><code class=\"language-none\">e.g. jdbc:mysql://127.0.0.1:3306/confdb?sessionVariables=tx_isolation='READ-COMMITTED'\n</code></pre>\n</li>\n<li>\n<p>MySQL存储引擎</p>\n<p>修改启动配置文件：default-storage-engine=INNODB</p>\n</li>\n</ul>\n<p>10、配置邮箱服务器</p>\n<p><img src=\"D:%5CDocument%5Cpicture%5Cconfluence_keygen2.png\" alt=\"1565061967220\"></p>\n<p>11、Confluence修改数据库配置文件</p>\n<p>第一步：是找到confluence的安装目录，我的安装目录在 /opt/atlassian/；</p>\n<p>第二步：由于confluence把tomcat给改造了，所以confluence的应用并没有在workapps下，而是在confluence下面；</p>\n<p>我们的工程的配置文件在classes文件夹，于是我找到了/opt/atlassian/confluence/confluence/WEB-INF/classes这个目录，</p>\n<p>查看这个目录下面有一个confluence-init.properties文件，感觉像是大概的配置文件，打开这个文件，发现最后面有一行代码：confluence.home = /var/atlassian/application-data/confluence</p>\n<p>第三步、进入confluence.home配置的文件夹，打开这个文件夹看到 有一个confluence.cfg.xml文件，打开这个文件，发现配置的数据库连接池一类的东西，真正的算是找到了，修改hibernate.connection.url的value为新的数据库地址 重新启动服务；</p>\n<p>/var/atlassian/application-data/confluence下confluence.cfg.xml文件：</p>\n",
  "link": "\\en-us\\blog\\install.html",
  "meta": {
    "title": "Linux下常用软件安装",
    "keywords": "linux, java, install",
    "description": "Linux下常用软件安装"
  }
}