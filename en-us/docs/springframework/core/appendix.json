{
  "filename": "appendix.md",
  "__html": "<p><a id=\"appendix\"></a></p>\n<h2><a href=\"#appendix\"></a>9. 附录</h2>\n<p><a id=\"xsd-schemas\"></a></p>\n<h3><a href=\"#xsd-schemas\"></a>9.1. XML Schemas</h3>\n<p>附录的这一部分列出了与核心容器相关的XML Schemas。</p>\n<p><a id=\"xsd-schemas-util\"></a></p>\n<h4><a href=\"#xsd-schemas-util\"></a>9.1.1. The <code>util</code> Schema</h4>\n<p>顾名思义，<code>util</code>标签处理常见的实用程序配置问题，例如配置集合，引用常量等等。要使用<code>util</code> schema中的标记，您需要在Spring XML配置文件的顶部有以下声明。 下面代码段中的文本引用了正确的schema，以便您可以使用<code>util</code>命名空间中的标记:</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    xmlns:util=&quot;http://www.springframework.org/schema/util&quot; xsi:schemaLocation=&quot;\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;&gt;\n\n        &lt;!-- bean definitions here --&gt;\n&lt;/beans&gt;\n</code></pre>\n<p><a id=\"xsd-schemas-util-constant\"></a></p>\n<h5><a href=\"#xsd-schemas-util-constant\"></a>使用 <code>&lt;util:constant/&gt;</code></h5>\n<p>考虑下面bean的定义:</p>\n<pre><code>&lt;bean id=&quot;...&quot; class=&quot;...&quot;&gt;\n    &lt;property name=&quot;isolation&quot;&gt;\n        &lt;bean id=&quot;java.sql.Connection.TRANSACTION_SERIALIZABLE&quot;\n                class=&quot;org.springframework.beans.factory.config.FieldRetrievingFactoryBean&quot; /&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre>\n<p>上述配置使用Spring <code>FactoryBean</code>实现（ <code>FieldRetrievingFactoryBean</code>），将bean上的隔离属性的值设置为 <code>java.sql.Connection.TRANSACTION_SERIALIZABLE</code>常量值。 这看起来很不错，但它是一个稍微冗长的，并且公开Spring的内部管道给最终用户（这是不必要的）。</p>\n<p>以下基于XML Schema的版本更简洁，清楚地表达了开发人员的意图（“注入此常量值”），并且它读得更好：</p>\n<pre><code>&lt;bean id=&quot;...&quot; class=&quot;...&quot;&gt;\n    &lt;property name=&quot;isolation&quot;&gt;\n        &lt;util:constant static-field=&quot;java.sql.Connection.TRANSACTION_SERIALIZABLE&quot;/&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre>\n<p><a id=\"xsd-schemas-util-frfb\"></a></p>\n<h6><a href=\"#xsd-schemas-util-frfb\"></a>从字段值设置Bean属性或构造函数参数</h6>\n<p><a href=\"https://docs.spring.io/spring-framework/docs/5.1.3.BUILD-SNAPSHOT/javadoc-api/org/springframework/beans/factory/config/FieldRetrievingFactoryBean.html\"><code>FieldRetrievingFactoryBean</code></a> 是一个<code>FactoryBean</code>，用于检索静态或非静态字段值。它通常用于检索<code>public</code> <code>static</code> <code>final</code>常量，然后可用于为另一个bean设置属性值或构造函数的参数。</p>\n<p>以下示例显示了如何使用<a href=\"https://docs.spring.io/spring-framework/docs/5.1.3.BUILD-SNAPSHOT/javadoc-api/org/springframework/beans/factory/config/FieldRetrievingFactoryBean.html#setStaticField(java.lang.String)\"><code>staticField</code></a>属性公开静态字段:</p>\n<pre><code>&lt;bean id=&quot;myField&quot;\n        class=&quot;org.springframework.beans.factory.config.FieldRetrievingFactoryBean&quot;&gt;\n    &lt;property name=&quot;staticField&quot; value=&quot;java.sql.Connection.TRANSACTION_SERIALIZABLE&quot;/&gt;\n&lt;/bean&gt;\n</code></pre>\n<p>还有一个便捷使用形式，其中静态字段被指定为bean名称，如以下示例所示：:</p>\n<pre><code>&lt;bean id=&quot;java.sql.Connection.TRANSACTION_SERIALIZABLE&quot;\n        class=&quot;org.springframework.beans.factory.config.FieldRetrievingFactoryBean&quot;/&gt;\n</code></pre>\n<p>这确实意味着bean <code>id</code>不再有任何选择（因此引用它的任何其他bean也必须使用这个更长的名称）， 但这种形式定义非常简洁，非常方便用作内部 bean，因为不必为bean引用指定<code>id</code>，如下例所示:</p>\n<pre><code>&lt;bean id=&quot;...&quot; class=&quot;...&quot;&gt;\n    &lt;property name=&quot;isolation&quot;&gt;\n        &lt;bean id=&quot;java.sql.Connection.TRANSACTION_SERIALIZABLE&quot;\n                class=&quot;org.springframework.beans.factory.config.FieldRetrievingFactoryBean&quot; /&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre>\n<p>您还可以访问另一个bean的非静态（实例）字段，如<a href=\"https://docs.spring.io/spring-framework/docs/5.1.3.BUILD-SNAPSHOT/javadoc-api/org/springframework/beans/factory/config/FieldRetrievingFactoryBean.html\"><code>FieldRetrievingFactoryBean</code></a>类的API文档中所述</p>\n<p>在Spring中，将枚举值作为属性或构造函数参数注入到bean中非常容易，因为您实际上并不需要做任何事情，也不知道Spring内部的任何内容(甚至包括<code>FieldRetrievingFactoryBean</code>相似的类）。 以下示例枚举显示了注入枚举值的容易程度:</p>\n<pre><code>package javax.persistence;\n\npublic enum PersistenceContextType {\n\n    TRANSACTION,\n    EXTENDED\n}\n</code></pre>\n<p>现在考虑下面的<code>PersistenceContextType</code> 类型的setter和相应的bean定义:</p>\n<pre><code>package example;\n\npublic class Client {\n\n    private PersistenceContextType persistenceContextType;\n\n    public void setPersistenceContextType(PersistenceContextType type) {\n        this.persistenceContextType = type;\n    }\n}\n\n&lt;bean class=&quot;example.Client&quot;&gt;\n    &lt;property name=&quot;persistenceContextType&quot; value=&quot;TRANSACTION&quot;/&gt;\n&lt;/bean&gt;\n</code></pre>\n<p><a id=\"xsd-schemas-util-property-path\"></a></p>\n<h5><a href=\"#xsd-schemas-util-property-path\"></a>使用 <code>&lt;util:property-path/&gt;</code></h5>\n<p>请考虑以下示例:</p>\n<pre><code>&lt;!-- target bean to be referenced by name --&gt;\n&lt;bean id=&quot;testBean&quot; class=&quot;org.springframework.beans.TestBean&quot; scope=&quot;prototype&quot;&gt;\n    &lt;property name=&quot;age&quot; value=&quot;10&quot;/&gt;\n    &lt;property name=&quot;spouse&quot;&gt;\n        &lt;bean class=&quot;org.springframework.beans.TestBean&quot;&gt;\n            &lt;property name=&quot;age&quot; value=&quot;11&quot;/&gt;\n        &lt;/bean&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n\n&lt;!-- results in 10, which is the value of property 'age' of bean 'testBean' --&gt;\n&lt;bean id=&quot;testBean.age&quot; class=&quot;org.springframework.beans.factory.config.PropertyPathFactoryBean&quot;/&gt;\n</code></pre>\n<p>上述配置使用Spring <code>FactoryBean</code>实现（<code>PropertyPathFactoryBean</code>）创建名为<code>testBean.age</code>的bean（类型为<code>int</code>），其值等于<code>testBean</code> bean的<code>age</code>属性。</p>\n<p>现在考虑以下示例，它添加了一个<code>&lt;util:property-path/&gt;</code> 元素:</p>\n<pre><code>&lt;!-- target bean to be referenced by name --&gt;\n&lt;bean id=&quot;testBean&quot; class=&quot;org.springframework.beans.TestBean&quot; scope=&quot;prototype&quot;&gt;\n    &lt;property name=&quot;age&quot; value=&quot;10&quot;/&gt;\n    &lt;property name=&quot;spouse&quot;&gt;\n        &lt;bean class=&quot;org.springframework.beans.TestBean&quot;&gt;\n            &lt;property name=&quot;age&quot; value=&quot;11&quot;/&gt;\n        &lt;/bean&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n\n&lt;!-- results in 10, which is the value of property 'age' of bean 'testBean' --&gt;\n&lt;util:property-path id=&quot;name&quot; path=&quot;testBean.age&quot;/&gt;\n</code></pre>\n<p><code>&lt;property-path/&gt;</code> 元素的<code>path</code>属性的值遵循<code>beanName.beanProperty</code>的形式。 在这种情况下，它会获取名为<code>testBean</code>的bean的<code>age</code>属性。 该<code>age</code>属性值是<code>10</code>。</p>\n<p><a id=\"xsd-schemas-util-property-path-dependency\"></a></p>\n<h6><a href=\"#xsd-schemas-util-property-path-dependency\"></a>使用 <code>&lt;util:property-path/&gt;</code>设置Bean属性或构造函数参数</h6>\n<p><code>PropertyPathFactoryBean</code> 是一个用于计算给定目标对象的属性路径的 <code>FactoryBean</code> 。目标对象可以直接指定，也可以通过bean名称指定。 然后，您可以在另一个bean定义中将此值用作属性值或构造函数参数。</p>\n<p>以下示例按名称显示了针对另一个bean使用的路径:</p>\n<pre><code>// target bean to be referenced by name\n&lt;bean id=&quot;person&quot; class=&quot;org.springframework.beans.TestBean&quot; scope=&quot;prototype&quot;&gt;\n    &lt;property name=&quot;age&quot; value=&quot;10&quot;/&gt;\n    &lt;property name=&quot;spouse&quot;&gt;\n        &lt;bean class=&quot;org.springframework.beans.TestBean&quot;&gt;\n            &lt;property name=&quot;age&quot; value=&quot;11&quot;/&gt;\n        &lt;/bean&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n\n// results in 11, which is the value of property 'spouse.age' of bean 'person'\n&lt;bean id=&quot;theAge&quot;\n        class=&quot;org.springframework.beans.factory.config.PropertyPathFactoryBean&quot;&gt;\n    &lt;property name=&quot;targetBeanName&quot; value=&quot;person&quot;/&gt;\n    &lt;property name=&quot;propertyPath&quot; value=&quot;spouse.age&quot;/&gt;\n&lt;/bean&gt;\n</code></pre>\n<p>在以下示例中，path被内部bean解析:</p>\n<pre><code>&lt;!-- results in 12, which is the value of property 'age' of the inner bean --&gt;\n&lt;bean id=&quot;theAge&quot;\n        class=&quot;org.springframework.beans.factory.config.PropertyPathFactoryBean&quot;&gt;\n    &lt;property name=&quot;targetObject&quot;&gt;\n        &lt;bean class=&quot;org.springframework.beans.TestBean&quot;&gt;\n            &lt;property name=&quot;age&quot; value=&quot;12&quot;/&gt;\n        &lt;/bean&gt;\n    &lt;/property&gt;\n    &lt;property name=&quot;propertyPath&quot; value=&quot;age&quot;/&gt;\n&lt;/bean&gt;\n</code></pre>\n<p>这也是一个快捷的形式，其中bean名称是属性的路径。</p>\n<pre><code>&lt;!-- results in 10, which is the value of property 'age' of bean 'person' --&gt;\n&lt;bean id=&quot;person.age&quot;\n        class=&quot;org.springframework.beans.factory.config.PropertyPathFactoryBean&quot;/&gt;\n</code></pre>\n<p>此形式表示bean的名称中是没得选择的，对它的任何引用也必须使用相同的<code>id</code>，即它的路径。当然，如果用作内部bean，则根本不需要引用它。如下所示：</p>\n<pre><code>&lt;bean id=&quot;...&quot; class=&quot;...&quot;&gt;\n    &lt;property name=&quot;age&quot;&gt;\n        &lt;bean id=&quot;person.age&quot;\n                class=&quot;org.springframework.beans.factory.config.PropertyPathFactoryBean&quot;/&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre>\n<p>结果类型可以在实际定义中具体设置。对于大多数用例来说，这是不必要的，但对于某些用例来说是可以使用的。有关此功能的更多信息，请参阅javadoc。</p>\n<p><a id=\"xsd-schemas-util-properties\"></a></p>\n<h5><a href=\"#xsd-schemas-util-properties\"></a>使用 <code>&lt;util:properties/&gt;</code></h5>\n<p>请考虑以下示例:</p>\n<pre><code>&lt;!-- creates a java.util.Properties instance with values loaded from the supplied location --&gt;\n&lt;bean id=&quot;jdbcConfiguration&quot; class=&quot;org.springframework.beans.factory.config.PropertiesFactoryBean&quot;&gt;\n    &lt;property name=&quot;location&quot; value=&quot;classpath:com/foo/jdbc-production.properties&quot;/&gt;\n&lt;/bean&gt;\n</code></pre>\n<p>上述配置使用Spring <code>FactoryBean</code>实现（<code>PropertiesFactoryBean</code>）来实例化一个<code>java.util.Properties</code>实例，其中包含从提供的<a href=\"#resources\"><code>Resource</code></a>位置加载的值。</p>\n<p>以下示例使用<code>util:properties</code>元素来进行更简洁的表示:</p>\n<pre><code>&lt;!-- creates a java.util.Properties instance with values loaded from the supplied location --&gt;\n&lt;util:properties id=&quot;jdbcConfiguration&quot; location=&quot;classpath:com/foo/jdbc-production.properties&quot;/&gt;\n</code></pre>\n<p><a id=\"xsd-schemas-util-list\"></a></p>\n<h5><a href=\"#xsd-schemas-util-list\"></a>使用 <code>&lt;util:list/&gt;</code></h5>\n<p>请考虑以下示例:</p>\n<pre><code>&lt;!-- creates a java.util.List instance with values loaded from the supplied 'sourceList' --&gt;\n&lt;bean id=&quot;emails&quot; class=&quot;org.springframework.beans.factory.config.ListFactoryBean&quot;&gt;\n    &lt;property name=&quot;sourceList&quot;&gt;\n        &lt;list&gt;\n            &lt;value&gt;[email protected]&lt;/value&gt;\n            &lt;value&gt;[email protected]&lt;/value&gt;\n            &lt;value&gt;[email protected]&lt;/value&gt;\n            &lt;value&gt;[email protected]&lt;/value&gt;\n        &lt;/list&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre>\n<p>上述配置使用Spring <code>FactoryBean</code>实现（<code>ListFactoryBean</code>）创建 <code>java.util.List</code>实例，并使用从提供的<code>sourceList</code>获取的值对其进行初始化。</p>\n<p>以下示例使用<code>&lt;util:list/&gt;</code>元素进行更简洁的表示:</p>\n<pre><code>&lt;!-- creates a java.util.List instance with the supplied values --&gt;\n&lt;util:list id=&quot;emails&quot;&gt;\n    &lt;value&gt;[email protected]&lt;/value&gt;\n    &lt;value&gt;[email protected]&lt;/value&gt;\n    &lt;value&gt;[email protected]&lt;/value&gt;\n    &lt;value&gt;[email protected]&lt;/value&gt;\n&lt;/util:list&gt;\n</code></pre>\n<p>您还可以使用 <code>&lt;util:list/&gt;</code>元素上的<code>list-class</code>属性显式控制实例化和填充的<code>List</code>的确切类型。 例如，如果我们确实需要实例化 <code>java.util.LinkedList</code>，我们可以使用以下配置:</p>\n<pre><code>&lt;util:list id=&quot;emails&quot; list-class=&quot;java.util.LinkedList&quot;&gt;\n    &lt;value&gt;[email protected]&lt;/value&gt;\n    &lt;value&gt;[email protected]&lt;/value&gt;\n    &lt;value&gt;[email protected]&lt;/value&gt;\n    &lt;value&gt;d'[email protected]&lt;/value&gt;\n&lt;/util:list&gt;\n</code></pre>\n<p>如果未提供<code>list-class</code>属性，则容器将选择<code>List</code> 实现。</p>\n<p><a id=\"xsd-schemas-util-map\"></a></p>\n<h5><a href=\"#xsd-schemas-util-map\"></a>使用 <code>&lt;util:map/&gt;</code></h5>\n<p>请考虑以下示例:</p>\n<pre><code>&lt;!-- creates a java.util.Map instance with values loaded from the supplied 'sourceMap' --&gt;\n&lt;bean id=&quot;emails&quot; class=&quot;org.springframework.beans.factory.config.MapFactoryBean&quot;&gt;\n    &lt;property name=&quot;sourceMap&quot;&gt;\n        &lt;map&gt;\n            &lt;entry key=&quot;pechorin&quot; value=&quot;[email protected]&quot;/&gt;\n            &lt;entry key=&quot;raskolnikov&quot; value=&quot;[email protected]&quot;/&gt;\n            &lt;entry key=&quot;stavrogin&quot; value=&quot;[email protected]&quot;/&gt;\n            &lt;entry key=&quot;porfiry&quot; value=&quot;[email protected]&quot;/&gt;\n        &lt;/map&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre>\n<p>上述配置使用Spring <code>FactoryBean</code>实现（<code>MapFactoryBean</code>）创建一个<code>java.util.Map</code>实例，该实例使用从提供的<code>'sourceMap'</code>获取的键值对进行初始化。</p>\n<p>以下示例使用<code>&lt;util:map/&gt;</code>元素进行更简洁的表示：</p>\n<pre><code>&lt;!-- creates a java.util.Map instance with the supplied key-value pairs --&gt;\n&lt;util:map id=&quot;emails&quot;&gt;\n    &lt;entry key=&quot;pechorin&quot; value=&quot;[email protected]&quot;/&gt;\n    &lt;entry key=&quot;raskolnikov&quot; value=&quot;[email protected]&quot;/&gt;\n    &lt;entry key=&quot;stavrogin&quot; value=&quot;[email protected]&quot;/&gt;\n    &lt;entry key=&quot;porfiry&quot; value=&quot;[email protected]&quot;/&gt;\n&lt;/util:map&gt;\n</code></pre>\n<p>您还可以使用<code>&lt;util:map/&gt;</code>元素上的<code>'map-class'</code>属性显式控制实例化和填充的<code>Map</code>的确切类型。 例如，如果我们真的需要实例化<code>java.util.TreeMap</code> ，我们可以使用以下配置：:</p>\n<pre><code>&lt;util:map id=&quot;emails&quot; map-class=&quot;java.util.TreeMap&quot;&gt;\n    &lt;entry key=&quot;pechorin&quot; value=&quot;[email protected]&quot;/&gt;\n    &lt;entry key=&quot;raskolnikov&quot; value=&quot;[email protected]&quot;/&gt;\n    &lt;entry key=&quot;stavrogin&quot; value=&quot;[email protected]&quot;/&gt;\n    &lt;entry key=&quot;porfiry&quot; value=&quot;[email protected]&quot;/&gt;\n&lt;/util:map&gt;\n</code></pre>\n<p>如果未提供<code>'map-class'</code>属性，则容器将选择<code>Map</code> 实现。</p>\n<p><a id=\"xsd-schemas-util-set\"></a></p>\n<h5><a href=\"#xsd-schemas-util-set\"></a>使用 <code>&lt;util:set/&gt;</code></h5>\n<p>请考虑以下示例:</p>\n<pre><code>&lt;!-- creates a java.util.Set instance with values loaded from the supplied 'sourceSet' --&gt;\n&lt;bean id=&quot;emails&quot; class=&quot;org.springframework.beans.factory.config.SetFactoryBean&quot;&gt;\n    &lt;property name=&quot;sourceSet&quot;&gt;\n        &lt;set&gt;\n            &lt;value&gt;[email protected]&lt;/value&gt;\n            &lt;value&gt;[email protected]&lt;/value&gt;\n            &lt;value&gt;[email protected]&lt;/value&gt;\n            &lt;value&gt;[email protected]&lt;/value&gt;\n        &lt;/set&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre>\n<p>上述配置使用Spring <code>FactoryBean</code>实现（ <code>SetFactoryBean</code>）创建一个<code>java.util.Set</code>实例，该实例使用从提供的 <code>sourceSet</code>获取的值进行初始化。</p>\n<p>以下示例使用<code>&lt;util:set/&gt;</code>元素进行更简洁的表示：</p>\n<pre><code>&lt;!-- creates a java.util.Set instance with the supplied values --&gt;\n&lt;util:set id=&quot;emails&quot;&gt;\n    &lt;value&gt;[email protected]&lt;/value&gt;\n    &lt;value&gt;[email protected]&lt;/value&gt;\n    &lt;value&gt;[email protected]&lt;/value&gt;\n    &lt;value&gt;[email protected]&lt;/value&gt;\n&lt;/util:set&gt;\n</code></pre>\n<p>您还可以使用<code>&lt;util:set/&gt;</code> 元素上的<code>set-class</code>属性显式控制实例化和填充的<code>Set</code>的确切类型。 例如，如果我们确实需要实例化<code>java.util.TreeSet</code> ，我们可以使用以下配置:</p>\n<pre><code>&lt;util:set id=&quot;emails&quot; set-class=&quot;java.util.TreeSet&quot;&gt;\n    &lt;value&gt;[email protected]&lt;/value&gt;\n    &lt;value&gt;[email protected]&lt;/value&gt;\n    &lt;value&gt;[email protected]&lt;/value&gt;\n    &lt;value&gt;[email protected]&lt;/value&gt;\n&lt;/util:set&gt;\n</code></pre>\n<p>如果未提供 <code>set-class</code>属性，则容器将选择<code>Set</code>实现。</p>\n<p><a id=\"xsd-schemas-aop\"></a></p>\n<h4><a href=\"#xsd-schemas-aop\"></a>9.1.2. The <code>aop</code> Schema</h4>\n<p><code>aop</code>标签用于配置Spring中的所有AOP，包括Spring自己的基于代理的AOP框架和Spring与AspectJ AOP框架的集成。 这些标签在为<a href=\"#aop\">面向切面的编程</a>一章中全面介绍。</p>\n<p>为了完整性起见，要使用<code>aop</code> schema中的标签,您需要在Spring XML配置文件的顶部有以下xsd：以下代码段中的文本引用了正确的schema，以便您可以使用AOP命名空间中的标签。</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xsi:schemaLocation=&quot;\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;\n\n    &lt;!-- bean definitions here --&gt;\n&lt;/beans&gt;\n</code></pre>\n<p><a id=\"xsd-schemas-context\"></a></p>\n<h4><a href=\"#xsd-schemas-context\"></a>9.1.3. The <code>context</code> Schema</h4>\n<p><code>context</code>标签处理与管道(plumbing）)有关的<code>ApplicationContext</code>配置- 也就是说，通常不是对最终用户很重要的bean，而是在Spring中执行大量“grunt”工作的bean。 例如<code>BeanfactoryPostProcessors</code>。以下代码段引用了正确的schema，以便您可以使用<code>context</code>命名空间中的元素：:</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xsi:schemaLocation=&quot;\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;\n\n    &lt;!-- bean definitions here --&gt;\n&lt;/beans&gt;\n</code></pre>\n<p><a id=\"xsd-schemas-context-pphc\"></a></p>\n<h5><a href=\"#xsd-schemas-context-pphc\"></a>使用 <code>&lt;property-placeholder/&gt;</code></h5>\n<p>这个元素用于替代<code>${…​}</code> 的占位符，这些占位符是针对指定的属性文件（作为<a href=\"#resources\">Spring资源位置</a>）解析的。 此元素是一种便捷机制，可为您设置 <a href=\"#beans-factory-placeholderconfigurer\"><code>PropertyPlaceholderConfigurer</code></a>。 如果您需要更多地控制<code>PropertyPlaceholderConfigurer</code>，您可以自己明确定义一个。</p>\n<p><a id=\"xsd-schemas-context-ac\"></a></p>\n<h5><a href=\"#xsd-schemas-context-ac\"></a>使用 <code>&lt;annotation-config/&gt;</code></h5>\n<p>此元素激活Spring基础结构以检测bean类中的注解：:</p>\n<ul>\n<li>\n<p>Spring’s <a href=\"#beans-required-annotation\"><code>@Required</code></a> and <a href=\"#beans-annotation-config\"><code>@Autowired</code></a></p>\n</li>\n<li>\n<p>JSR 250’s <code>@PostConstruct</code>, <code>@PreDestroy</code> and <code>@Resource</code> (if available)</p>\n</li>\n<li>\n<p>JPA’s <code>@PersistenceContext</code> and <code>@PersistenceUnit</code> (if available).</p>\n</li>\n</ul>\n<p>或者，您可以选择显式激活这些注解的各个<code>BeanPostProcessors</code>。</p>\n<p>这个元素没有激活处理Spring的 <a href=\"data-access.html#transaction-declarative-annotations\"><code>@Transactional</code></a>注解。 使用<a href=\"data-access.html#tx-decl-explained\"><code>&lt;tx:annotation-driven/&gt;</code></a> 来激活Spring的<code>@Transactional</code>注解。</p>\n<p><a id=\"xsd-schemas-context-component-scan\"></a></p>\n<h5><a href=\"#xsd-schemas-context-component-scan\"></a>使用 <code>&lt;component-scan/&gt;</code></h5>\n<p>此元素在<a href=\"#beans-annotation-config\">基于容器配置</a>中进行了详细说明。</p>\n<p><a id=\"xsd-schemas-context-ltw\"></a></p>\n<h5><a href=\"#xsd-schemas-context-ltw\"></a>使用 <code>&lt;load-time-weaver/&gt;</code></h5>\n<p>此元素在<a href=\"#aop-aj-ltw\">加载时使用AspectJ在spring框架中</a>中进行了详细说明。</p>\n<p><a id=\"xsd-schemas-context-sc\"></a></p>\n<h5><a href=\"#xsd-schemas-context-sc\"></a>使用 <code>&lt;spring-configured/&gt;</code></h5>\n<p>此元素在 <a href=\"#aop-atconfigurable\">使用AspectJ来独立注入domain的object使用spring</a>中进行了详细说明。</p>\n<p><a id=\"sd-schemas-context-mbe\"></a></p>\n<h5><a href=\"#xsd-schemas-context-mbe\"></a>使用 <code>&lt;mbean-export/&gt;</code></h5>\n<p>此元素在 <a href=\"integration.html#jmx-context-mbeanexport\">配置基于注解的MBean的导出</a>中进行了详细说明。</p>\n<p><a id=\"xsd-schemas-beans\"></a></p>\n<h4><a href=\"#xsd-schemas-beans\"></a>9.1.4. The Beans Schema</h4>\n<p>最后，但并非最不重要的是，<code>beans</code> schema标签。这些都是相同的标签，已经在Spring框架中崭露头角。此处不显示bean架构中各种标签的示例， 因为它们在 <a href=\"#beans-factory-properties-detailed\">详细信息的依赖性和配置</a>(甚至在整个<a href=\"#beans\">章节</a>）中有相当全面的介绍。</p>\n<p>请注意，您可以向 <code>&lt;bean/&gt;</code>XML定义添加零个或多个键值对。 如果有的话，使用这些额外的元数据完成的工作完全取决于您自己的自定义逻辑 （因此，如果您按照<a href=\"#xml-custom\">XML Schema Authoring</a>的附录中所述编写自己的自定义元素，通常只能使用它。</p>\n<p>以下示例显示了周围<code>&lt;bean/&gt;</code>上下文中的 <code>&lt;meta/&gt;</code> 元素（请注意，没有任何逻辑可以解释它，元数据实际上是无用的）。</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    xsi:schemaLocation=&quot;\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;\n\n    &lt;bean id=&quot;foo&quot; class=&quot;x.y.Foo&quot;&gt;\n        &lt;meta key=&quot;cacheName&quot; value=&quot;foo&quot;/&gt; (1)\n        &lt;property name=&quot;name&quot; value=&quot;Rick&quot;/&gt;\n    &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre>\n<p>**1、**这是示例<code>meta</code>元素</p>\n<p>在上面的示例中，您将假定有一些逻辑将使用bean定义，并通过提供的元数据设置一些缓存基础结构。</p>\n<p><a id=\"xml-custom\"></a></p>\n<h3><a href=\"#xml-custom\"></a>9.2. XML Schema Authoring</h3>\n<p>从版本2.0开始，Spring就为定义和配置bean的基本Spring XML格式的可扩展性提供了一种机制。 本节介绍如何编写自己的自定义XML bean定义解析器并将这些解析器集成到Spring IoC容器中。</p>\n<p>为了便于使用架构感知的XML编辑器编写配置文件，Spring的可扩展XML配置机制基于xml Schema。如果您对Spring当前的XML配置扩展不熟悉，则应首先阅读标题为<a href=\"#xsd-config\">[xsd-config]</a>的附录。</p>\n<p>要创建新的XML配置扩展：:</p>\n<ol>\n<li>\n<p><a href=\"#xsd-custom-schema\">Author</a>：编写xml的schema来描述您的自定义元素。</p>\n</li>\n<li>\n<p><a href=\"#xsd-custom-namespacehandler\">Code</a>：编写自定义<code>NamespaceHandler</code> 实现。</p>\n</li>\n<li>\n<p><a href=\"#xsd-custom-parser\">Code</a>：编写一个或多个<code>BeanDefinitionParser</code>实现（这是完成实际工作的地方）。</p>\n</li>\n<li>\n<p><a href=\"#xsd-custom-registration\">注册</a> ：使用Spring注册。</p>\n</li>\n</ol>\n<p>下面是对每个步骤的描述。对于本例，我们将创建一个XML扩展(一个自定义XML元素），它允许我们以一种简单的方式配置<code>SimpleDateFormat</code>类型的对象(在<code>java.text</code>包中）。 当我们完成后，我们将能够定义类型 <code>SimpleDateFormat</code> 定义如下：:</p>\n<pre><code>&lt;myns:dateformat id=&quot;dateFormat&quot;\n    pattern=&quot;yyyy-MM-dd HH:mm&quot;\n    lenient=&quot;true&quot;/&gt;\n</code></pre>\n<p>（不要担心这个例子过于简单，后面还有很多的案例。第一个简单的案例的目的是完成基本步骤的调用）</p>\n<p><a id=\"xsd-custom-schema\"></a></p>\n<h4><a href=\"#xsd-custom-schema\"></a>9.2.1. 编写Schema</h4>\n<p>创建一个用于Spring的IoC容器的XML配置扩展，首先要创建一个XML Schema来描述扩展。 对于我们的示例，我们使用以下schema来配置<code>SimpleDateFormat</code>对象：</p>\n<pre><code>&lt;!-- myns.xsd (inside package org/springframework/samples/xml) --&gt;\n\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;xsd:schema xmlns=&quot;http://www.mycompany.com/schema/myns&quot;\n        xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;\n        xmlns:beans=&quot;http://www.springframework.org/schema/beans&quot;\n        targetNamespace=&quot;http://www.mycompany.com/schema/myns&quot;\n        elementFormDefault=&quot;qualified&quot;\n        attributeFormDefault=&quot;unqualified&quot;&gt;\n\n    &lt;xsd:import namespace=&quot;http://www.springframework.org/schema/beans&quot;/&gt;\n\n    &lt;xsd:element name=&quot;dateformat&quot;&gt;\n        &lt;xsd:complexType&gt;\n            &lt;xsd:complexContent&gt;\n                &lt;xsd:extension base=&quot;beans:identifiedType&quot;&gt; (1)\n                    &lt;xsd:attribute name=&quot;lenient&quot; type=&quot;xsd:boolean&quot;/&gt;\n                    &lt;xsd:attribute name=&quot;pattern&quot; type=&quot;xsd:string&quot; use=&quot;required&quot;/&gt;\n                &lt;/xsd:extension&gt;\n            &lt;/xsd:complexContent&gt;\n        &lt;/xsd:complexType&gt;\n    &lt;/xsd:element&gt;\n&lt;/xsd:schema&gt;\n</code></pre>\n<p><strong>1、</strong>(强调的行包含可识别的所有标签的扩展库(意味着它们具有<code>id</code>属性，将用作容器中的bean标识符）。我们可以使用此属性，因为我们导入了Spring提供的<code>beans</code>命名空间。</p>\n<p>前面的schema允许我们使用<code>&lt;myns:dateformat/&gt;</code> 元素直接在XML应用程序上下文文件中配置<code>SimpleDateFormat</code>对象，如以下示例所示:</p>\n<pre><code>&lt;myns:dateformat id=&quot;dateFormat&quot;\n    pattern=&quot;yyyy-MM-dd HH:mm&quot;\n    lenient=&quot;true&quot;/&gt;\n</code></pre>\n<p>请注意，在我们创建基础结构类之后，前面的XML代码段与以下XML代码段基本相同:</p>\n<pre><code>&lt;bean id=&quot;dateFormat&quot; class=&quot;java.text.SimpleDateFormat&quot;&gt;\n    &lt;constructor-arg value=&quot;yyyy-HH-dd HH:mm&quot;/&gt;\n    &lt;property name=&quot;lenient&quot; value=&quot;true&quot;/&gt;\n&lt;/bean&gt;\n</code></pre>\n<p>前两个片段中的第二个在容器中创建一个bean（由名称为<code>SimpleDateFormat</code>类型的<code>dateFormat</code>标识），并设置了几个属性。</p>\n<p>基于schema创建的配置格式可以与带有schema感知的XML编辑器的IDE集成。使用正确的创建模式，可以让用户再几个配置选择之间进行自由切换（其实说的就是eclipse编辑XML的多种视图）。</p>\n<p><a id=\"xsd-custom-namespacehandler\"></a></p>\n<h4><a href=\"#xsd-custom-namespacehandler\"></a>9.2.2. 编写<code>NamespaceHandler</code></h4>\n<p>除了schema之外，我们需要一个<code>NamespaceHandler</code>来解析Spring在解析配置文件时遇到的这个特定命名空间的所有元素。 对于此示例， <code>NamespaceHandler</code> 应该负责解析<code>myns:dateformat</code>元素。</p>\n<p><code>NamespaceHandler</code> 接口有三个方法：:</p>\n<ul>\n<li>\n<p><code>init()</code>: 允许初始化<code>NamespaceHandler</code> ，在使用处理程序之前此方法将被Spring调用。</p>\n</li>\n<li>\n<p><code>BeanDefinition parse(Element, ParserContext)</code>: 当Spring遇到top-level元素(不嵌套在bean定义或其他命名空间中)时调用。此方法可以注册bean定义本身和/或返回bean定义。</p>\n</li>\n<li>\n<p><code>BeanDefinitionHolder decorate(Node, BeanDefinitionHolder, ParserContext)</code>: 当Spring遇到不同命名空间的属性或嵌套元素时调用。一个或多个bean定义的装饰将被使用， （例如）与<a href=\"#beans-factory-scopes\">Spring支持的范围</a>一起使用。 我们将首先写一个简单的例子，不使用装饰器，之后我们在一个更高级的例子中展示装饰。</p>\n</li>\n</ul>\n<p>尽管完全可以为整个命名空间编写自己的<code>NamespaceHandler</code> (从而提供分析命名空间中每个元素的代码）。但通常情况下，Spring XML配置文件中的每个顶级XML元素都会生成一个bean 定义(在我们的例子中， 单个 <code>&lt;myns:dateformat/&gt;</code>元素导致单个<code>SimpleDateFormat</code>定义）。Spring具有许多支持此方案的便捷类。在本例中，我们将使用<code>NamespaceHandlerSupport</code>类:</p>\n<pre><code>package org.springframework.samples.xml;\n\nimport org.springframework.beans.factory.xml.NamespaceHandlerSupport;\n\npublic class MyNamespaceHandler extends NamespaceHandlerSupport {\n\n    public void init() {\n        registerBeanDefinitionParser(&quot;dateformat&quot;, new SimpleDateFormatBeanDefinitionParser());\n    }\n\n}\n</code></pre>\n<p>您可能会注意到此类中实际上并没有很多解析逻辑。实际上， <code>NamespaceHandlerSupport</code>类具有内置的委托概念。 它支持注册任何数量的<code>BeanDefinitionParser</code>实例，当它需要解析其命名空间中的元素时，它会委托给它们。 这种关注的清晰分离使<code>NamespaceHandler</code> 能够处理对其命名空间中所有自定义元素的解析的编排，同时委托<code>BeanDefinitionParsers</code> 执行XML解析的繁琐工作。 这意味着每个<code>BeanDefinitionParser</code> 只包含解析单个自定义元素的逻辑，我们可以在下一步中看到。</p>\n<p><a id=\"xsd-custom-parser\"></a></p>\n<h4><a href=\"#xsd-custom-parser\"></a>9.2.3. 使用 <code>BeanDefinitionParser</code></h4>\n<p>如果<code>NamespaceHandler</code>遇到了已映射到特定bean定义分析器(在本例中为<code>dateformat</code> )的类型的XML元素，则将使用<code>BeanDefinitionParser</code>。换言之， <code>BeanDefinitionParser</code>负责分析在架构中定义的一个不同的顶级XML元素。在解析器中，我们将可以访问XML元素(以及它的子组件）以便我们能够解析我们的自定义XML内容。如下面的示例所示:</p>\n<pre><code>package org.springframework.samples.xml;\n\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\nimport org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;\nimport org.springframework.util.StringUtils;\nimport org.w3c.dom.Element;\n\nimport java.text.SimpleDateFormat;\n\npublic class SimpleDateFormatBeanDefinitionParser extends AbstractSingleBeanDefinitionParser { (1)\n\n    protected Class getBeanClass(Element element) {\n        return SimpleDateFormat.class; (2)\n    }\n\n    protected void doParse(Element element, BeanDefinitionBuilder bean) {\n        // this will never be null since the schema explicitly requires that a value be supplied\n        String pattern = element.getAttribute(&quot;pattern&quot;);\n        bean.addConstructorArg(pattern);\n\n        // this however is an optional property\n        String lenient = element.getAttribute(&quot;lenient&quot;);\n        if (StringUtils.hasText(lenient)) {\n            bean.addPropertyValue(&quot;lenient&quot;, Boolean.valueOf(lenient));\n        }\n    }\n\n}\n</code></pre>\n<p>**1、**我们使用Spring提供的<code>AbstractSingleBeanDefinitionParser</code>来处理创建单个<code>BeanDefinition</code>的许多基本工作。</p>\n<p>**2、**我们提供 <code>AbstractSingleBeanDefinitionParser</code> 超类，其类型是我们的单个<code>BeanDefinition</code>所代表的类型。</p>\n<p>在这个简单的例子中，这就是我们需要做的一切。 我们的单个<code>BeanDefinition</code>的创建由<code>AbstractSingleBeanDefinitionParser</code>超类处理，bean定义的唯一标识符的提取和设置也是如此。</p>\n<p><a id=\"xsd-custom-registration\"></a></p>\n<h4><a href=\"#xsd-custom-registration\"></a>9.2.4. 注册处理器和schema</h4>\n<p>编码完成。 剩下要做的就是让Spring XML解析基础架构了解我们的自定义元素。 我们通过在两个专用属性文件中注册我们的自定义<code>namespaceHandler</code>和自定义XSD文件来实现。 这些属性文件都放在应用程序的<code>META-INF</code>目录中。例如，可以与JAR文件中的二进制类一起分发。 Spring XML解析基础结构将通过使用这些特殊的属性文件来自动获取新的扩展，其格式将在接下来的两节中详细介绍。</p>\n<p><a id=\"xsd-custom-registration-spring-handlers\"></a></p>\n<h5><a href=\"#xsd-custom-registration-spring-handlers\"></a>Writing <code>META-INF/spring.handlers</code></h5>\n<p>名为 <code>spring.handlers</code>的属性文件包含XML Schema URI到命名空间处理程序类的映射。 对于我们的示例，我们需要编写以下内容:</p>\n<p>http\\://www.mycompany.com/schema/myns=org.springframework.samples.xml.MyNamespaceHandler</p>\n<p>( <code>:</code> 字符是Java属性格式的有效分隔符，因此 <code>:</code>URI中的字符需要使用反斜杠进行转义。）</p>\n<p>键值对的第一部分(key)是与自定义命名空间扩展关联的URI，需要与自定义XSD schema中指定的<code>targetNamespace</code>属性的值完全匹配</p>\n<p><a id=\"xsd-custom-registration-spring-schemas\"></a></p>\n<h5><a href=\"#xsd-custom-registration-spring-schemas\"></a>Writing 'META-INF/spring.schemas'</h5>\n<p>称为<code>spring.schemas</code>的属性文件包含xml schema位置(与xml文件中的schema声明一起使用，将schema用作<code>xsi:schemaLocation</code>属性的一部分）到类路径资源的映射。 这个文件需要阻止Spring使用绝对的默认的<code>EntityResolver</code>及要求网络访问来接收schema文件。如果在此属性文件中指定映射，Spring将在类路径中搜索schema(在本例中为 <code>org.springframework.samples.xml</code>包中的<code>myns.xsd</code>）。以下代码段显示了我们需要为自定义schema添加的行：:</p>\n<p>http\\://www.mycompany.com/schema/myns/myns.xsd=org/springframework/samples/xml/myns.xsd</p>\n<p>(（请记住：必须转义<code>:</code> 字符。）)</p>\n<p>建议您在类路径上的<code>NamespaceHandler</code>和<code>BeanDefinitionParser</code>类旁边部署XSD文件（或多个文件）。</p>\n<p><a id=\"xsd-custom-using\"></a></p>\n<h4><a href=\"#xsd-custom-using\"></a>9.2.5. 在Spring XML配置中使用自定义扩展</h4>\n<p>使用您自己已经实现的自定义扩展，与使用Spring提供的“自定义”扩展是没有区别的。在下面的示例中，可以使用Spring XML配置文件，以前的步骤开发自定义的<code>&lt;dateformat/&gt;</code>元素:</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    xmlns:myns=&quot;http://www.mycompany.com/schema/myns&quot;\n    xsi:schemaLocation=&quot;\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.mycompany.com/schema/myns http://www.mycompany.com/schema/myns/myns.xsd&quot;&gt;\n\n    &lt;!-- as a top-level bean --&gt;\n    &lt;myns:dateformat id=&quot;defaultDateFormat&quot; pattern=&quot;yyyy-MM-dd HH:mm&quot; lenient=&quot;true&quot;/&gt; (1)\n\n    &lt;bean id=&quot;jobDetailTemplate&quot; abstract=&quot;true&quot;&gt;\n        &lt;property name=&quot;dateFormat&quot;&gt;\n            &lt;!-- as an inner bean --&gt;\n            &lt;myns:dateformat pattern=&quot;HH:mm MM-dd-yyyy&quot;/&gt;\n        &lt;/property&gt;\n    &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre>\n<p><strong>1</strong> 我们自定义的bean</p>\n<p><a id=\"xsd-custom-meat\"></a></p>\n<h4><a href=\"#xsd-custom-meat\"></a>9.2.6. 更详细的例子</h4>\n<p>本节介绍自定义XML扩展的一些更详细的示例。</p>\n<p><a id=\"xsd-custom-custom-nested\"></a></p>\n<h5><a href=\"#xsd-custom-custom-nested\"></a>在自定义元素中嵌套自定义元素</h5>\n<p>本节中提供的示例显示了如何编写满足以下配置目标所需的各种部件:</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    xmlns:foo=&quot;http://www.foo.com/schema/component&quot;\n    xsi:schemaLocation=&quot;\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.foo.com/schema/component http://www.foo.com/schema/component/component.xsd&quot;&gt;\n\n    &lt;foo:component id=&quot;bionic-family&quot; name=&quot;Bionic-1&quot;&gt;\n        &lt;foo:component name=&quot;Mother-1&quot;&gt;\n            &lt;foo:component name=&quot;Karate-1&quot;/&gt;\n            &lt;foo:component name=&quot;Sport-1&quot;/&gt;\n        &lt;/foo:component&gt;\n        &lt;foo:component name=&quot;Rock-1&quot;/&gt;\n    &lt;/foo:component&gt;\n\n&lt;/beans&gt;\n</code></pre>\n<p>上述配置实际上嵌套了彼此之间的自定义扩展，由上面的<code>&lt;foo:component/&gt;</code>元素实际配置的类是组件类(直接显示在下面)。 请注意，<code>Component</code>类如何不公开<code>Component</code>属性的setter方法。这使得使用setter注入为<code>components</code>类配置bean定义变得困难(或者说是不可能的) 。以下清单显示了<code>Component</code>类:</p>\n<pre><code>package com.foo;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Component {\n\n    private String name;\n    private List&lt;Component&gt; components = new ArrayList&lt;Component&gt; ();\n\n    // mmm, there is no setter method for the 'components'\n    public void addComponent(Component component) {\n        this.components.add(component);\n    }\n\n    public List&lt;Component&gt; getComponents() {\n        return components;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n}\n</code></pre>\n<p>此问题的典型解决方案是创建一个自定义<code>FactoryBean</code>，用于公开<code>components</code> 属性的setter属性。 以下清单显示了这样的自定义<code>FactoryBean</code>:</p>\n<pre><code>package com.foo;\n\nimport org.springframework.beans.factory.FactoryBean;\n\nimport java.util.List;\n\npublic class ComponentFactoryBean implements FactoryBean&lt;Component&gt; {\n\n    private Component parent;\n    private List&lt;Component&gt; children;\n\n    public void setParent(Component parent) {\n        this.parent = parent;\n    }\n\n    public void setChildren(List&lt;Component&gt; children) {\n        this.children = children;\n    }\n\n    public Component getObject() throws Exception {\n        if (this.children != null &amp;&amp; this.children.size() &gt; 0) {\n            for (Component child : children) {\n                this.parent.addComponent(child);\n            }\n        }\n        return this.parent;\n    }\n\n    public Class&lt;Component&gt; getObjectType() {\n        return Component.class;\n    }\n\n    public boolean isSingleton() {\n        return true;\n    }\n\n}\n</code></pre>\n<p>这很好用，但它向最终用户公开了很多Spring管道。 我们要做的是编写一个隐藏所有Spring管道的自定义扩展。 如果我们坚持<a href=\"#xsd-custom-introduction\">前面描述的步骤</a>，我们首先创建XSD schema来定义自定义标记的结构，如下面的清单所示:</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;\n\n&lt;xsd:schema xmlns=&quot;http://www.foo.com/schema/component&quot;\n        xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;\n        targetNamespace=&quot;http://www.foo.com/schema/component&quot;\n        elementFormDefault=&quot;qualified&quot;\n        attributeFormDefault=&quot;unqualified&quot;&gt;\n\n    &lt;xsd:element name=&quot;component&quot;&gt;\n        &lt;xsd:complexType&gt;\n            &lt;xsd:choice minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;&gt;\n                &lt;xsd:element ref=&quot;component&quot;/&gt;\n            &lt;/xsd:choice&gt;\n            &lt;xsd:attribute name=&quot;id&quot; type=&quot;xsd:ID&quot;/&gt;\n            &lt;xsd:attribute name=&quot;name&quot; use=&quot;required&quot; type=&quot;xsd:string&quot;/&gt;\n        &lt;/xsd:complexType&gt;\n    &lt;/xsd:element&gt;\n\n&lt;/xsd:schema&gt;\n</code></pre>\n<p>再次按照<a href=\"#xsd-custom-introduction\">前面描述的过程</a>，我们再创建一个自定义<code>NamespaceHandler</code>:</p>\n<pre><code>package com.foo;\n\nimport org.springframework.beans.factory.xml.NamespaceHandlerSupport;\n\npublic class ComponentNamespaceHandler extends NamespaceHandlerSupport {\n\n    public void init() {\n        registerBeanDefinitionParser(&quot;component&quot;, new ComponentBeanDefinitionParser());\n    }\n\n}\n</code></pre>\n<p>接下来是自定义<code>BeanDefinitionParser</code>。 请记住，我们正在创建描述<code>ComponentFactoryBean</code>的<code>BeanDefinition</code>。 以下清单显示了我们的自定义<code>BeanDefinitionParser</code>：:</p>\n<pre><code>package com.foo;\n\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.support.AbstractBeanDefinition;\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\nimport org.springframework.beans.factory.support.ManagedList;\nimport org.springframework.beans.factory.xml.AbstractBeanDefinitionParser;\nimport org.springframework.beans.factory.xml.ParserContext;\nimport org.springframework.util.xml.DomUtils;\nimport org.w3c.dom.Element;\n\nimport java.util.List;\n\npublic class ComponentBeanDefinitionParser extends AbstractBeanDefinitionParser {\n\n    protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {\n        return parseComponentElement(element);\n    }\n\n    private static AbstractBeanDefinition parseComponentElement(Element element) {\n        BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(ComponentFactoryBean.class);\n        factory.addPropertyValue(&quot;parent&quot;, parseComponent(element));\n\n        List&lt;Element&gt; childElements = DomUtils.getChildElementsByTagName(element, &quot;component&quot;);\n        if (childElements != null &amp;&amp; childElements.size() &gt; 0) {\n            parseChildComponents(childElements, factory);\n        }\n\n        return factory.getBeanDefinition();\n    }\n\n    private static BeanDefinition parseComponent(Element element) {\n        BeanDefinitionBuilder component = BeanDefinitionBuilder.rootBeanDefinition(Component.class);\n        component.addPropertyValue(&quot;name&quot;, element.getAttribute(&quot;name&quot;));\n        return component.getBeanDefinition();\n    }\n\n    private static void parseChildComponents(List&lt;Element&gt; childElements, BeanDefinitionBuilder factory) {\n        ManagedList&lt;BeanDefinition&gt; children = new ManagedList&lt;BeanDefinition&gt;(childElements.size());\n        for (Element element : childElements) {\n            children.add(parseComponentElement(element));\n        }\n        factory.addPropertyValue(&quot;children&quot;, children);\n    }\n\n}\n</code></pre>\n<p>最后，需要通过修改<code>META-INF/spring.handlers</code>和<code>META-INF/spring.schemas</code>文件，在Spring XML基础结构中注册各种部件，如下所示:</p>\n<p># in 'META-INF/spring.handlers'\nhttp\\://www.foo.com/schema/component=com.foo.ComponentNamespaceHandler</p>\n<p># in 'META-INF/spring.schemas'\nhttp\\://www.foo.com/schema/component/component.xsd=com/foo/component.xsd</p>\n<p><a id=\"xsd-custom-custom-just-attributes\"></a></p>\n<h5><a href=\"#xsd-custom-custom-just-attributes\"></a>自定义“Normal”元素的属性</h5>\n<p>编写自己的自定义分析器和关联的部件并不难，但有时它不是正确的做法。请考虑您需要将元数据添加到已经存在的bean定义的情况。在这种情况下，你当然不想要去写你自己的整个自定义扩展， 相反，您只想向现有的bean定义元素添加一个附加属性。</p>\n<p>另一个例子，假设您要为服务对象定义一个bean(它不知道它）正在访问群集<a href=\"https://jcp.org/en/jsr/detail?id=107\">JCache</a>,，并且您希望确保命名的JCache 实例在周围的群集。 以下清单显示了这样一个定义:</p>\n<pre><code>&lt;bean id=&quot;checkingAccountService&quot; class=&quot;com.foo.DefaultCheckingAccountService&quot;\n        jcache:cache-name=&quot;checking.account&quot;&gt;\n    &lt;!-- other dependencies here... --&gt;\n&lt;/bean&gt;\n</code></pre>\n<p>然后，我们可以在解析 <code>'jcache:cache-name'</code>属性时创建另一个<code>BeanDefinition</code>。这个<code>BeanDefinition</code>将为我们初始化命名的JCache。 我们还可以修改 <code>'checkingAccountService'</code>的现有<code>BeanDefinition</code>，以便它依赖于这个新的JCache初始化<code>BeanDefinition</code>。 以下清单显示了我们的<code>JCacheInitializer</code>:</p>\n<pre><code>package com.foo;\n\npublic class JCacheInitializer {\n\n    private String name;\n\n    public JCacheInitializer(String name) {\n        this.name = name;\n    }\n\n    public void initialize() {\n        // lots of JCache API calls to initialize the named cache...\n    }\n\n}\n</code></pre>\n<p>现在我们可以转到自定义扩展。 首先，我们需要编写描述自定义属性的XSD schema，如下所示:</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;\n\n&lt;xsd:schema xmlns=&quot;http://www.foo.com/schema/jcache&quot;\n        xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;\n        targetNamespace=&quot;http://www.foo.com/schema/jcache&quot;\n        elementFormDefault=&quot;qualified&quot;&gt;\n\n    &lt;xsd:attribute name=&quot;cache-name&quot; type=&quot;xsd:string&quot;/&gt;\n\n&lt;/xsd:schema&gt;\n</code></pre>\n<p>接下来，我们需要创建关联的<code>NamespaceHandler</code>，如下所示:</p>\n<pre><code>package com.foo;\n\nimport org.springframework.beans.factory.xml.NamespaceHandlerSupport;\n\npublic class JCacheNamespaceHandler extends NamespaceHandlerSupport {\n\n    public void init() {\n        super.registerBeanDefinitionDecoratorForAttribute(&quot;cache-name&quot;,\n            new JCacheInitializingBeanDefinitionDecorator());\n    }\n\n}\n</code></pre>\n<p>接下来，我们需要创建解析器。请注意，在这种情况下，因为我们要解析XML属性，所以我们编写 <code>BeanDefinitionDecorator</code> 而不是 <code>BeanDefinitionParser</code>。 以下清单显示了我们的<code>BeanDefinitionDecorator</code>:</p>\n<pre><code>package com.foo;\n\nimport org.springframework.beans.factory.config.BeanDefinitionHolder;\nimport org.springframework.beans.factory.support.AbstractBeanDefinition;\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\nimport org.springframework.beans.factory.xml.BeanDefinitionDecorator;\nimport org.springframework.beans.factory.xml.ParserContext;\nimport org.w3c.dom.Attr;\nimport org.w3c.dom.Node;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class JCacheInitializingBeanDefinitionDecorator implements BeanDefinitionDecorator {\n\n    private static final String[] EMPTY_STRING_ARRAY = new String[0];\n\n    public BeanDefinitionHolder decorate(Node source, BeanDefinitionHolder holder,\n            ParserContext ctx) {\n        String initializerBeanName = registerJCacheInitializer(source, ctx);\n        createDependencyOnJCacheInitializer(holder, initializerBeanName);\n        return holder;\n    }\n\n    private void createDependencyOnJCacheInitializer(BeanDefinitionHolder holder,\n            String initializerBeanName) {\n        AbstractBeanDefinition definition = ((AbstractBeanDefinition) holder.getBeanDefinition());\n        String[] dependsOn = definition.getDependsOn();\n        if (dependsOn == null) {\n            dependsOn = new String[]{initializerBeanName};\n        } else {\n            List dependencies = new ArrayList(Arrays.asList(dependsOn));\n            dependencies.add(initializerBeanName);\n            dependsOn = (String[]) dependencies.toArray(EMPTY_STRING_ARRAY);\n        }\n        definition.setDependsOn(dependsOn);\n    }\n\n    private String registerJCacheInitializer(Node source, ParserContext ctx) {\n        String cacheName = ((Attr) source).getValue();\n        String beanName = cacheName + &quot;-initializer&quot;;\n        if (!ctx.getRegistry().containsBeanDefinition(beanName)) {\n            BeanDefinitionBuilder initializer = BeanDefinitionBuilder.rootBeanDefinition(JCacheInitializer.class);\n            initializer.addConstructorArg(cacheName);\n            ctx.getRegistry().registerBeanDefinition(beanName, initializer.getBeanDefinition());\n        }\n        return beanName;\n    }\n\n}\n</code></pre>\n<p>最后，我们需要通过修改<code>META-INF/spring.handlers</code> 和<code>META-INF/spring.schemas</code>文件来注册Spring XML基础结构中的各种工件，如下所示:</p>\n<p># in 'META-INF/spring.handlers'\nhttp\\://www.foo.com/schema/jcache=com.foo.JCacheNamespaceHandler</p>\n<p># in 'META-INF/spring.schemas'\nhttp\\://www.foo.com/schema/jcache/jcache.xsd=com/foo/jcache.xsd</p>\n",
  "link": "\\en-us\\docs\\springframework\\core\\appendix.html",
  "meta": {}
}