{
  "filename": "remoting.md",
  "__html": "<p><a id=\"remoting\"></a></p>\n<h2><a href=\"#remoting\"></a>1. Spring的远程处理和Web服务</h2>\n<p>Spring为使用各种技术的远程支持的集成类提供了功能，远程处理支持可轻松使用常用(Spring)pojo实现的、由您提供的服务开发。目前，Spring支持以下远程技术：</p>\n<ul>\n<li>\n<p><strong>远程方法调用(RMI)</strong>:通过使用<code>RmiProxyFactoryBean</code>和<code>RmiServiceExporter</code>。Spring支持传统的RMI（使用 <code>java.rmi.Remote</code>接口和<code>java.rmi.RemoteException</code>）以及通过RMI调用程序（使用任何Java接口）进行透明的远程处理。</p>\n</li>\n<li>\n<p><strong>Spring的 HTTP 调用</strong>: Spring提供了一种特殊的远程处理策略，允许通过HTTP进行Java序列化，支持任何Java接口（如RMI调用者所做的那样）。 相应的支持类是<code>HttpInvokerProxyFactoryBean</code>和<code>HttpInvokerServiceExporter</code>.</p>\n</li>\n<li>\n<p><strong>Hessian</strong>:通过使用Spring的<code>HessianProxyFactoryBean</code> 和<code>HessianServiceExporter</code>，您可以使用Caucho提供的轻量级二进制http协议透明地公开您的服务。</p>\n</li>\n<li>\n<p><strong>JAX-WS</strong>: Spring通过JAX-WS 为Web服务提供了远程处理支持(如Java EE 5和Java 6所介绍的那样， 它继承了JAX-RPC).</p>\n</li>\n<li>\n<p><strong>JMS</strong>: 通过<code>JmsInvokerServiceExporter</code> 和 <code>JmsInvokerProxyFactoryBean</code>类支持使用JMS作为底层协议进行远程处理。</p>\n</li>\n<li>\n<p><strong>AMQP</strong>:Spring AMQP项目支持使用AMQP作为底层协议进行远程处理。</p>\n</li>\n</ul>\n<p>在讨论Spring的远程处理功能时，我们使用以下域模型和相应的服务：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Account</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Serializable</span></span>{\n\n    <span class=\"hljs-keyword\">private</span> String name;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span></span>{\n        <span class=\"hljs-keyword\">return</span> name;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setName</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.name = name;\n    }\n\n}\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">AccountService</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insertAccount</span><span class=\"hljs-params\">(Account account)</span></span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;Account&gt; <span class=\"hljs-title\">getAccounts</span><span class=\"hljs-params\">(String name)</span></span>;\n\n}\n\n<span class=\"hljs-comment\">// the implementation doing nothing at the moment</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AccountServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">AccountService</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insertAccount</span><span class=\"hljs-params\">(Account acc)</span> </span>{\n        <span class=\"hljs-comment\">// do something...</span>\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;Account&gt; <span class=\"hljs-title\">getAccounts</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-comment\">// do something...</span>\n    }\n\n}\n</code></pre>\n<pre><code class=\"language-java\">\n</code></pre>\n<p>本节首先使用RMI将服务公开给远程客户端，然后再谈谈使用RMI的缺点。 然后继续使用Hessian作为协议的示例。</p>\n<p><a id=\"remoting-rmi\"></a></p>\n<h3><a href=\"#remoting-rmi\"></a>1.1. 使用RMI公开服务</h3>\n<p>使用Spring对RMI的支持， 您可以通过RMI架构透明地公开服务。在用此设置之后， 您基本上拥有一个类似于远程EJB的配置， 但不存在安全上下文传播或远程事务传播的标准支持这一事实。Spring在使用RMI调用器时提供了这样的附加调用上下文的钩子， 因此您可以在此处插入安全框架或自定义安全凭据。</p>\n<p><a id=\"remoting-rmi-server\"></a></p>\n<h4><a href=\"#remoting-rmi-server\"></a>1.1.1. 使用<code>RmiServiceExporter</code>暴露服务</h4>\n<p>使用<code>RmiServiceExporter</code>，我们可以将AccountService对象的接口公开为RMI对象。可以使用<code>RmiProxyFactoryBean</code>访问该接口，或者在传统RMI服务的情况下通过普通RMI访问该接口。 <code>RmiServiceExporter</code>明确支持通过RMI调用程序公开任何非RMI服务。</p>\n<p>我们首先必须在Spring容器中设置我们的服务。 以下示例显示了如何执行此操作：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"accountService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"example.AccountServiceImpl\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- any additional properties, maybe a DAO? --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>接下来，我们必须使用<code>RmiServiceExporter</code>暴露我们的服务。 以下示例显示了如何执行此操作：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.remoting.rmi.RmiServiceExporter\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- does not necessarily have to be the same name as the bean to be exported --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"serviceName\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"AccountService\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"service\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"accountService\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"serviceInterface\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"example.AccountService\"</span>/&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- defaults to 1099 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"registryPort\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"1199\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>在前面的示例中，我们覆盖RMI注册表的端口。通常情况下， 您的应用服务器还维护一个RMI注册表， 因此最好不要干预它。此外， 服务名称用于绑定服务。因此，在前面的示例中，服务绑定在 <code>'rmi://HOST:1199/AccountService'</code>。 我们稍后使用此URL链接客户端的服务。 .</p>\n<p><code>servicePort</code> 属性已被省略（默认为0）。这意味着将使用匿名端口与服务进行通信。</p>\n<p><a id=\"remoting-rmi-client\"></a></p>\n<h4><a href=\"#remoting-rmi-client\"></a>1.1.2. 连接客户端和服务</h4>\n<p>我们的客户端是一个使用 <code>AccountService</code>管理帐户的简单对象，如以下示例所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SimpleObject</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> AccountService accountService;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setAccountService</span><span class=\"hljs-params\">(AccountService accountService)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.accountService = accountService;\n    }\n\n    <span class=\"hljs-comment\">// additional methods using the accountService</span>\n\n}\n</code></pre>\n<p>要在客户端上链接服务， 我们将创建一个单独的Spring容器， 其中包含简单对象和连接配置位的服务。</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"example.SimpleObject\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"accountService\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"accountService\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"accountService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.remoting.rmi.RmiProxyFactoryBean\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"serviceUrl\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"rmi://HOST:1199/AccountService\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"serviceInterface\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"example.AccountService\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>这就是支持客户端连接远程帐户服务所需做的全部工作，Spring将透明地创建一个调用， 并通过 <code>RmiServiceExporter</code>远程启用帐户服务。在客户端， 我们在其链接中使用 <code>RmiProxyFactoryBean</code>。</p>\n<p><a id=\"remoting-caucho-protocols\"></a></p>\n<h3><a href=\"#remoting-caucho-protocols\"></a>1.2. 使用Hessian通过HTTP远程调用服务</h3>\n<p>Hessian提供基于HTTP的二进制远程协议。 它由Caucho开发，您可以在 <a href=\"http://www.caucho.com\">http://www.caucho.com</a>找到有关Hessian本身的更多信息。</p>\n<p><a id=\"remoting-caucho-protocols-hessian\"></a></p>\n<h4><a href=\"#remoting-caucho-protocols-hessian\"></a>1.2.1.使用<code>DispatcherServlet</code> 连接Hessian</h4>\n<p>Hessian通过HTTP进行通信，并使用自定义servlet进行通信。通过使用Spring的<code>DispatcherServlet</code> 原则（参见<a href=\"webmvc.html#mvc-servlet\">[webmvc#mvc-servlet]</a>），我们可以连接这样的servlet以公开您的服务。 首先，我们必须在我们的应用程序中创建一个新的servlet，如以下摘自<code>web.xml</code>所示:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>remoting<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-class</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">load-on-startup</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">load-on-startup</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-mapping</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>remoting<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url-pattern</span>&gt;</span>/remoting/*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url-pattern</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-mapping</span>&gt;</span>\n</code></pre>\n<p>如果您熟悉Spring的<code>DispatcherServlet</code>原则，您可能知道现在必须在 <code>WEB-INF</code>目录中创建一个名为<code>remoting-servlet.xml</code>的Spring容器配置资源（在您的servlet名称之后）。 应用程序上下文将在下一节中使用。</p>\n<p>或者， 考虑使用Spring更简单的<code>HttpRequestHandlerServlet</code>。这使您可以在根应用程序上下文中嵌入远程公开定义(默认情况下为<code>WEB-INF/applicationContext.xml</code>)， 并将单个Servlet定义指向特定的公开bean。在这种情况下， 每个Servlet名称都需要匹配其目标公开的bean名称。</p>\n<p><a id=\"remoting-caucho-protocols-hessian-server\"></a></p>\n<h4><a href=\"#remoting-caucho-protocols-hessian-server\"></a>1.2.2. 使用<code>HessianServiceExporter</code>暴露您的Bean</h4>\n<p>在新创建的名为 <code>remoting-servlet.xml</code>的应用程序上下文中，我们创建了一个<code>HessianServiceExporter</code> 来暴露我们的服务，如下例所示:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"accountService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"example.AccountServiceImpl\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- any additional properties, maybe a DAO? --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"/AccountService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.remoting.caucho.HessianServiceExporter\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"service\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"accountService\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"serviceInterface\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"example.AccountService\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>现在, 我们已经准备好在客户端上链接服务了.未指定显式处理程序映射， 将请求URL映射到服务上， 因此将使用<code>BeanNameUrlHandlerMapping</code>。 因此， 该服务将在包含 <code>DispatcherServlet</code>映射(如上所述)的URL中通过其bean名称指示的网址公开:<code>[http://HOST:8080/remoting/AccountService](http://HOST:8080/remoting/AccountService)</code></p>\n<p>或者, 在您的根应用程序上下文中创建一个<code>HessianServiceExporter</code>(例如在 <code>WEB-INF/applicationContext.xml</code>)。如下所示:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"accountExporter\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.remoting.caucho.HessianServiceExporter\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"service\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"accountService\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"serviceInterface\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"example.AccountService\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>在后一种情况下， 在<code>web.xml</code>中为该公开定义一个相应的Servlet， 并使用相同的最终结果： 公开程序被映射到请求路径<code>/remoting/AccountService</code>。请注意， Servlet名称需要与目标公开方的bean名称匹配。</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>accountExporter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-class</span>&gt;</span>org.springframework.web.context.support.HttpRequestHandlerServlet<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-class</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-mapping</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>accountExporter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url-pattern</span>&gt;</span>/remoting/AccountService<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url-pattern</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-mapping</span>&gt;</span>\n</code></pre>\n<p><a id=\"remoting-caucho-protocols-hessian-clien\"></a></p>\n<h4><a href=\"#remoting-caucho-protocols-hessian-client\"></a>1.2.3. 在客户端的服务中链接</h4>\n<p>通过使用<code>HessianProxyFactoryBean</code>，我们可以链接客户端的服务。同样的原则适用于RMI示例。我们创建一个单独的bean工厂或应用程序上下文，并提到以下bean，其中<code>SimpleObject</code>是通过使用<code>AccountService</code>来管理帐户，如以下示例所示：:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"example.SimpleObject\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"accountService\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"accountService\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"accountService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.remoting.caucho.HessianProxyFactoryBean\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"serviceUrl\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"http://remotehost:8080/remoting/AccountService\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"serviceInterface\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"example.AccountService\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p><a id=\"remoting-caucho-protocols-security\"></a></p>\n<h4><a href=\"#remoting-caucho-protocols-security\"></a>1.2.4. 通过Hessian公开的服务来应用HTTP基本的验证</h4>\n<p>Hessian的一个优点是我们可以轻松应用HTTP基本身份验证，因为这两种协议都是基于HTTP的。例如，可以通过使用 <code>web.xml</code>安全功能来应用常规HTTP服务器安全性机制。 通常，您无需在此处使用每用户安全凭据。 相反，您可以使用在<code>HessianProxyFactoryBean</code>级别定义的共享凭证（类似于JDBC <code>DataSource</code>），如以下示例所示:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"interceptors\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"authorizationInterceptor\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"authorizationInterceptor\"</span>\n        <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.web.servlet.handler.UserRoleAuthorizationInterceptor\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"authorizedRoles\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"administrator,operator\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>在前面的示例中，我们明确提到了 <code>BeanNameUrlHandlerMapping</code>并设置了一个拦截器，只允许管理员和操作员调用此应用程序上下文中提到的bean。</p>\n<p>前面的示例并没有显示一种灵活的安全基础结构。有关安全性的更多选项，请查看<a href=\"https://projects.spring.io/spring-security/\">http://projects.spring.io/spring-security/</a>上的Spring Security项目。</p>\n<p><a id=\"remoting-httpinvoker\"></a></p>\n<h3><a href=\"#remoting-httpinvoker\"></a>1.3. 使用HTTP调用公开服务</h3>\n<p>与Hessian相反，Spring HTTP调用者都是轻量级协议，Hessian使用自身序列化机制，而Spring HTTP调用者使用标准的Java序列化机制通过HTTP公开服务。如果您的参数和返回类型是使用Hessian使用的序列化机制无法序列化的复杂类型，那么这具有巨大的优势（当您选择远程处理技术时，请参阅下一节以了解更多注意事项）。</p>\n<p>在底层，Spring使用JDK或Apache <code>HttpComponents</code>提供的标准工具来执行HTTP调用。 如果您需要更高级且更易于使用的功能，请使用后者。 有关更多信息，请参阅<a href=\"https://hc.apache.org/httpcomponents-client-ga/\">hc.apache.org/httpcomponents-client-ga/</a>。</p>\n<p>由于不安全的Java反序列化而造成的漏洞:操作的输入流可能导致在反序列化步骤中在服务器上执行不需要的代码。因此， 不要将HTTP调用方终结点公开给不受信任的客户端， 而只应该在您自己的服务之间。通常， 我们强烈推荐任何其他消息格式(例如JSON)。</p>\n<p>如果您担心由于Java序列化引起的安全漏洞， 请考虑核心JVM级别的generalpurpose序列化筛选器机制， 它最初是为JDK 9开发的。但同时又向后移植到JDK 8,7和6。 请参阅<a href=\"https://blogs.oracle.com/java-platform-group/entry/incoming_filter_serialization_data_a\">https://blogs.oracle.com/java-platform-group/entry/incoming_filter_serialization_data_a</a> 和 <a href=\"http://openjdk.java.net/jeps/290\">http://openjdk.java.net/jeps/290</a>.</p>\n<p><a id=\"remoting-httpinvoker-server\"></a></p>\n<h4><a href=\"#remoting-httpinvoker-server\"></a>1.3.1. 公开服务对象</h4>\n<p>为服务对象设置HTTP调用的架构类似于使用Hession，方式也是相同的。正如Hession支持提供 是<code>HessianServiceExporter</code>。 Spring的HttpInvoker支持提供了<code>org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter</code>。</p>\n<p>要在Spring Web MVC <code>DispatcherServlet</code>中暴露<code>AccountService</code>（前面提到过），需要在调度程序的应用程序上下文中使用以下配置，如以下示例所示：:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"/AccountService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"service\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"accountService\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"serviceInterface\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"example.AccountService\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>这样一个公开的定义将通过 <code>DispatcherServlet</code>的标准映射设备， 如在关于<a href=\"#remoting-caucho-protocols\">Hession的章节</a>中解释。</p>\n<p>或者，您可以在根应用程序上下文中创建<code>HttpInvokerServiceExporter</code>（例如，在<code>'WEB-INF/applicationContext.xml'</code>中），如以下示例所示:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"accountExporter\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"service\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"accountService\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"serviceInterface\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"example.AccountService\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>此外，在<code>web.xml</code>中为该公开定义一个对应的Servlet， 其Servlet名称与目标公开的bean名称相匹配。如下所示:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>accountExporter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-class</span>&gt;</span>org.springframework.web.context.support.HttpRequestHandlerServlet<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-class</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-mapping</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>accountExporter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url-pattern</span>&gt;</span>/remoting/AccountService<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url-pattern</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-mapping</span>&gt;</span>\n</code></pre>\n<p><a id=\"remoting-httpinvoker-client\"></a></p>\n<h4><a href=\"#remoting-httpinvoker-client\"></a>1.3.2. 在客户端链接服务</h4>\n<p>同样，从客户端链接服务非常类似于使用Hessian时的方式。通过使用代理，Spring可以将对HTTP POST请求的调用转换为指向公开服务的URL。以下示例显示如何配置:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"httpInvokerProxy\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"serviceUrl\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"http://remotehost:8080/remoting/AccountService\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"serviceInterface\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"example.AccountService\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>如前所述，您可以选择要使用的HTTP客户端。默认情况下，<code>HttpInvokerProxy</code>使用JDK的HTTP功能，但您也可以通过设置 <code>httpInvokerRequestExecutor</code>属性来使用Apache <code>HttpComponents</code>客户端。以下示例显示了如何执行此操作:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"httpInvokerRequestExecutor\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n</code></pre>\n<p><a id=\"remoting-web-services\"></a></p>\n<h3><a href=\"#remoting-web-services\"></a>1.4. Web Services</h3>\n<p>Spring提供对标准Java Web服务API的完全支持:</p>\n<ul>\n<li>\n<p>使用JAX-WS暴露服务</p>\n</li>\n<li>\n<p>使用JAX-WS访问Web服务</p>\n</li>\n</ul>\n<p>除了在Spring的核心中支持JAX-WS外，Spring的portfolio也具有Spring Web服务的特点。这是一种以文档驱动的<a href=\"http://www.springframework.org/spring-ws\">Spring Web服务</a>为基础的解决方案， 它极力推荐用于构建现代的、经得起未来考验的Web服务。</p>\n<p><a id=\"remoting-web-services-jaxws-export-servlet\"></a></p>\n<h4><a href=\"#remoting-web-services-jaxws-export-servlet\"></a>1.4.1. 使用JAX-WS公开基于Servlet的Web服务</h4>\n<p>Spring为JAX-WS Servlet端实现提供了一个方便的基类- <code>SpringBeanAutowiringSupport</code>。为了公开我们的<code>AccountService</code>， 我们继承了Spring的<code>SpringBeanAutowiringSupport</code>类并在这里实现我们的业务逻辑， 通常是将调用委托给业务层。我们将简单地使用spring的<code>@Autowired</code>注解来表达对Spring管理bean的这种依赖性。以下示例显示了扩展<code>SpringBeanAutowiringSupport</code>的类:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n * JAX-WS compliant AccountService implementation that simply delegates\n * to the AccountService implementation in the root web application context.\n *\n * This wrapper class is necessary because JAX-WS requires working with dedicated\n * endpoint classes. If an existing service needs to be exported, a wrapper that\n * extends SpringBeanAutowiringSupport for simple Spring bean autowiring (through\n * the <span class=\"hljs-doctag\">@Autowired</span> annotation) is the simplest JAX-WS compliant way.\n *\n * This is the class registered with the server-side JAX-WS implementation.\n * In the case of a Java EE 5 server, this would simply be defined as a servlet\n * in web.xml, with the server detecting that this is a JAX-WS endpoint and reacting\n * accordingly. The servlet name usually needs to match the specified WS service name.\n *\n * The web service engine manages the lifecycle of instances of this class.\n * Spring bean references will just be wired in here.\n */</span>\n<span class=\"hljs-keyword\">import</span> org.springframework.web.context.support.SpringBeanAutowiringSupport;\n\n<span class=\"hljs-meta\">@WebService</span>(serviceName=<span class=\"hljs-string\">\"AccountService\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AccountServiceEndpoint</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">SpringBeanAutowiringSupport</span> </span>{\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> AccountService biz;\n\n    <span class=\"hljs-meta\">@WebMethod</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insertAccount</span><span class=\"hljs-params\">(Account acc)</span> </span>{\n        biz.insertAccount(acc);\n    }\n\n    <span class=\"hljs-meta\">@WebMethod</span>\n    <span class=\"hljs-keyword\">public</span> Account[] getAccounts(String name) {\n        <span class=\"hljs-keyword\">return</span> biz.getAccounts(name);\n    }\n\n}\n</code></pre>\n<p>我们的<code>AccountServiceEndpoint</code>需要在与Spring上下文相同的Web应用程序中运行，以允许访问Spring的工具。 默认情况下，在Java EE 5环境中使用JAX-WS servlet端点部署的标准协定就是这种情况。 有关详细信息，请参阅各种Java EE 5 Web服务教程。</p>\n<p><a id=\"remoting-web-services-jaxws-export-standalone\"></a></p>\n<h4><a href=\"#remoting-web-services-jaxws-export-standalone\"></a>1.4.2. 使用JAX-WS公开独立Web服务</h4>\n<p>Oracle JDK附带的内置JAX-WS提供程序通过使用JDK中包含的内置HTTP服务器支持Web服务的公开。Spring的<code>SimpleJaxWsServiceExporter</code>在Spring应用程序上下文中检测所有<code>@WebService</code>注解的bean，并通过默认的JAX-WS服务器（JDK HTTP服务器）公开它们。</p>\n<p>在这种情况下， 端实例被定义并作为Spring bean来管理。它们将在JAX-WS引擎中注册， 但它们的生命周期将由Spring应用程序上下文来实现。这意味着像显式依赖注入这样的Spring功能可以应用到端点实例。 当然， 通过<code>@Autowired</code>的注解驱动的注入也会起作用。以下示例显示了如何定义这些bean:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.remoting.jaxws.SimpleJaxWsServiceExporter\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"baseAddress\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"http://localhost:8080/\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"accountServiceEndpoint\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"example.AccountServiceEndpoint\"</span>&gt;</span>\n    ...\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n...\n</code></pre>\n<p><code>AccountServiceEndpoint</code>可以不用继承Spring的<code>SpringBeanAutowiringSupport</code>，因为此示例中的端点是完全由Spring管理的bean。 这意味着端点实现可以如下（没有声明任何超类 - 而且Spring的<code>@Autowired</code>配置注解仍然被可用）:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@WebService</span>(serviceName=<span class=\"hljs-string\">\"AccountService\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AccountServiceEndpoint</span> </span>{\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> AccountService biz;\n\n    <span class=\"hljs-meta\">@WebMethod</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insertAccount</span><span class=\"hljs-params\">(Account acc)</span> </span>{\n        biz.insertAccount(acc);\n    }\n\n    <span class=\"hljs-meta\">@WebMethod</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;Account&gt; <span class=\"hljs-title\">getAccounts</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> biz.getAccounts(name);\n    }\n\n}\n</code></pre>\n<p><a id=\"remoting-web-services-jaxws-export-ri\"></a></p>\n<h4><a href=\"#remoting-web-services-jaxws-export-ri\"></a>1.4.3. 使用JAX-WS RI的Spring支持公开Web服务</h4>\n<p>Oracle的JAX-WS RI, 作为GlassFish项目的一部分，通过Spring的支持也作为JAX-WS Commons项目的一部分。这允许将 JAX-WS端点定义为Spring管理bean， 类似于<a href=\"#remoting-web-services-jaxws-export-standalone\">上一节</a>中讨论的独立模式。 但这一次是在Servlet环境中进行的</p>\n<p>这在Java EE 5环境中不可移植。 它主要用于非EE环境，例如Tomcat，它将JAX-WS RI作为Web应用程序的一部分嵌入。</p>\n<p>与Servlet端的标准样式的不同之处在于，端实例本身的生命周期将由Spring来管理，并且在<code>web.xml</code>中将只定义一个JAX-WS Servlet。使用标准的Java EE 5样式 (如上所述)， 每个服务端都有一个Servlet定义， 每个端通常委派给Spring bean(通过使用<code>@Autowired</code>，如上所示)。</p>\n<p>有关设置和使用方式的详细信息，请参阅<a href=\"https://jax-ws-commons.java.net/spring/\">https://jax-ws-commons.java.net/spring/</a>。</p>\n<p><a id=\"remoting-web-services-jaxws-access\"></a></p>\n<h4><a href=\"#remoting-web-services-jaxws-access\"></a>1.4.4. 使用JAX-WS访问Web服务</h4>\n<p>Spring提供了两个工厂bean来创建JAX-WS Web服务代理，即<code>LocalJaxWsServiceFactoryBean</code> 和 <code>JaxWsPortProxyFactoryBean</code>。前者只能返回一个JAX-WS服务类供我们使用。后者是完整版本，可以返回实现我们的业务服务接口的代理。在以下示例中，我们使用<code>JaxWsPortProxyFactoryBean</code>为<code>AccountService</code>端点创建代理（再次）：:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"accountWebService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"serviceInterface\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"example.AccountService\"</span>/&gt;</span> (1)\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"wsdlDocumentUrl\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"http://localhost:8888/AccountServiceEndpoint?WSDL\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"namespaceUri\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"http://example/\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"serviceName\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"AccountService\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"portName\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"AccountServiceEndpointPort\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p><strong>1</strong>、其中<code>serviceInterface</code> 是客户端使用的业务接口。</p>\n<p><code>wsdlDocumentUrl</code>是WSDL文件的URL。Spring需要这样的启动时间来创建 JAX-WS服务。<code>namespaceUri</code>对应于.wsdl文件中的<code>targetNamespace</code> 。<code>serviceName</code>对应于.wsdl文件中的服务名称。 <code>portName</code>对应于.wsdl文件中的端口名称。</p>\n<p>访问Web服务现在非常容易， 因为我们有一个bean工厂， 它将公开它作为<code>AccountService</code>接口。我们可以在Spring中配置:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"client\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"example.AccountClientImpl\"</span>&gt;</span>\n    ...\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"service\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"accountWebService\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>从客户端代码中， 我们可以访问Web服务，就好像它是一个普通类一样:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AccountClientImpl</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> AccountService service;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setService</span><span class=\"hljs-params\">(AccountService service)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.service = service;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">()</span> </span>{\n        service.insertAccount(...);\n    }\n}\n</code></pre>\n<p>上述情况略有简化， 因为JAX-WS需要端点接口和实现类来注解<code>@WebService</code>、<code>@SOAPBinding</code>等注解。这意味着您不能(很容易)使用普通的Java接口和实现类作为JAX-WS端点工件；首先您需要相应地对它们进行注解。 有关这些要求的详细信息 请参阅JAX-WS文档。</p>\n<p><a id=\"remoting-jms\"></a></p>\n<h3><a href=\"#remoting-jms\"></a>1.5. 通过JMS公开服务</h3>\n<p>您还可以使用JMS作为底层通信协议透明地公开服务。 JMS的远程支持在Spring Framework中是非常基础。它在同一个线程和同一个非事务性会话中发送和接收。 并且这样的吞吐量将非常依赖于实现， 请注意， 这些单线程和非事务性约束仅适用于Spring的JMS远程处理支持。有关Spring对JMS消息传递的丰富支持的信息， 请参见<a href=\"#jms\">JMS (Java Message Service)</a></p>\n<p>以下接口用于服务器端和客户端:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.foo;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CheckingAccountService</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">cancelAccount</span><span class=\"hljs-params\">(Long accountId)</span></span>;\n\n}\n</code></pre>\n<p>在服务器端使用上述接口的以下简单实现:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.foo;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SimpleCheckingAccountService</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">CheckingAccountService</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">cancelAccount</span><span class=\"hljs-params\">(Long accountId)</span> </span>{\n        System.out.println(<span class=\"hljs-string\">\"Cancelling account [\"</span> + accountId + <span class=\"hljs-string\">\"]\"</span>);\n    }\n\n}\n</code></pre>\n<p>此配置文件包含在客户端和服务器上共享的JMS基础结构bean:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n    <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"connectionFactory\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.apache.activemq.ActiveMQConnectionFactory\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"brokerURL\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"tcp://ep-t43:61616\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"queue\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.apache.activemq.command.ActiveMQQueue\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"mmm\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<p><a id=\"remoting-jms-server\"></a></p>\n<h4><a href=\"#remoting-jms-server\"></a>1.5.1. 服务端的配置</h4>\n<p>在服务器上， 您只需使用<code>JmsInvokerServiceExporter</code>公开服务对象:</p>\n<pre><code class=\"language-xml\">    <span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n        <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n        <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\n            http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</span>\n    \n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"checkingAccountService\"</span>\n                <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.jms.remoting.JmsInvokerServiceExporter\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"serviceInterface\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"com.foo.CheckingAccountService\"</span>/&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"service\"</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.foo.SimpleCheckingAccountService\"</span>/&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n    \n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.jms.listener.SimpleMessageListenerContainer\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"connectionFactory\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"connectionFactory\"</span>/&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"destination\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"queue\"</span>/&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"concurrentConsumers\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"3\"</span>/&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"messageListener\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"checkingAccountService\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n    \n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<pre><code class=\"language-java\">    <span class=\"hljs-keyword\">package</span> com.foo;\n    \n    <span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;\n    \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Server</span> </span>{\n    \n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n            <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-keyword\">new</span> String[]{<span class=\"hljs-string\">\"com/foo/server.xml\"</span>, <span class=\"hljs-string\">\"com/foo/jms.xml\"</span>});\n        }\n    \n    }\n</code></pre>\n<p><a id=\"remoting-jms-client\"></a></p>\n<h4><a href=\"#remoting-jms-client\"></a>1.5.2. 客户端方面的配置</h4>\n<p>客户端只需要创建一个实现约定接口（<code>CheckingAccountService</code>）的客户端代理。</p>\n<p>以下示例定义了可以注入其他客户端对象的bean（代理负责通过JMS将调用转发到服务器端对象）:</p>\n<pre><code class=\"language-xml\">    <span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n        <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n        <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\n            http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</span>\n    \n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"checkingAccountService\"</span>\n                <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.jms.remoting.JmsInvokerProxyFactoryBean\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"serviceInterface\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"com.foo.CheckingAccountService\"</span>/&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"connectionFactory\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"connectionFactory\"</span>/&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"queue\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"queue\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n    \n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<pre><code class=\"language-java\">    <span class=\"hljs-keyword\">package</span> com.foo;\n    \n    <span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;\n    <span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;\n    \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Client</span> </span>{\n    \n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n            ApplicationContext ctx = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(\n                    <span class=\"hljs-keyword\">new</span> String[] {<span class=\"hljs-string\">\"com/foo/client.xml\"</span>, <span class=\"hljs-string\">\"com/foo/jms.xml\"</span>});\n            CheckingAccountService service = (CheckingAccountService) ctx.getBean(<span class=\"hljs-string\">\"checkingAccountService\"</span>);\n            service.cancelAccount(<span class=\"hljs-keyword\">new</span> Long(<span class=\"hljs-number\">10</span>));\n        }\n    \n    }\n</code></pre>\n<p><a id=\"remoting-amqp\"></a></p>\n<h3><a href=\"#remoting-amqp\"></a>1.6. AMQP</h3>\n<p>有关详细信息，请参阅<a href=\"https://docs.spring.io/spring-amqp/docs/current/reference/html/_reference.html#remoting\">Spring AMQP参考指南的“使用AMQP进行Spring Remoting”部分</a> 。</p>\n<p>远程接口未实现自动检测</p>\n<p>远程接口不发生自动检测实现的接口的主要原因是避免向远程调用方打开太多的门，目标对象可能实现内部回调接口，例如<code>InitializingBean</code>或<code>DisposableBean</code>，它们不希望向调用者公开。</p>\n<p>在本地情况下， 向代理提供由目标实现的所有接口通常并不重要。但是， 当公开远程服务时， 应公开特定的服务接口， 并使用特定的操作来进行远程使用。 除内部回调接口外， 目标可能实现多个业务接口， 其中仅有一个用于远程公开。由于这些原因，， 我们需要指定这样的服务接口。</p>\n<p>这是配置方便和意外暴露内部方法风险之间的权衡，总是指定一个服务接口并不费劲， 并把你放在安全方面的控制公开的特定方法。</p>\n<p><a id=\"remoting-considerations\"></a></p>\n<h3><a href=\"#remoting-considerations\"></a>1.7. 选择技术时的注意事项</h3>\n<p>这里介绍的每项技术都有其缺点。 在选择技术时，您应该仔细考虑您的需求，您公开的服务以及通过网络发送的对象。</p>\n<p>当使用RMI，不可能通过HTTP协议来访问到这些对象，除非你使用了RMI的隧道。RMI是一个重量级的协议，支持全功能的序列化策略，这在使用需要在线上进行序列化的复杂数据模型时非常重要。 但是， RMI-JRMP与Java客户端绑定在一起，它是一种Java-to-Java远程处理解决方案。</p>\n<p>如果您需要基于HTTP的远程处理，而且还依赖于Java序列化，那么Spring的HTTP调用程序是一个不错的选择。它与RMI调用共享基本的基础结构， 只是使用HTTP作为传输。 请注意，HTTP调用程序不仅限于Java-to-Java远程处理，还包括客户端和服务器端的Spring。（后者也适用于Spring的非RMI接口的RMI调用程序。）</p>\n<p>在跨平台中使用时，Hessian是很好的选择，因为它们明确允许非Java客户端。但是，非Java支持仍然有限。已知问题包括Hibernate对象的序列化以及延迟初始化的集合。如果您有这样的数据模型，请考虑使用RMI或HTTP调用程序而不是Hessian。</p>\n<p>JMS可用于提供服务群集， 并允许JMS代理处理负载平衡、发现和自动故障转移。 默认情况下， 在使用JMS远程处理时使用Java序列化， 但JMS提供程序可以对格式使用不同的机制， 例如XStream以允许在其他技术中实现服务器。</p>\n<p>最后但并非最不重要的是，EJB具有优于RMI的优势，因为它支持标准的基于角色的身份验证和授权以及远程事务传播。有可能让RMI调用者或HTTP调用者也支持安全上下文传播，尽管核心Spring没有提供。 Spring仅提供适当的挂钩，用于插入第三方或自定义解决方案。</p>\n<p><a id=\"rest-client-access\"></a></p>\n<h3><a href=\"#rest-client-access\"></a>1.8. REST 端点</h3>\n<p>Spring Framework为调用REST端点提供了两种选择：</p>\n<ul>\n<li>\n<p><a href=\"#rest-resttemplate\">使用 <code>RestTemplate</code></a>: 原始的Spring REST客户端与在Spring中API相似于其他模板类，例如JdbcTemplate</p>\n</li>\n<li>\n<p><a href=\"web-reactive.html#webflux-client\">WebClient</a>: 非阻塞，响应式替代方案，支持同步和异步以及流方案。</p>\n</li>\n</ul>\n<p>从5.0开始，非阻塞，反应式 <code>WebClient</code>提供了<code>RestTemplate</code>的现代替代方案，同时有效支持同步和异步以及流方案。 <code>RestTemplate</code>将在未来版本中弃用，并且不会在未来添加主要的新功能。</p>\n<p><a id=\"rest-resttemplate\"></a></p>\n<h4><a href=\"#rest-resttemplate\"></a>1.8.1. 使用 <code>RestTemplate</code></h4>\n<p><code>RestTemplate</code>在HTTP客户端库上提供了更高级别的API，它使得在一行中调用REST端点变得容易。 它公开了以下重载方法组：</p>\n<p>Table 1. RestTemplate 方法</p>\n<table>\n<thead>\n<tr>\n<th>Method group</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>getForObject</code></td>\n<td>通过GET获取响应。</td>\n</tr>\n<tr>\n<td><code>getForEntity</code></td>\n<td>使用GET获取<code>ResponseEntity</code> (即status, headers和body)</td>\n</tr>\n<tr>\n<td><code>headForHeaders</code></td>\n<td>Retrieves all headers for a resource by using HEAD.</td>\n</tr>\n<tr>\n<td><code>postForLocation</code></td>\n<td>使用POST创建新资源，并从响应中返回<code>Location</code>标头。</td>\n</tr>\n<tr>\n<td><code>postForObject</code></td>\n<td>使用POST创建新资源并从响应中返回表示。</td>\n</tr>\n<tr>\n<td><code>postForEntity</code></td>\n<td>使用POST创建新资源并从响应中返回表示。</td>\n</tr>\n<tr>\n<td><code>put</code></td>\n<td>使用PUT创建或更新资源。</td>\n</tr>\n<tr>\n<td><code>patchForObject</code></td>\n<td>使用PATCH更新资源并从响应中返回表示。 请注意，JDK <code>HttpURLConnection</code>不支持<code>PATCH</code>，但Apache HttpComponents和其他一样。</td>\n</tr>\n<tr>\n<td><code>delete</code></td>\n<td>使用DELETE删除指定URI处的资源。</td>\n</tr>\n<tr>\n<td><code>optionsForAllow</code></td>\n<td>使用ALLOW检索资源的允许HTTP方法。</td>\n</tr>\n<tr>\n<td><code>exchange</code></td>\n<td>上述方法的更通用（且不太固定）的版本，在需要时提供额外的灵活性。 它接受<code>RequestEntity</code>（包括HTTP方法，URL，headers和正文作为输入）并返回<code>ResponseEntity</code>。这些方法允许使用<code>ParameterizedTypeReference</code>而不是<code>Class</code>来指定具有泛型的响应类型。</td>\n</tr>\n<tr>\n<td><code>execute</code></td>\n<td>执行请求的最通用方式，通过回调接口完全控制请求准备和响应提取。</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"rest-resttemplate-create\"></a></p>\n<h5><a href=\"#rest-resttemplate-create\"></a>初始化</h5>\n<p>默认构造函数使用 <code>java.net.HttpURLConnection</code>来执行请求。 您可以使用 <code>ClientHttpRequestFactory</code>的实现切换到不同的HTTP库。 内置支持以下内容：</p>\n<ul>\n<li>\n<p>Apache HttpComponents</p>\n</li>\n<li>\n<p>Netty</p>\n</li>\n<li>\n<p>OkHttp</p>\n</li>\n</ul>\n<p>例如，要切换到Apache HttpComponents，您可以使用以下命令：</p>\n<pre><code class=\"language-java\">RestTemplate template = <span class=\"hljs-keyword\">new</span> RestTemplate(<span class=\"hljs-keyword\">new</span> HttpComponentsClientHttpRequestFactory());\n</code></pre>\n<p>每个<code>ClientHttpRequestFactory</code>都公开特定于底层HTTP客户端库的配置选项 - 例如，用于凭据，连接池和其他详细信息。</p>\n<p>请注意，HTTP请求的<code>java.net</code>实现在访问表示错误的响应的状态（例如401）时可能引发异常。 如果这是一个问题，请切换到另一个HTTP客户端库。</p>\n<p><a id=\"rest-resttemplate-uri\"></a></p>\n<h5><a href=\"#rest-resttemplate-uri\"></a>URIs</h5>\n<p>许多<code>RestTemplate</code>方法接受URI模板和URI模板变量，可以是<code>String</code>变量参数，也可以是<code>Map&lt;String,String&gt;</code>。</p>\n<p>以下示例使用<code>String</code>变量参数：</p>\n<pre><code class=\"language-java\">String result = restTemplate.getForObject(\n        \"http://example.com/hotels/{hotel}/bookings/{booking}\", String.class, \"42\", \"21\");\n</code></pre>\n<p>以下示例使用<code>Map&lt;String, String&gt;</code> :</p>\n<pre><code class=\"language-java\">Map&lt;String, String&gt; vars = Collections.singletonMap(<span class=\"hljs-string\">\"hotel\"</span>, <span class=\"hljs-string\">\"42\"</span>);\n\nString result = restTemplate.getForObject(\n        <span class=\"hljs-string\">\"http://example.com/hotels/{hotel}/rooms/{hotel}\"</span>, String<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>, <span class=\"hljs-title\">vars</span>)</span>;\n</code></pre>\n<p>请记住，URI模板是自动编码的，如以下示例所示：</p>\n<pre><code class=\"language-java\">restTemplate.getForObject(<span class=\"hljs-string\">\"http://example.com/hotel list\"</span>, String<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)</span>;\n\n<span class=\"hljs-comment\">// Results in request to \"http://example.com/hotel%20list\"</span>\n</code></pre>\n<p>您可以使用<code>RestTemplate</code>的<code>uriTemplateHandler</code>属性来自定义URI的编码方式。 或者，您可以准备<code>java.net.URI</code>并将其传递给接受<code>URI</code>的<code>RestTemplate</code>方法之一。</p>\n<p>有关使用和编码URI的更多详细信息，请参阅<a href=\"web.html#mvc-uri-building\">URI Links</a>。</p>\n<p><a id=\"rest-template-headers\"></a></p>\n<h5><a href=\"#rest-template-headers\"></a>Headers</h5>\n<p>您可以使用<code>exchange()</code>方法指定请求头，如以下示例所示：</p>\n<pre><code class=\"language-java\">String uriTemplate = <span class=\"hljs-string\">\"http://example.com/hotels/{hotel}\"</span>;\nURI uri = UriComponentsBuilder.fromUriString(uriTemplate).build(<span class=\"hljs-number\">42</span>);\n\nRequestEntity&lt;Void&gt; requestEntity = RequestEntity.get(uri)\n        .header((<span class=\"hljs-string\">\"MyRequestHeader\"</span>, <span class=\"hljs-string\">\"MyValue\"</span>)\n        .build();\n\nResponseEntity&lt;String&gt; response = template.exchange(requestEntity, String<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)</span>;\n\nString responseHeader = response.getHeaders().getFirst(<span class=\"hljs-string\">\"MyResponseHeader\"</span>);\nString body = response.getBody();\n</code></pre>\n<p>您可以通过返回 <code>ResponseEntity</code>的许多<code>RestTemplate</code>方法变体获取响应头。</p>\n<p><a id=\"rest-template-body\"></a></p>\n<h5><a href=\"#rest-template-body\"></a>Body</h5>\n<p>传递到<code>RestTemplate</code>方法并从RestTemplate方法返回的对象在 <code>HttpMessageConverter</code>的帮助下转换为原始内容和从原始内容转换。</p>\n<p>在POST上，输入对象被序列化到请求主体，如以下示例所示：</p>\n<p>URI location = template.postForLocation(&quot;<a href=\"http://example.com/people\">http://example.com/people</a>&quot;, person);</p>\n<p>您无需显式设置请求的<code>Content-Type</code>头。在大多数情况下，您可以找到基于源对象类型的兼容消息转换器，并且所选消息转换器会相应地设置内容类型。 如有必要，您可以使用<code>exchange</code>方法显式提供<code>Content-Type</code>请求头，这反过来会影响选择的消息转换器。</p>\n<p>在GET上，响应的主体被反序列化为输出<code>Object</code>，如以下示例所示：</p>\n<p>Person person = restTemplate.getForObject(&quot;<a href=\"http://example.com/people/%7Bid%7D\">http://example.com/people/{id}</a>&quot;, Person.class, 42);</p>\n<p>不需要显式设置请求的<code>Accept</code>头。在大多数情况下，可以根据预期的响应类型找到兼容的消息转换器，然后有助于填充<code>Accept</code>头。如有必要，可以使用 <code>exchange</code>方法显式提供Accept头。</p>\n<p>默认情况下， <code>RestTemplate</code>会注册所有<a href=\"#rest-message-conversion\">消息转换器</a>，具体取决于有助于确定存在哪些可选转换库的类路径检查。 您还可以将消息转换器设置为显式使用。</p>\n<p><a id=\"rest-message-conversion\"></a></p>\n<h5><a href=\"#rest-message-conversion\"></a>消息转换器</h5>\n<p><a href=\"web-reactive.html#webflux-codecs\">Same as in Spring WebFlux</a></p>\n<p><code>spring-web</code> 模块包含 <code>HttpMessageConverter</code>，用于通过<code>InputStream</code>和<code>OutputStream</code>读取和写入HTTP请求和响应的主体。 <code>HttpMessageConverter</code>实例用于客户端（例如，在<code>RestTemplate</code>中）和服务器端（例如，在Spring MVC REST控制器中）。</p>\n<p>框架中提供了主要媒体（MIME）类型的具体实现，默认情况下，它们在客户端注册<code>RestTemplate</code> ，在服务器端注册<code>RequestMethodHandlerAdapter</code>（请参阅<a href=\"web.html#mvc-config-message-converters\">配置消息转换器</a>）。</p>\n<p><code>HttpMessageConverter</code>的实现将在以下部分中介绍。 对于所有转换器，使用默认媒体类型，但您可以通过设置<code>supportedMediaTypes</code> bean属性来覆盖它。 下表描述了每种实现：</p>\n<p>Table 2. HttpMessageConverter 实现</p>\n<table>\n<thead>\n<tr>\n<th>消息转换器</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>StringHttpMessageConverter</code></td>\n<td>一个<code>HttpMessageConverter</code>实现，可以从HTTP请求和响应中读取和写入<code>String</code>实例。 默认情况下，此转换器支持所有文本媒体类型（<code>text/*</code>），并使用<code>Content-Type</code> 为<code>text/plain</code>进行写入。</td>\n</tr>\n<tr>\n<td><code>FormHttpMessageConverter</code></td>\n<td>一个<code>HttpMessageConverter</code>实现，可以从HTTP请求和响应中读取和写入表单数据。 默认情况下，此转换器读取和写入 <code>application/x-www-form-urlencoded</code>媒体类型。表单数据从<code>MultiValueMap&lt;String, String&gt;</code>读取并写入。</td>\n</tr>\n<tr>\n<td><code>ByteArrayHttpMessageConverter</code></td>\n<td>一个<code>HttpMessageConverter</code>实现，可以从HTTP请求和响应中读取和写入字节数组。 默认情况下，此转换器支持所有媒体类型（<code>*/*</code>），并使用<code>Content-Type</code> 为<code>application/octet-stream</code>进行写入。 您可以通过设置<code>supportedMediaTypes</code>属性并覆盖<code>getContentType(byte[])</code>来覆盖它。</td>\n</tr>\n<tr>\n<td><code>MarshallingHttpMessageConverter</code></td>\n<td>一个<code>HttpMessageConverter</code>实现，可以使用<code>org.springframework.oxm</code>包中的Spring的<code>Marshaller</code>和<code>Unmarshaller</code>抽象来读写XML。 该转换器需要<code>Marshaller</code>和<code>Unmarshaller</code>才能使用。 您可以通过构造函数或bean属性注入这些。 默认情况下，此转换器支持<code>text/xml</code>和 <code>application/xml</code>。</td>\n</tr>\n<tr>\n<td><code>MappingJackson2HttpMessageConverter</code></td>\n<td>一个<code>HttpMessageConverter</code>实现，可以使用Jackson的<code>ObjectMapper</code>读写JSON。您可以根据需要通过使用Jackson提供的注解来自定义JSON映射。 当您需要进一步控制时（对于需要为特定类型提供自定义JSON序列化器/反序列化器的情况），您可以通过<code>ObjectMapper</code>属性注入自定义<code>ObjectMapper</code>。 默认情况下，此转换器支持<code>application/json</code>.。</td>\n</tr>\n<tr>\n<td><code>MappingJackson2XmlHttpMessageConverter</code></td>\n<td>一个<code>HttpMessageConverter</code>实现，可以使用 <a href=\"https://github.com/FasterXML/jackson-dataformat-xml\">Jackson XML</a>扩展的 <code>XmlMapper</code>读写XML。 您可以根据需要通过使用JAXB或Jackson提供的注解来自定义XML映射。 当您需要进一步控制时（对于需要为特定类型提供自定义XML序列化器/反序列化器的情况），您可以通过<code>ObjectMapper</code> 属性注入自定义<code>XmlMapper</code>。 默认情况下，此转换器支持<code>application/xml</code>。</td>\n</tr>\n<tr>\n<td><code>SourceHttpMessageConverter</code></td>\n<td>一个<code>HttpMessageConverter</code>实现，可以从HTTP请求和响应中读取和写入<code>javax.xml.transform.Source</code>。 仅支持<code>DOMSource</code>，<code>SAXSource</code>和<code>StreamSource</code>。 默认情况下，此转换器支持<code>text/xml</code> 和 <code>application/xml</code>。</td>\n</tr>\n<tr>\n<td><code>BufferedImageHttpMessageConverter</code></td>\n<td>一个<code>HttpMessageConverter</code>实现，可以从HTTP请求和响应中读取和写入 <code>java.awt.image.BufferedImage</code>。 此转换器读取和写入Java I/O API支持的媒体类型。</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"rest-template-jsonview\"></a></p>\n<h5><a href=\"#rest-template-jsonview\"></a>Jackson JSON 视图</h5>\n<p>您可以指定<a href=\"http://wiki.fasterxml.com/JacksonJsonViews\">Jackson JSON视图</a>以仅序列化对象属性的子集，如以下示例所示：</p>\n<pre><code class=\"language-java\">MappingJacksonValue value = <span class=\"hljs-keyword\">new</span> MappingJacksonValue(<span class=\"hljs-keyword\">new</span> User(<span class=\"hljs-string\">\"eric\"</span>, <span class=\"hljs-string\">\"7!jd#h23\"</span>));\nvalue.setSerializationView(User.WithoutPasswordView<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)</span>;\n\nRequestEntity&lt;MappingJacksonValue&gt; requestEntity =\n    RequestEntity.post(<span class=\"hljs-keyword\">new</span> URI(<span class=\"hljs-string\">\"http://example.com/user\"</span>)).body(value);\n\nResponseEntity&lt;String&gt; response = template.exchange(requestEntity, String<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)</span>;\n</code></pre>\n<p><a id=\"rest-template-multipart\"></a></p>\n<h5><a href=\"#rest-template-multipart\"></a>Multipart</h5>\n<p>要发送多部分数据，您需要提供<code>MultiValueMap&lt;String, ?&gt;</code> ，其值是表示部件内容的<code>Object</code>实例或表示部件的内容和标头的<code>HttpEntity</code> 实例。 <code>MultipartBodyBuilder</code>提供了一个方便的API来准备多部分请求，如下例所示：</p>\n<pre><code class=\"language-java\">    MultipartBodyBuilder builder = <span class=\"hljs-keyword\">new</span> MultipartBodyBuilder();\n    builder.part(<span class=\"hljs-string\">\"fieldPart\"</span>, <span class=\"hljs-string\">\"fieldValue\"</span>);\n    builder.part(<span class=\"hljs-string\">\"filePart\"</span>, <span class=\"hljs-keyword\">new</span> FileSystemResource(<span class=\"hljs-string\">\"...logo.png\"</span>));\n    builder.part(<span class=\"hljs-string\">\"jsonPart\"</span>, <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">\"Jason\"</span>));\n\n    MultiValueMap&lt;String, HttpEntity&lt;?&gt;&gt; parts = builder.build();\n</code></pre>\n<p>在大多数情况下，您不必为每个部件指定<code>Content-Type</code> 。内容类型是根据选择用于序列化它的 <code>HttpMessageConverter</code>自动确定的，或者在有资源的情况下，基于文件扩展名自动确定。 如有必要，您可以通过其中一个重载的构建器<code>part</code> 方法显式提供要用于每个部件的 <code>MediaType</code>。</p>\n<p>一旦<code>MultiValueMap</code>准备就绪，您可以将其传递给<code>RestTemplate</code>，如以下示例所示：</p>\n<pre><code class=\"language-java\">    MultipartBodyBuilder builder = ...;\n    template.postForObject(<span class=\"hljs-string\">\"http://example.com/upload\"</span>, builder.build(), Void<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)</span>;\n</code></pre>\n<p>如果<code>MultiValueMap</code>包含至少一个非<code>String</code>值，该值也可以表示常规表单数据（即<code>application/x-www-form-urlencoded</code>），则无需将 <code>Content-Type</code>设置为<code>multipart/form-data</code>。 当您使用确保<code>HttpEntity</code> 包装器的 <code>MultipartBodyBuilder</code>时，情况总是如此。</p>\n<p><a id=\"rest-async-resttemplate\"></a></p>\n<h4><a href=\"#rest-async-resttemplate\"></a>1.8.2. 使用 <code>AsyncRestTemplate</code> (已废弃)</h4>\n<p>不推荐使用<code>AsyncRestTemplate</code>。 对于您可能考虑使用<code>AsyncRestTemplate</code>的所有用例，请改用<a href=\"web-reactive.html#webflux-client\">WebClient</a> 。</p>\n",
  "link": "\\en-us\\docs\\springframework\\integration\\remoting.html",
  "meta": {}
}